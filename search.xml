<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>满足条件的最长子数组，能有哪些花样？</title>
      <link href="/2023/02/15/LongestSubArrayMeetCondition/"/>
      <url>/2023/02/15/LongestSubArrayMeetCondition/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="86824b67b444cb62200d4aa4d857f9d0a0469f1d7941851daca5bec71ca4194b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
            <tag> 滑动窗口 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找初体验</title>
      <link href="/2023/02/02/BinarySearchStart/"/>
      <url>/2023/02/02/BinarySearchStart/</url>
      
        <content type="html"><![CDATA[<!-- toc --><p>这篇文章主要介绍一下二分查找算法，以及几个题目。如果你还不懂二分查找算法，那么往下看（大佬止步😄）。</p><h1 id="1-什么是二分查找？"><a href="#1-什么是二分查找？" class="headerlink" title="1. 什么是二分查找？"></a>1. 什么是二分查找？</h1><p>二分查找基于这样的问题背景，就是在一个有序的数组中（不妨假设从小到大排序），如何快速地确定一个数$x$是否存在。容易想到的做法是，遍历一遍数组，如果能找到就返回true，否则返回false。这样的做法最坏情况下时间复杂度是$O(N)$，并且与数组是否有序没有什么关系了。那么能否根据数据有序的条件，加速求解过程呢？</p><p>要判断一个数是否在一个数组中，那么必须在这个数组中找到这个数，才可以认为是存在的，否则不存在。对于这个问题，这个道理是死的。那么就看怎么找了，二分查找不像顺序查找那样，一个一个确认是不是这个数$x$，而更像是一种排除法，不断排除$x$不可能在的区间，直到找到$x$，或者排除掉所有的数。</p><p>算法描述如下：首先设置一个左指针lo，和右指针hi，lo初始化为0（数组第一个下标），hi初始化为数组最后一个元素的下标。现在假设lo和hi之间存在$x$这个数，那么我们取lo和hi中间的位置mid，</p><ul><li>如果mid位置的数是$x$，那么直接返回true；</li><li>否则mid位置的数不等于$x$，那么和$x$一定存在大小关系：<ul><li>如果mid位置的数大于$x$，根据数组的有序性，说明从mid到hi位置这个区间的所有数，都大于$x$，那么可以排除掉这一部分；</li><li>如果mid位置的数小于$x$，根据数组的有序性，说明从lo到mid位置这个区间的所有数，都小于$x$，那么可以排除掉这一部分；</li></ul></li></ul><p>直到lo&gt;hi，说明没有找到$x$这个数，返回false。如下图所示：</p><img src="1.svg"/><p>对于这个查找过程，可以写出如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span>, hi = arr.length - <span class="number">1</span>, mid;</span><br><span class="line">        <span class="keyword">while</span>(lo &lt;= hi) &#123;</span><br><span class="line">            mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// &gt;&gt;&gt; 无符号右移，防止溢出</span></span><br><span class="line">            <span class="keyword">if</span>(arr[mid] == target) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 如果直接找到了，那么返回true</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果mid位置的数比target还要大，说明从mid到hi之间的所有数都大于target，那么hi=mid-1</span></span><br><span class="line">            <span class="keyword">if</span>(arr[mid] &gt; target) hi = mid - <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 否则说明mid位置的数小于target，那么从lo到mid之间的所有数都小于target，那么lo=mid+1</span></span><br><span class="line">            <span class="keyword">else</span> lo = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果上面的过程没有返回，那么就是没找到</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-lower-bound-问题"><a href="#2-lower-bound-问题" class="headerlink" title="2. lower_bound 问题"></a>2. lower_bound 问题</h1><p>在一个升序的有序数组中，例如<code>&#123;0,1,1,3,3,5,5,5,6,8&#125;</code>，找出从左到右遍历的时候，发现的第一个大于等于2的位置。这个问题的意思是，从左到右遍历数组，如果发现一个数大于等于2，那么就返回它的下标。这个方法的时间复杂度显然是$O(N)$，我们需要优化这个时间复杂度的问题。其实就是在这个有序数组中，找大于等于2的最左边的位置，如果数组中所有的元素都小于2，那么返回数组的长度（越界位置）。</p><p>因为数组有序的，这个问题可以考虑使用二分法来解决。假设数组长度是len，目标数target，我们使用一个左指针lo和右指针hi，分别指向0位置和len位置，我们取中间位置mid，</p><ul><li>如果mid位置的数大于等于target，那么说明从mid+1 到 hi之间的所有数，都大于等于target，因为我们要找的是最左的位置，于是可以知道，从mid+1 到 hi之间的所有位置，都不是答案，于是排除这些位置；</li><li>如果mid位置的数小于target，那么说明从lo到mid之间的所有数，都小于target，它们都不可能是答案，于是排除这些位置。</li></ul><p>因为<strong>答案一定存在于lo和hi之间</strong>，我们排除完所有不符合要求的位置，剩下的那个位置就是答案，所以当lo &#x3D;&#x3D; hi的时候，返回这个位置即可。如下图所示：</p><img src="2.svg"/><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LowerBound</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span>, hi = arr.length, mid;</span><br><span class="line">        <span class="keyword">while</span>(lo &lt; hi) &#123;</span><br><span class="line">            mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[mid] &lt; target) lo = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> hi = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lo;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对照测试代码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">find2</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt;= target) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Testcase</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100_0000</span>;</span><br><span class="line">        <span class="keyword">while</span>(a-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[size], arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) arr1[i] = arr2[i] = r.nextInt();</span><br><span class="line">            Arrays.sort(arr1);</span><br><span class="line">            Arrays.sort(arr2);</span><br><span class="line">            <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> r.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans1</span> <span class="operator">=</span> find(arr1, target);</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans2</span> <span class="operator">=</span> find2(arr2, target);</span><br><span class="line">            <span class="keyword">if</span>(ans1 != ans2) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Oops! wrong answer, ans1:&quot;</span> + ans1 + <span class="string">&quot;,ans2:&quot;</span> + ans2);</span><br><span class="line">                System.out.println(Arrays.toString(arr1));</span><br><span class="line">                System.out.println(Arrays.toString(arr2));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Testcase: &quot;</span> + a + <span class="string">&quot; done!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意第5行代码中while的条件，不能写<code>&lt;=</code>，否则就会死循环。这是因为我们知道，答案一定在lo和hi之间，当lo和hi逐渐靠近的时候，最后相遇的那个位置，一定是答案（因为其他位置被我们排除了）。</p><p>在上面的二分查找中while的条件为什么要写<code>&lt;=</code>呢，这是因为，我们是在一个数组中判断target是否存在，我们如果写成<code>&lt;</code>的话，我们就有可能跳过一些可能性的验证。例如当改成<code>&lt;</code>符号的时候，对于这样的数组<code>&#123;2,3,4&#125;</code>，当target&#x3D;2的时候，就会出错了。</p><p>这个边界位置比较容易出错，请大家注意避坑。</p><h1 id="3-局部最小的位置"><a href="#3-局部最小的位置" class="headerlink" title="3. 局部最小的位置"></a>3. 局部最小的位置</h1><p>给定一个数组arr，如果数组中存在一个位置$i$，使得arr[i]&lt;arr[i-1] &amp;&amp; arr[i] &lt; arr[i+1]成立，那么称这个位置是局部最小的位置，默认认为-1位置和数组最后一个元素的下一个位置是无穷大的，且数组中所有相邻的元素都不相同。请返回数组中任意一个局部最小的位置。</p><p>这个问题可以在时间复杂度$O(N)$内得到答案，是否有更好的做法呢？</p><p>根据题意可以知道，-1位置是无穷大的，那么从-1到0位置就是递减的，同理，数组最后一个元素那里是递增的，又因为数组中相邻的元素都不相同，那么数组中必然存在一个局部最小的位置。如下图所示：</p><img src="3.svg"/><p>那么如何找这个局部最小的位置呢？</p><p>我们设置两个指针lo和hi，分别初始化为0和数组最后一个元素的位置，可以知道，局部最小的位置一定存在$[lo,hi]$这个区间，当lo&lt;hi的时候，执行下面的操作：</p><p>计算lo和hi的中间位置mid，此时我们考察mid和mid+1，mid-1这两个位置之间的数值关系，如果：</p><ul><li>mid位置的数小于mid-1位置的数，且小于mid+1位置的数，那么直接返回mid位置即可；</li><li>否则说明mid位置的数至少比mid-1位置的数大或者比mid+1位置的数大，如果<ul><li>mid位置的数比mid-1位置的数大，那么说明局部最小一定存在于$[lo,mid-1]$区间；也有可能会存在于$[mid,hi]$区间，但是我们知道了此时$[lo,mid-1]$区间一定会存在答案，于是我们可以舍弃$[mid,hi]$区间的可能性，不影响我们找到最终的答案。</li><li>否则mid位置的数比mid+1位置的数大，那么说明局部最小一定存在于$[mid+1,hi]$区间；也有可能存在于$[lo,mid-1]$区间中，但是同样原因，我们舍弃这个可能性。</li></ul></li></ul><p>当lo和hi相遇的时候，就返回lo即可，这个时间复杂度做到$O(\log_2N)$，如下图所示：</p><img src="4.svg"/><p>前面两个题目，我们是不知道答案在数组中的哪个范围，二分查找可以帮助我们排除掉一些根本不会成为答案的选择，从而缩小查询范围；但是在这里，我们知道答案所在的范围，我们需要舍弃一些可能答案的选择，从而缩小查找的范围。大家体会这样的思路。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalMin</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getlocalMin</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span>, hi = arr.length - <span class="number">1</span>, mid;</span><br><span class="line">        <span class="keyword">while</span>(lo &lt; hi) &#123;</span><br><span class="line">            mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(</span><br><span class="line">                (mid - <span class="number">1</span> == -<span class="number">1</span> || arr[mid - <span class="number">1</span>] &gt; arr[mid]) </span><br><span class="line">                &amp;&amp; </span><br><span class="line">                (mid + <span class="number">1</span> == arr.length || arr[mid + <span class="number">1</span>] &gt; arr[mid])</span><br><span class="line">            ) <span class="keyword">return</span> mid; <span class="comment">// 如果mid位置的数，小于它左边和右边的数，那么mid就是一个局部最小的位置</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 否则如果mid大于它左边的数，那么区间[lo,mid - 1]一定存在局部最小</span></span><br><span class="line">            <span class="keyword">if</span>(mid - <span class="number">1</span> &gt; -<span class="number">1</span> &amp;&amp; arr[mid - <span class="number">1</span>] &lt; arr[mid]) hi = mid - <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 否则mid右边的数一定存在，且mid位置的数大于它右边的数，那么区间[mid + 1,hi]一定存在局部最小</span></span><br><span class="line">            <span class="keyword">else</span> lo = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lo;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Tesecase</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">100_0000</span>;</span><br><span class="line">        <span class="keyword">while</span>(time-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> r.nextInt(<span class="number">1000</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">            <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> r.nextInt();</span><br><span class="line">            arr[<span class="number">0</span>] = pre;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; size; ++i) &#123;</span><br><span class="line">                <span class="keyword">while</span>((arr[i] = r.nextInt()) == pre);</span><br><span class="line">                pre = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> getlocalMin(arr);</span><br><span class="line">            <span class="keyword">if</span>((ans - <span class="number">1</span> == -<span class="number">1</span> || arr[ans - <span class="number">1</span>] &gt; arr[ans]) &amp;&amp; (ans + <span class="number">1</span> == size || arr[ans + <span class="number">1</span>] &gt; arr[ans])) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Testcase: &quot;</span> + time + <span class="string">&quot; done!&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Oops! wrong answer:&quot;</span> + ans);</span><br><span class="line">                System.out.println(Arrays.toString(arr));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几个有关随机数的有趣问题</title>
      <link href="/2023/01/20/RandomNumber/"/>
      <url>/2023/01/20/RandomNumber/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="26242c93118d1a1600d043daf2a15a652f0c40a758402d328464649e3693292b">ea43e291078290804dfc12960269e3462d8a335812b0e86215b67b32576d5bd8f6dfdf5ee1f58f76c0827297f0a33ef6c80e895801c696c95e983624c3914c39b1b6a4fd0a94da6f4541cc64d3c31a7e284b93c05681a89489e14404dfee46dc0b2d523cfd3f936d30311961bcd6875e0b8a052587f35db89e1f5525215acede78f0848d1a4180992c8369903c7b204681fb0beb2df631dce59998db1af43f69ccaa06307adf32eaac8d1c2e3658782392fd9cf4f4eb3ef956d4097dcbb93ac4f72e52118257f2b73992bfea88db7b08b298f14e7f5558e6ca43f753e9b192ade4ccb20fcd8c1fd49a29ca488cfd3a468a1f4cb32f5359cdb6c61492cb68a78ff31f2655d8f6e2811f0dc445bb5d13a341a4a2e0a547c3199c68626e566a392d0b649f87936137b734c621fd2e0acf9e4af117a7b7621c9ef4097b73e1ecdf8165fe78c5170502b455b87f86b2e68d5c332e466f03275b1e39974f36c521e92a8b5a207d899ae745add7e1f04e2d30fd11741612c2b302ea01e237bd4a82bc9788c51e69fdc303031d3890afe1b238571692ac1ef2fb518f47e8c13b57d7f583e7c55c2ffa0b098eb88714b3b3d6a9862699cbb652691cce21982b472466562fb70b8c154644d9934bb6736c7f0cdc57199ece9fc89ee8db3ce0c8c7204fcbe0d8faec296faece806f9c2b22269aa8a6d96781a8402bd6ef09f6ff0614ee3c3f73bf5076851a6dac71fb27cc6005bf3bd6d04c03a81607f9a1d56474463ab38347c33a8fea8cdca106d73e524e3044649744a9ebf28250479611c2aabb33762b6cd4943f420e0bd1f33ec532a4a245949aec04244b3a529c9f8ae4d471b60663426aa74ce819f3c3b5407cc4b4aff7bf147c00df5d6319e0c6ae73d85d40a9c7b307ad4a4bcf28381a79c7b3fdcc998bae8771d0e898884391c2b8e0eba302dd46726d310ca3b8c5c78f4fcbc01545bea0edeb089c167631a18ac4660e41a76ce93ad18ca6914fa0258fb93ff503dab23370aecef4fa2fbdd28e24938bb93a9732e82fbd927bb46b0cb2aeb95fa23874d2282a1ea2fc3770ffb255eac74f9c76177fa63a8abb36769ac565ec53e9abf53149d2c480503f65b0bb81ce108b5347456c70fbc778f964792e8713f8ed7348de5ad8d5c46945878a42b28fac275f66c77caa4ad10032266c791f4c271d0571dc015fa5e62b66c7a4dd3a630bf1e6e27330d350f5c838bc25c4643ab8c58ee1280033b63b7fbf1b7a7a046ee53ad3728fde4827e4041ddc318e8813d2c88595f321fba1bc6189374215f5a3332e180d2ac737f2b896b7b8635e7e31644403bd10c2a97eb7c67b3e602da3078803e43387b597eea1b324b3a05dc261d094dbba1d3a868171da1ac6995fe2dd55bb90bdec803236b2c788e10dd449d67c022d3b81734c0286d841e6d084a1420c82e16e06cbb80a3aa257c5e086089ff752073e570219115e24f4a67f12e5def795800576253d0e9f4f0b708a26620a012d90dfd4d4550f43a13023d7ab12aa57a225b672d84b712df94e3028e92d11aae3d1617ad69b7f30d24797bc2ccd3c006d031171b96730c9ad9064ad2b2c23e2bc9bb7f63f75517100ccceb8685aa3bc30658cad39ecb767ec46dfd051dc5944acba0ee20b5e93ff04a54e035c190f5917c2fd23019710baa67e49db3b03c886f163aaf4ddde85cefa64b4311ffbe1d06b5a9765e504e1d0968945a5eab111c9fa4215bcc7512487064d2b44ab836c2d9f3ef924588903679826d908d9fee7f09d961b9859dba92de35d8fc4b9e1e5b233c3f4e41466294a8079268e3dac8d334e28838f7288d512c36b3ab2db0c0812013951b94290ebec4805ad45d5cc0e633ac5cd4cb72a171e49af04b217600e7d775a94c4559623ad201b1fe8fe6f9f15d1c7d733d93c1c8b954f84af9f58f7bdcf442dce222aed442d4035d5e2dead61e9438474effd3de15101da61a1b1d6bdc55f149d47401adaeaec8a0e808e23dd19b465274d1b2956594571611473c537a089de2c060c2f77e76268568fa76dd172ce4fffca24f201ffbcc63b6f80b80766deba1af425883a3a60a9dd3f1dca7c4b397f9e04112db51fd57f54b1f0331eae4a75e0461f708bd82d69c0158cd73a41fc018ef30cf256203d045fc3595a10c2694a29626121aa1d0f383180b6504b78ade6147198447801ff79e1377c1d659c88c5496537a81ac1daaa804664c36da7afefaca25761a57cc9963f7ba79de0abeb889d58eb456571874094e2e0b242ae1b623bc7a34857aa42f5145e760ac8034bf6bf85a0acc3da0b17f3f24ab88d6a0fbc58a75dd9c46e703177429db4468838aa96cff35b9248e294c4740021b96ee87b4ce81eb54c4dada1ca0c364db1677f7ff21fcb4069aaa16b224f435982feb222548bfdff5ac4477556559770a4ba80e1010403542ab5ad654fa36489e64270b06b2e45ab98f99e34df6f909a83910545283eb0b9afde0c853e64432e1fc2eebf3c146e96bd1f754fa5367d34eaa586f0a8d759eb1789490f5b0537ed41c38c8e68118fd38837dadb155645cae3511b35b8899fdb2ba0073c2df089de26793a648a68e61825e4541aa14f7a2983d2062d1e484a984c659b8d8ae730e08b54c2ac2e5baddadfb4436edef23741e803f6ee2f7dd3b9ec1697ce12495293ab873c17c9918df2391aac26b7c80118f2b11f8b89c2a5da689e22671eecf0d5732d7a5b56ea8e286dc3afbf322836ac669ef4479b01dd5fceaefb368267593fe40ea5cbaaf315df67de26c7b15578552d6cd0bc94050299feb8cc759f1f454d81a90129d6a6dbad71d24e4f2672a8e9ce77e3e85fd120a6c7fa9090bba332324632e8e0d243bec47f66022f61ff9a9e5827516c88427883ea2af423ecdc43f49b1f74152c7d30387b777a59661c0acfbf28291631171e6075f2e9cacce2c80628ae6ed2cd2c3a3e21bada5898053be9af0c952eec7d3e492fea7a6b2aa16d3bc32ec6cd1735f1de1bde93814f73ada7bb2b5a5bf085ed51331803920c969876fdd71f1e45f3e97c0e2ccbd83be81e18910ef54114383079352f41561ad38fbfe9582e221f042a837a6da9e9dce5798cd62915fe4cf978810223eec808f4ad8d21f83c476af843fd7c633b111a2ff5222279985ea775711c414539a95176b403ad7b086bde6b4516bdb067356c4005eac0587d5827ed9f2f97d9cb0d765e85c5f790eab30283946464036641d875d3d83b0470cd4b9299aab83c69e4360da3a192c13b05dfe0c368dbfe5c8dd9d85f612a2d1218827d3755b281811ae6b69702cbc7a071bc12f8d75a8d50d4dc2a2df4971f6180e642ee8daf32f5e2116ee60ad2b0c9b630f0fe30bec61d40c267a5b1a7f993e67138dbb5a2234525c13acc2d26a24e51aa15a927f94e1d573b7de93200b4b5311e7bfd7618c72b39ff43c0470f7d403f7c74a5327283e1c5406b0d4283c4eaf7c9ad5f229fdde29e79cd82359cea959c4b479c43042d06b2eae37e04d3df11c45c6865726beeda44c2dd13020c572ee4cde223fc758a98be4beb8da56a6e8b7f18ec1250315fa0952557a3d898dce5431ad165d74ed20ce3ccc0bd8e7e05df851288b97bb766f84d3edaa27b803889a6a146cd470e45a982d847dd677a686b7ae95f95fc1fcedcac2e7588f7033ec5691851fe76271eb1b1671b321e51522287fb2489ed268fb61661d88de22b4553bf25ed76c4c6b5f251e96946fbd9e0918adf799ea8d31e8fa53ee748ed62d04dfbc34ac7d7736fda2ff9b0d51363654b7d87e41493fb3066e7c32a0cb79a069d48e83aaf8a7be086bf903b3f8b6bc6a820523cb680826aec352e5f8abba5c59a88f5f7a938c4b356359ef770059395ad52330c36e788178675224c2dffdb106fb52d9a60116cdc7c54b0b582d31d7d4a22a076d6931707454f8dbd7cfa679742ce112217a7ffb80049a24c3891a82107d9bb9863e1e55d623bb7317b4948d45082a4f83c390e3183b0a7a139597e8b748cab0c2744b09e342617990d758c48f27e6ca3bb0842e25470cc5fb6ce984237b412be5dc07e398301f0ab80615f96f0508d58c59f0ede0a2399953fe74a19067cefe6dde8845857cd84cb916bb0ff405f2fad1dd53b22bf745fd2a2b5c8397ec6a66d3b3373da0504c8ae4fd940380e2dd14399a28de2cc5d55c14b361638d62da614ccbc7026fe6de7fac0dc295871d70d7ead1f1cdbab4d177862392960364378684b78669a530416c6ba2f9b49386483c5f2e419db8f59b647a0f2f0980226fa2701cbb7cf4fbe29f213c76fe006ae675ee43ef2cff80a607fff29c57464148920ae116887d878fa41bc62334e032e271074205198f890103b947a1a6cc389912fdebf172c42d4e2c5d2682ec688cfab4d2aaf764956ad5f35edf9a60b29031b9108ff92c5323f3f856503267965526acbd4a8fba0345ec889a91ed50e326eda9063f5866da0fd897f25feb86d56ca4a50f7baa3e845425db64a633ca6161981511f52921d07d05a81271eab1e9dd24acfe16a98e9b888411ea71e7b22b483dae15fc6199d5ec56dbb036e7db53c93e04278f563f98b94c9cb26ba582d6eea8668e388038d07340d221a1b01ff1455806812d9ccdd396ed7e0e401b8af797c31a6e5d8422a73c9748254e49fd93c9eb3f388c08e747059ba21d60c0165e3a46e0080cb25e543443eaed3ba47a3ac097891861e085eb0eb477b64f78e2a02183f61ceecaed3e2caf01ea3a9a6fec0a1e81823bbe8e79e474a1083694806dcd53e4e6ef7c002fef11d4c2f034f46d100318d710e3541a134b198581d30df9618217a7e1d5fd999336474d4116a3c5ba4c9b17189860a2350ff62cabaad542febe53c776ce6f665b59c85d99af68d293083f0df0bd77c5cffd8aa73883de4014ed6b3caadc0441e0b7fd5538262e97a61db26b7f6a71d5fad7f1b06271c5b6cc3b521a80f18b0a534cc55c3e570ba7c3b76004523d52ce5ba9113725f1dc9fddffb1ac4c323f2019dca2826ff23178dea6f05374d570622bd25aff3fd9927501705e8540c0bea1af43737447ba832fee039b33090749a30433fa161a9072608d30a714efe0f5996526a7029494d35fe050052ea78f8499718cf53b5c2e84d6b7d3818214e7064ac5ec3c3005ec903ede38f0ccf6c158cbf499935677f71fcc9e1f0375f03ce63e7125e5c83ee4a9deee1fe0dd980e2d6ad137420ed45966de765cc02d79c7336be60282d0e772d379a8febfb7b9777e66d8259687705086007f1d194cca9976a5289f6cb30b4be72f41a9c4a58e94aa59cf7d49c3b1147cdc6d8bdac6da82cbc52d7a8f7e07b24acb5912978dd489dd9b3c66664d8333eac47e2227c3c93c6fb9f5d83d5f284ffe3ca0ac741988b8b47d657c99de3d774db9036112f1f766acdcd351e777ec5349a4d9c68a904bd8b5b775175a5f080ddbce27041680d238d62afbe586891c6c01cbd1374b1cdcc6cfefad88d93e2ff6afbe078917be46e5bf9f7958c5f9c8260a6a94002d1fa76c1b78e9212588e97b41b04b94a9f59bc92e15b246c2ba6cafb9b06d5ce3cac1e2025769d6c0be095a91a6a9afca3920eeb62f7bee77c4b66c426e436e1281b2cfef1adcfa15b80b6ae1e46c4a0a33220ae75a8e824ecaec33b82461a64727241faadafa2deb441455b1bc888a406ced89cf6524cdd8636400b6513b89489189c9ecc027713d6f6ae7a8a9a113118a9df528cd87e663d51c5d800e50b1b302bcf548cb4ee1f8c9f58932e765a82343a4926d269d69ba03a39a73c36beb1c004162b966a594fe5f7006a23d8b45b33c6cde6f6e5e8062472bc1d33f5e9ab28693b42406787920a770d32341c232b225386bb47791d01e55ae2c226471a814aff5869ea31cf69f728c4ec2dfa72d4d09f9c4db8f494e154e013d0f686cf7a38ac1f0596e3853892de3f4e0232a51bdd9ca9ea715612a7b0b7723c09717da2b8154ca6a5464c2075e9f397e99163d163f53c3354e2b9c882a1ff95ef33922059b4e7c4bf10b40abe7dbece35c2c116462aacd1d7d15a82ad374ab3d1ecd9c16be93ab6519df4130dc0d8b93cdd0163081861f0b4f6a0cc3b1bbd66350a5ef8c57ccdd27b747c77c7453df4588f769482a2c4a64cc89cf30a893a82e4f7269d46c23771e1293a77f410b7874afe4046e572c273873e711b178e75d6d4a5b964ea84fda933a646b50e4defea60fc1d18bcbcd90898e62777dc5466ca63f09e0f232cf42310a29dbfcaa943f86d27fe7f6b74602a90b73a95c77326ba765bc4a137e944c078b0aacc1f33bd90621582358a8165ef764b958972befc74a059d6842c1a9011f1597782ab84eae0645aa66eb1d5cd4d425f36486558ef226c6d92a9191f246e87c9d71b7ea9c900362801ffa5c3bdcd3e6b9148382f7d4eb1aa4313b3a0050ee5b6cfd01882c0c7fdb82a1f9a3bc738b8bcf1349dbb764d92679b8059855271a36eb190faf97c81e779d1827fb903395b35133e09093a1290b6a53986398bd8ddf09a6eaea8fdc582ecf1ccb4b858638fa1df0329013c984298665a0da9b3559772d16c395eb4f99d5dd835e795348490652360d9445335491e4826073e6e9f76b19edfe5232451682ab22891658b3f6b1a3383f7a04b80945d4381e03c5aeec858b45277e75b45e23e0db0d3acbb62e4f3ed820eb47b0d6caf9542599d558c04fa47b04d6373651131c1146a01f97a82e1138c963e0fa332fad5bfc34b7bcc9a453c24a7c34e1ab844004eb4d1b5102c6098a42b2449da9f8b98a10bb8641e018d3ecb6514a6b7c9aebbdcfe30edfe92619a2c5de2faaeb5e5f75f7706e3047b77d7e378234d6c6ec22e22dcdddd91b7d07d4db97cc80a9a3687308fa5eff0271f377cb24aa73f47f518fcd385735b66f723c415de1f2555ce8378386d1432b3428ebd9b26a5b66677c9743ba1bac97b758c8f9c67eb922759d39a188a90c716e38520794789df66dff7b360c9fe06aa5a3f8f1345db36bc1684fa6f8d74e3dae57ddca65cd6d4967da94d31fe69ce3b2568ea507a4f839f482a655d23ba24b5977e4fa0442b38158741c5a1d1472c2ee4b837756ebc1a71c31b33c2bff3177480eae8c98fc1e6a13b7cbe2cddd63ece1089e4e842afa0e27e59f09dfe24f4687350bfb50bb5b0a805818f2a9d6c9acfd650cb4314f7f7cb6728255ac2c9a8640f511af1551995405a8aa770035574c5f566e3ada4d24e6978e1c82b630bdeff2315fa125f75d4f0661f69f723eccd39ed88b9317581bac165ec2bd9e378ad8a8384eccfa49c527a7654d063801d4b6fd88e5ac38cd6804bfc93ec0f057009a56bedc7834ca77cb5b0d5d87ab846bf48dfde19ff1ba0882ef78a531fe3998ef4a252b31d87bc5e6ea929f9bf1f146d7924afde821c71bd58af5283efc258dd610bce95e4efcdce16df1979243655ffeb5066aeec0114bd4e7f5fc58578964e7a4345af81fd49c060f03caa6f145ae09e7e3841007eb6598e5a2104ee24d39fdf44bdc966bff575a8d72bab9c3ce72946a9f64161890e231d40fac07e41a46704a16b7141990e045ba93dedb184d274e11131c4bef7e90d4dd6fc8d0c197e0665e1a637ae4f56512a2ba0b715cf01c8aaa8117c139efbb523d986f6cd0bde7fa27858455fa11ff541444dfa2ad428972221f2f02a4dacb1892e2bd2a2266d3578bdeee6d4525496fa2aa89eeec670228965f999723d62727ad6838242a631fe5e713cfbf74365ecb2d3d0f214aaa7aa6eba9056ccb9459cbdafcddd030a93acfa2ab5c6fd2682bdca690990efa4122685c1390a2a657d6f881835a6cb0dd1509a0007a052bc440c81e13249a89ea15d95ab67736e2030d9c61bcd403b57c1f62b84eb3c38dba1233f87789a14770b7ce42b3a743553eae316b91f54ad54dae57569b837a39bfd82d899f2de16f6f9da88105a322ff88be01f9ca191fce3d21bd4a5c8c123bbe64dd92757af42635d1b232f24155cfd895e47abdbccc63e4f5d7a9dabd410b6d9cb5744c3a9a701fc8b0e48c3c16d95ccd3914b2382c7882535188e53e15d5bd270f9dd7575c59b779b0a99d99a81ca549d7bd6b29470b8eb0b763027ac8c2b40bd06a7dc1fdd5a84627b6e4fc4ae67de8fbc4c2ce7c7f7b71d134666134f89650f16565da191dd11684f37fc92f4210b191834f4f0618f4bc82f95a587e9ac761f20c57620720642793adc0327ca36c02af3a963f13c5eb12918719603519a55c9fdac1d2171be2ab97a26a2459d9ab007edc228e55852514bee70adcb0f0e6d314684129a3ff7ebcfa8b717f6fe4cd8c884282f64022a73832fcc97472ee81c50739cbffa8efa94f5892abf8d285e03908d1998a24015ff192c7ae95104baadccf4bf64312e76e0c52b4e2fa880594f9e2250b6ac8d7f6ef28649ef97a82d887711b2e1b6a44e49c543143ca82edad530746a4806276b9aedd008c920495beb6c3a92a2dba3dbb91364ded3ef28dd3a0323b12b611da501557003be2531cf287a05ebfa64e323d65bb8e1cc27e90196aa045abeee2913ea00454c3d7af87a7e0d4e6fd8061b44b47485c6c63f83126a2863f0f867dc580d591edac873eb5d24d4713d708564e08001412d11d2a9e9de4e939ac7bf386cfdc7f042a6323683d882814ddc6c9f051fd996a2c497bc2a7a0b16b2b66536d8f4b24379a4157ff08fd4cf61e468d612e4c2595f0d5ca8fd09a6925374b9a36773663a026197fb49a6e3cc4910b5fd38631ddfa0bbb6d6d46f7c788def7ddf9345abc068efcb4e523b3c178d5cb8c83b6306b070e995350dc4df05599b8c4631817a568597960752ad2c1847acfd6d5eec3b25ddb38a7004926b7385e07593711aea37faae5650f1a91bde75c2c143d19ca8f77d062e3a8809491187c1d05e94d71df6f2070e4d0ced4ff27f91cab9fcc5e07274dd15fc3c9e889ce1b1c40bcd7d37cf4ca40d882f13012eb1e8366f01de7e66dbd4b4c43eb5e3b1b2f43ecb04e26a037e4c790917ba7168417fcf62d8073cb4bd99f0dadd6577457a0050d3cfa3a202b54ed24d93d7293b572d66ff6ed4e4b1a81d70d5eec1c59574bda240b3e934f5b64515685eebacd0b6029a0742370edf5d74a1b0e2e1e5c14d33f946faf56186f4ab4a9f4953bf97917fb36f22efc0af2725d23a72be7a84dfee4d87d400b4c99165eb7be556455f526f95104e2c9efc3f9a964eb6074bd99e3c6f3ed905ffee5b9261764b4a015f0adcc40c86fd9430adcba4ae3d539172e5ff61a5ea24649b42fb6d36bf9003e7eed6397fa69c3e7af8432ac6ba51006ea895cae655b0ad7314b457468df26f845a903f0f896cb76e0cf76abcaa772c697102d0b7c7802711cb1fc301bcf4a3f7b77af6dc1808d6d16702d40a1b64b99a379b7bd83b1f7b108c2fe43bd2b2ff0d2d3bdeda6ac210bab15f8c3ed7da18ec172281b33a4c89d79af0fd588eddd0e251b41202640e652bb536a9f0e0b9b73e87de745e919e67d87ee8ffabc5956c7069c24c661fe2a89ea351b1f5f5a484d1a878968ea0de94bfcd6663aeba6edd78764380dd7822aab5d665a8042d644d2d4b797fb2fe10278b2b14a37b8bc124c3e51e5204f9e01ae4fdc33d70ead34158255ed049eb3bf915f082487889ae61f6d43095d70aa56b6fde2ee58665b4a0a9f81e2dc496aaeb52bd821b78838dd9e8162283974b28bceb651d728765d37b6ded97c907632d854dcd11c80cc77b69ff0dbcf314f4d4ba0dcb4f5b7a213fe28106df39bed3655ba91aab9845524c519e8e30e3aa9a0f254e99996932b78fd4401a5dcc212642114eea95043b283221beea7a775cb9592b8188ccba31fdf05ac58594c19c3ec6df1b4bfa0c33c6bf42aa18e12e7ad52b7c1bd29b65ae8f96af432413c1f308e0fd704c075bd2ae37c25fa42f62b388b6fd241e72ee2d3ebb607d43fdc8bca49ab13be6faadeea1320e043798976035b35dc131f5694dfcc4cefa3e0eba4780ad1f26138c0eddffaa2660dade1873cccb0670ba09e4e9f667c122910470d56ae0db68a60e3ba63e654b9ac88bf2b14812c091e0366f7aaf030ab85c3cec06990e9bb64407420c3177a8ad7d65379c37043a5b714d7480d5579f4ad22e94f138602268431b0fafbb078d5b3d0c319663e70e8e78efb29aba2afe4128ce2e677e31043647d5a7ad8a780ad57e09164284186317d19262de704a0cb08f25a1247f6f0ccea020ae851a288358062613b5dd0cd43dda9b2b79142682817595dd8b6758a3879172c3e1c54c00409d9b0758aaadb8b8a16cdd751c799b13c445dfa793801f3eda0f78973f06efce85834191b76515049d8cdcce1902aef2071d950812a6a3eeca1bcd8c79fb0eca4f9ccf3e70207fadc95dc109fc03a22d96e7e6e19399f00488f2a78baa52bb40e8b6aac807c28612d15f8bdd41cae9febfde9c590bddc19ab76fbbcabdbe3184bf472a8d52975754430bd3bf7b0583a441973173c33ab0620b03dd1fb81a6cffd4f6b6bf8b0c9cca07c6024600508ceeb33ea381b1f7b5dfcf4f7ef121a999bb0bf19a6eb11b1a22b874de54848501616d2ce8b0ccbf89937d1349540940f2c342dce0f169ff4f3567d3f2217d3e1777f0bb74860979fb62e6ccc63eab9e9e90bf8d38f17e9aa7ab94f86b5ca6c16d7a48a48054ab9934bb76b0ff707e96386f2a27b88fa14fa3b4234052c46237b670edcb2dd55d4d1cadd687eb79768a853d85989c4d35d13ec45fa5c7b48321fb9e56848e255702ec30314c39dadab206a3df81b9d0381737c5de096351946fecc47753ec3f40f19f2efd6d9e989434df5a6f8d05287a6fda8f3469f1858fde00f07a4ac76e3c44d086726fd97c6beae321f0f6c3cdd954ffcd156c392b71f0906ea54219dde65c0c8cb2632f7a5ce8ba27f07ee214619080552741b80ff5742f4ee9e87c92091bb1ce7e60a57bce6d5a78855124f9a4b576bb2dff9746962e76760b573461296f13262fb5488c4d8c4b47b54861d1b46b4db380d0b13e1704b728ae18422fc248f079e7a09d2ee7f72ba523839bbce7f94ff68e119b123725397c0e100e848fe218d33f2797d8990d7f5fbc6ba523b128386c553f80c8407b1ad8d59ddf590e8381f9d28ae5872c2e064cede367a151d883799e8a3a5f2d29db4339ffc2fcae827deeff36d55b38f0942d79276a695e5c3ddc3c71c9ee4b2932428e0a83431056e645e932e6feaddf8e7299ce90bdbc7172115b55b44f0f634e19c277185a3d0463ee12e6ef5f408168e7083133f1442f23dccae3b485056e1e3db78458c46dc6dd0a11e3579abb086cad078122f76d53fb66ec3ec3dba14051b91548f3a7ada960b9b1aef2e6fb9f2a3b27f7924a05fe508be4149cb29b43c4233ca45fcc2366f233a7bb145177008a1312b871b2ffeb544d6687c20aacda665b1d8642283c32f9021a9b65ff718d328571673e62ac8deb198640ce802ee61f70b51fe68a9280f7cd63cc303a4a784745cc5012b0ea8661547afaf0b7fe69e5538c77670644ffe834be646324a5c1618adb89645d9d53e12744a0f72076129d732cab59405febdaa5ebf52b1387e3760caf204ce188e50db43b15bc28d6d26233d77946c55dcd95f898fe30bd8c65310d21af692802de3ce95105a295c5d4f4c3518c648b18b12a2e943cd22f6f8c3ed89ca9daa68853adcf29df3d0691013ad6e09ecbdb948e842bc755dc8a46a26b6710916be0f045aa7586c38ca3dbab22142572fb9fe898203ba6bbd55795718897f63390da58044b46d976310e1834b7c412a52fd3180abfcc75d860463ec305b55b2c7139b689dfd7a51e046a2ddd4c66cbda71755476d9a4c29142c41deb9cc10d0c8496cf88372f58c5ad9024a1cccb2e27b8bda294af694abff4c32e3da58324be5b046cd96d5831ad3b77205ad902d9ca3737997a9ccd11e3f5ff874aa28d22be97da8017b6a3f42f46e7c4a4ab58d8d07720f223eb3a21096601f22dc91c0031b37c46a5850314a98232a8af181e69cb8b2dae5656b247136d520fdbb1b6d5ea90f34dd10704affc085ce8239cfc601cc334416b8f7f496b405d7bedaaeff4a1e9c9389ad5487ff6300c185419eabc6cd23139b1764d3596fc7b077191df6979d571a3efbc9a87c98dcb7ac5ce1d660b377596c311b010ffb0f740efa9a6bdd1f499b009efe933122586c228a7d3beca4bc47a1ba00c10b0618d32511196794d933da9d4700b06268bb7bf98a9fc79340f70dfe4d0a90bb36ad533bd4f8b977768290159cee5be3e0e127c3802ecea3440825a4a07def88b08e29b325f69a444db834b5ec7e5f9b1ddbb4f6c578f1f77d6d4274e0f132416c1bebafd38e84e89b45db5d0e56cb0c2cae59b892eb8e29e472f8de52e4617d4cfae2e08a2fdadbdd5bfa8311047d67cd46997fba58e3e9ebf82d292eedde2d45fde2bbe5ce1f105830a33c62939c90c211196ad8b0beb322d3b2dbddaa3e9d2906e2d12654ea89a471588183fbee8b9abc95211911d3ee2dc45d9bdf3843c4fad2cf77b01dc89c487f8e67b4c2365c5be0902d24a78e240ad1cccc50470ed7a49fc54a0a32315329dd470cb9a17ef7aadf8fa066b439bb6c0c769617dc636e084d6aeb266a7cd2efe2007d028edb2e42dabf444b1f393c822a4b40e144d4972bf2561ac33c1ba4683359e92bf9111a35da64ec9c001ec83ec7e705315d01d1006dcd14da6037601d4a417e173dd55cabc789fca4806eb499ab431224c1b57a1235e44bed110144a97b3dd3ff6a0ebb179f3ca5d162558eecd1226ae3e535f890eb4f537d49e8f4d721799680a918555d643ec85190625a73ae12adbb5acc69863bab7edcafca82e59858cb769f7744ac934b52f355385c8c49c581fe986b13e86bebf1ec4aea2ced0debdec79e7075caebfd5b92c2d9d595ee9f1f723ff66c46d2c7fbcb5d13626aa277051586f6c0fa1f0c5ec14a97e093dae6731bd095e7181557fbb0de932df9a8d9edaad00b39a25005803717b44e3aa24aef42ef9b42ab97d5b60526723c6380b55797e37ea767d9f14604e1ea4359078fcad31a10b83673f14d70f93527094ea29f20e8a94642cb21a83802aaa04c6d178bf6579e0f2524417d44367a0b15bb8d2b4ab8abfb3caf2e35a83523d33b613e0a72695a499588ee8c53b9567e56def350991eedabd21174dabbdd10faea5e6bd10fc808a9137562af786e75dec9aec68088dc28678b6c1d309df50d17ebcac0349d11d9bad9e4c661d1051f8e5cd5ddae5465d398facc6ae42ae167bb1849c684c0f6865ebae59e8a344b990cada1815ca866aead6ab73791e914d3d707cc176cf1ac301520842dc5a38a1d8abb9ebb2e3d6fd524be9fc13caed543a29b2c9fa959f7963165efaa69f7eea491e004027ee7b63cbd0ca810a2b808242ca28947cb6235be40f8e2d5b816e754e0f51a652ffa115de725821334cc50b22624cc489e156cfa3683ab86c73262ded060610b004df21d0e813d063792e9763d86f90019b94cc2f6360a0666df133ad5afb23e96c99637822623d1f9b3d735d274e2d922ad66978c337e438646f4435d5983666c65ace3c5792e02c8277f2a65ef9b9a64c813c0411d3cb2943e7cb8cadc6cc1ba00528da932c99d0e2536ae12a6f53ec97ab94057ff711b3bdf503daf162080edcb19a80ee02bd5b74d51962f521c2afcc2d465c59b60ee4e297e0e074edc7acabd6263e881a84eee50c3f4b50f94457cb4959747f59cb785f7e8161951538124d1b03bd7d14f5745a41fddde2870fa1c88d8d9790493a3417e96eaf0c0d58beac9a471cb482017a6178b2ae68b75174bcb3f7d4067539c3dac78d7267d1ae093217d413b1b5db59df5f67316bb558822b399c25c9b352572fc1c714ae89ae9130b9ed0eaef337eb4b1683e8b9858c1fbb1c60558cdbbd73c359bb7d86ef298867f2ba04d19a43602e07dd83735d69119ba19978efe6507a52297f983c2a74f84690878cae97e7f1aa07dff219b21526cb75e623355b35f47d323a6ee230e156b750a0fade379902205288a1c82498ccd7ead8c51c71e9e1b47734935fde8e242db66e39e200d60b1b8fdbb3d4857cfc1438c8171fb09f3821f0cf30edb4e230e33ff9c56099bf5c517de089eb16f82de8cfb845d59d313e78b4e56271daa89f2120babc3671dbebc0be87df2c3c5f7406ff6628396d9944dd30026276e569005db0b139c8b326f6beeb1421c790153e519a2ae41534b78105ad205c381d768231c8523db553482d9d1e6258d8d042bb24f0eb83eb9da7bc7605d105407f9f224994c3c06b881399940bbed29a61b8df5ee795bc9e4ab42fe9199aef21197aec27ce2a9532107487e790581e8148c10c4459fe92ea1b4a2c493c2b562deb7849fa532f9e0025e8a84b144f6dddb75d95ec8054ec7d3ae152ff88bde56b0147d327397b0925a5d15acd66943e86643ca6fa8c2492871f5733413a803c610f0511c1dd97edd7c87302519b6a4db71dd16ed317cd6c1143691de109c692bde114428e29570f941a9aa267f2f8dfe5a2bfc16c49f1b01f2d04efcaf381bdb8dc2b0b0220e3408e496638d86e14d3a66b48490c8885e719986f6cf89862267c9c2d02c6b5c91e62baa12a390c5bbc6a16be52b4c95337ab9f2f6135f8855fca3cc30f76766a8aa2a886b214927e9c4eb02da11d4268507a380b80f6393291530e59e9d0fa46adf8aedd3201b946fee814dfad099e5dfb6dce4119436a29a0a660d05ab3484bd0df2cf1b474bc949bbc9e7b3a28f9270a625c9cead3fff329eaee6ef97ccc517e64b40c69c999b421f5317961d12dcc4b508761938dddaf4c7193fed4087d0f3cddba63d955a466af41711bffd4f52ade7fafd32ee14c92ae17f574fe99b6e1b3f8d377edcc3fa3f60a3d42707b63befe4795927b102fd03d97d8f543ccde13ba9012e93a338fda4420e3a0d7e244c0b5e727188ff59d0d419c6830f42f9a21cb7494145ebb190f0feb9268797e2870b14194c45c8a764c687d60ca10fabd4bf19b461aa1407dbd2aa7c9b2d5291970a7d3ed8a9e6a5628f149e40f5fe352c97edfbb431bf2b047b865569ca750f657476e5a03595ea9cde198697e5d6c171c0810c4597add6639bf5d4b5db9e73ac1f833264506ebf9cc1a29e1236682706a86c3440dbf183358df61ea37e6c055c68301b73f534dcf511e1e3767e515c0cc5b72814d24dc6971f64acb33b64ec58d8e1503f6b50294d34273a09cef6e6aa918491e064ea4faa0081b4aa8e0d641d05ecbb82a0a76b09afdfa5a6763cb98013b9c180d99fee00b5801380d58fa0c571f353f8cb15bfbb1fff78630c12dd9d9fe3bcaf200bddebff47b79b52ba5a156d2c03a200c82a0d174f3032343084c1ae020e9436840a6acd25ccf9955eb84b9d43e77d4e05f413cb47e17b862b26bda25c9c1f7a174842184228343bb4647b2bbc8bf496a9bec7695e260e156c9c60b67624b7104e1369e0bbdf0a0855fe5ccf3846a93c670099366b212ba25b7704eec4897d587db40c06daa2eb1f15812a5af00ab37674153e939a99b5b8945831994357a892019230b8ed97d55cc73a671f9b3d143a5bc3f609bb89d281d46659e9d07b1844f87965f0c8eecb7d190a9732a21d550fa0092fd43924b68a1dec059257cc0643154f4dec5027da0c711a531c1b68a631b30166963fee25aea45f96fbe72e4193944df2d1db4474c7ac333e128836b7ff25d78c3e4fa05dbe84892a8c61cfca992c817f624b8eb94b63ecfee204b5108064f32c534e2b04987b2e36f10c0ac294df9ae85f9f7197d359ac461e5507314fd2d2db404ef01df8182b19504d5532b9e91dc309c807fbc73dfbf7b2519e2cd38eb8aebc2f68600dc2391ff8ae26391338198e30f2bb66aea98e1b9bbf49958954dcb837c4961aca373c570a629a18dd12bc0bc762be9f92bbb405ab42f037c377117923f2f5290122875edc774dc956ccbb97b471b6d526df6d17020e709e6c94b5355f43e256f5583d8dd119dc6656ee0067a4d9b8a6e8c46dceb086d6a2e8e34e9289f5d1a02a8f5a63012be5df9b415b6806ac29cc2eed02013d4f66ae12b4cd5b72b3cfc766950e179c9a0cbc41cc971b12b36f6cd61352f4417f10afcfaf4241b2583049a8b2859e4d7b170a85148c7952c8d587cb67273846ec02e7b647e58582725665464453f791298fe10d159ad49ad26aee41123acef5bc5242f0dd1f39dddd8aa52af14bbd055364e24d69ed84a658c0b40e86e2dd7733b6aa393059e6dd1a61bf9d5603767a5fe7e4993b9dbc2ee38b53eb7acaf2fd76ff29be772331411532755164f871b6278e1df31b49492dab34fb9b5d51a960e2b683b5ca874edf05b7ab4cb5f14dc3349fe9b08bc450181aa822a73738cf00ff47b1bc4d080d460289dd0f218a5ac5ebfe030a424158954d623b5623c36a263d683111b42d86bc359e60f9ab73591bc25b1162638d73ef034c48501254129a025cf71a50c412c90066a2bde8987c9edebae70cece67cf06a8dfa45ade4df7977876f85d477249425feb4372804a18869164883c360bebce1d823eab999cb8d1093915ea2f2ba85894379f23c0f0d7515ef4b7a92e64d06358fd1076d5f3bf79de9bd096e4792f04631ed9fbaf9e9ca5aaf69de676c87f2ec234fbe68e9a5844ad72ef67c6dbd57180a9825f92ea5dabc9880bb0afbfb81d270d9af67c600094dddc33ae85b11e7f9815dec44c7c7ba3258c191d3b51a4433e2a29233ae20f1b69079fc8604512a39ae08602d4062cdc50c1dd943df546eb3059759348dba2f6c92f91bc4d26f5bcca6df67eeb2b9f5d246a49ba5fa4e636c0814de7bf3aaf177207c1d78773a836e4e30f295328239ae672b720ea11751423bbe3e410835b3010c79ae026b17445cd7e8620f72c8c0fe2de8d74c37722ddeb4085ea60c5b79dc6e6f1620ed0d16fa4ee21fb75cfbc05e1cc624af8e0dbe838fa050de16b216f46d6fcfd5583245090bdb051c47eadf5fcdaee12f9d1a08476cf6e56cf117af2874f42d8003e7e5a4be03d6adaaa0aeb11b31e69099d7b44d55907dff81e60261a79fb3fd7fcb3f61f5ddf6f47184750053dd67a01034aee5e802ea87607bcf0d8cc3a9d67771e61fdf832181dbb13d2d35ee38c878bf52bbed835f89a66e4523bb2396352eb0423c74dc74f802ad2049805a413d862728b07680482253bf1c97946f30f32d273ae75940ed1a783c46338f2242d6e7ca15d5bf948b3e0ec8fd535da76c1166c1cbe1207552d66c9e62772c7b2ae5a16d9add1f2d2095583d6b59b16e275b1eb224c4e38a2265eaeb97c691ee2c106965247cc4ba13a7fba45d1331f822006eda32f0ad824b88d3b30bd18ded6df0412dd6d68abfad4b581b0297d831e155475251c72af318978c856e1dcc57eb6d8b6d7dc05294258ef2e18a3a41b5c1f1f1543b98b7ef57ced929a0e6d23d70edf56426ce6f2dd902fc2734ef209ac10ae716eb7e20dd0e83598b8694f2724bf3197d0d2114e41328b9a9f6eb4dd26c03904721ac7a912e39a809a5db1344fab4c52f011bdbce04b363c827c7ba68850cbc2c3f9e4a2a0053e17cc073729ebfb2ef58987f6c69cae180eac225d166da476330f06d71ec0a1de0a5d98d74c63226502a088450eb9d287b17c09a07f70733949cf08667a0bdec4807f5ef3e5530f39f31b35e3f19bc7b5e303254c10b7611a9e5d95c7a2c7a181d846182bca6786edfb190384dbb89ca2cb2aa7d6dbe0ac62e30d8b9f8ae7885bbb3a48818d5ce9c68532dfd6e55eaafbd15bbadc1c4be6a7b0bf9d7117ee2ec37c9417b0c6ade900c8e2a7b351c086a68f986eae73841d9a6051efa70d93625d70f069d86bb5c57596a92fdd1510f5059a1085a16a3e3aab44d83893cca77e3c303071bc4e5f5ec760818a4ba9a7b86edee58369e6b5cfef1abe040d085a526d8fff4bb45f674683c91c4a721896c737bcbb68baecdcd815e333b51f4cfe339367a71c77334d1abab0a91ec7575f2cd46276522ac0f19abe832a03405a21e39b9bb245cb7f2a4451e7b6c4d5c7807a310e176030137bdd2fa9f1f412ffa8c65e03118ffb4df6a225cf46e231a4ce06a28a73ffa1f2fb3b376517ce19338ce7dbac0d50d3d25b133fafe3bc746605a84775a256fa63066b278934ef47ee93810ed1cc1b2f8e573cfb1ca200505e198fd3b25d5eba34ed9c4e46209364b215b7880f8283b6ddfc8896f5cefed3f36e7169cb9a7d432c5326a0e96c41181b09c2f28adf331416c83bd41c6147c5f3e1607adc280b7eec2f47a8072119b0d2a63c12ed720cae986d62262299f9fd0f0c1da080b4eb6c833ce9a575eb97367cd803a37c5bf38b5c86a2f5869dc782784cf47a9a2fdd580548fbbf96dc581f2b7d7310b51df6f173bbabb751d038b541f013f17016c080a7afdf83f3487cf40b1d0a13b89f8bd7813a261a690d8ebfe86beb6802f99697d7ad8153c778d408e433e45d549292e037983532b4bd5ad24ec126f23a3f61d06aa36f2e646ea8f597f9c6987f78cef425544b6aca85fe1ea45cffaf69ec51e1fbb3943c4dc6aec830aacaf8b2bae6ca10f4a32d8c1142c1eb572a6b9bbe44de0b5b2977443b580dd14cb73992585b252bd8123e5e6b17c4abd54eba889140a2fb56cea7cd690131c14b6d26d7e9e3811a52c7495f7195ba54f29d48d687e0ed63aaf4e6932eec20af309b464709e652e5ebbcc77fd1f767f6a5c81bfbf141aa6bc46c2d06b3238e2068243825fb75b0e6b3156a6e483aa8be434c86d368ec61602c99de41374c31743a948dd9c591ef4ab28a3434f11acf2e601bd044b9247b47bc5040cabbd4f2fdd2c3e0c5c6df24d8925ff7ecacf93d7257c77b362fe535ea8ccb76f1fd1af6c1807cd25ebe3cb3f19d39633821e60964394c1a34cb4e9f9d0c07bfa64193419c66da823ef9ca0776f1bdc501e528316759490b3f88a60fcbe15f6997064d87238072d0b1bc5e51f26fb1fd5292908ea39bf884da24e44991f008e90bc9291309afd49e8a3ef87ca97fda9cdbd1b1050518d135bbd8fe8f564a5f4b0d6f6acf224e9e0335cb26cdf1fd2fda606f3864b9da91e1c2d287f7d7e7e896e7f66605c98ca6240e60c14b2fe3265b37530d607e40be8840f37db11a8a7e088deae1bf5f616ed37485104da61e61fca1c0337af023dc79ba813d606ed683d9b3bbbae21ec0f13bbdc11bebede4d2d3c894894815cae11ae8369228eda6a59e8e12471dc2bbc3d9be7ed38351c7267c4ef549daf698f94a9615ef8bf48f8c6e44330afa842315205006c9a196ee91fca577ee05e6bf3c66886dcb6e8981b46c4f1644107c21f68fb29b81cc870d1677cc5820fea06b7c2392643ab1eba25ee6aea35378f0acf122fa94b450c71e961ddd802c5d91059ac93bf875a24fb724e9482c512a00fc3b64c1d97bb2f81b2cc5f4a788bd620deba10fb2a3e12da4fbf4061092716821e4e45497bc611f881a189e53acdf733347e8709a0a694cdc0fe12be82a651f107f18172d345b8d94c013db63afc2abd46ae7640a510fb709f9160e25d48ae24e284635ad175e889ce27a320aebb33cce664e766381e5136e01424a808ec51a0e40552d9edfa9e4eea45c1545e9e0115cc40e0dc9096d5839969eac249ff251542614e4961d4503081f5d2ecd533be5fa865e7d407d3e29f46f04400c4e7fca52ebd62f4c2698f4e3feb4ed7ab22f5f6af34581ab74b5860565c9b4c7afafcd54320339464b0f7d5f24a75dd8c268e2ce3c0319ca1f9ee8af62741b7a2c3a2be1e2b4078057ad99674fb36f2d24145aff718d5afc77e48959fc7ff46fdaa4480b68e7dcf111c272bc1dddc4709cd5d9262ecab0e63d32c51602d3dbdc99e490d977b037bf5c2aeed9e4631a533ba184d6c8d489c1191ed03c8eb22b00668b1b2ca247b41a69df0adcefca17203d2ebad188055cddd9dfc747d7789dc08e78cdcfe25e8989a7dd2e0c6ed453c1c7fb1d1dfdfe80f5001235db5eadbd8fef4d66b3c321e6911efcdeeeb63c3deafa509cf74fba78c8d9c5d1953c46ce77d718ba5bb8faf1bb06c2bca54c1f4939ca715d94a21994b4199a794d067bb1ee762c2b2f229bb9842a7241caaaca080f16ad32926acfd9f61c8033f83b06da4196cacf13e180d95f20c8e16253c4626bee4d5d34d69218f0709465f3f70a35a827ab3e7c0ff2bae257fe12806445d15cfa5ee8a69c7e435e514f8982f08a66e3870d80ef409d8aa0d872f9f3096c5af8c2675e855400c39f1c2c6e93dc013df2976dc3238dd6455c4eb0470e2d05ff540eda8753c829f3cbf4b0d904c1f258ba869fd63e47fb3c4850c56fceaacb278541a5346d8e24ca18255ab50cd039b939e564bb34f2d3c106fb8056fa23d5f1444249605763e4c83282d63a70e0d5f1c6b1eac5ce118a35298eb1e93a009edfc67231c241022f84634e8d9d661c9b47d863b01e086bf79c86f34ae59d510a12dc273858ecfac514ddc8a71a874c2d0e4c547e1ed47075e3a7d1ee3cfc862673c18265366e10ee89d1808592f003bc57e470382b9e06db99f40a8177aaba31d317e5e9f8989bbdf1591de44e7099c9226bc79b1fb7d0b7c2baa84aceab6d874873bd7a48a277d2e15fc13ab91f34a55eb42a53e14166d3afbdac56385761d762426c151933ef0e938fc8b37a395c41756eaeb9b410e7465f469faa03d9028f5221e16ff0c93d6b869966dac36429336b9c24c106de1aebd197705b0b8b07c7ae69f21e58e97a8909a01a34c2eb7fbaa109aece70ba53a880c6384c0314879b066ef7dac8957178c1b9c07ac85508b001c612fba641772204422b6fa8b0b01888ab4a0ca6fd8958c737fa3b38c6e8cbcaa97201e8ea47035a24c3f4af6d10e37259181dcbfcdc7c468dcf3af70918656f0e1a14740cb011104557f81937027f3a69f4350c9e21f9f3cf510269638a3cf2d4978b000018c496a966bbb7420c6ccf055d1b151c1ad2f973b741e68d41e3df3dbd9c3bbbe78591272715c1ab6357716724c88a0b397c9a756b0b67a6e62a60746cc9c2d29f801cc1e702e0f1c5051322855006bcfa5270daac8ae91ea08d276262ec5f3aebba333d4f6af0c340c4b075251ab9b8d8642045dbc066c77eb67f1ac1a219051c768af4b80728305911c30364435d03d2ad21dc09083b03f0b0ddecbeaa910f9ed528eac1a017944161ef2304f16a1608947bc59fca767f172dbdffc46c33530ce45d69bc71412a44dcb64369878d1f13e4d012cf40722e77eab38ee677134cc84740fbe146d14023e6a0e54b0bc32125c2cb926f2e9e8aa0fe1e314d64c1de5732b2d9174442658f938e3917659336174c6fc110a20f4d367debecf2bfa748b93b1ad55519b7e6ce5b5d56ffac47a56359e2fb846143ae471085edd00acc84e8c52abed40ca1f6be712a31482981eed04ccce18dc3740f59309c20e21985d6d7e3a86a78ec9ebf28f0c5b4c6e3fd7dc83b3d1e75ba9f33538e9d550809ddef68775d4f47d0bc2d4b4ca8dc65c57f929918644d721675ec03e6b7b1da5c232062ccc3a5bcaf0cc751140e8bf3d331ec0a6820aa0c50f84a56848062217e8f999e0fa75a669232da79b79a2e1ade1d6fb0caba45db06046940ef5491b803c57c5bc9400f039c10800a3b3e97eae7f03d0622527046a26b9a61e5d11188da8e6b11d49e3f60b8b02aaeddc492bed34eb2efb09b2ab759699768fd604cbd2c1dc8ed549e6ce8220761691916eeb3d08c806499e8406b96175ee3dd0f0c978abf3071563f57767207fc532caf1866cb666064f085cc07b8c8d6c8568ecb7f7baff2ca56ceaca00942a6f581b73779f97d6ed6cc01f8d4fdd276cac9c726741eb86d685ab6ccf554a13edf550fe0c90f8898921c1a1ff394f1f2cf7f070a3bdec73b26c177e5834ef3902e4c82fff0fb1f46326c3fba9a0b3a0bed81237df7740db90dac4a602881fff19d7ab535d80d13d36a6c0b8c25af7846b809ff6a3c8bee09ac41785221afeda937b9129167d25b93f7ae3b365e09b279ef0b1831d274e06499519ecdb1820da3824218997b3605da90dbd3849bbdf8d16abc0f6356a6448b1d15bb893b09ca4b2ac35333b0e6d7608b067618738632f58ae94a160a92cb90451fb8a423fa44a6bc67189d082b8b056bb9831083980c48be1cc1450ef592a9b76f46cba79b6c78dfba13cb747d053a274dd727be5620ede7a5199a80384a39421af4785d521c765edd2e540b76dcf6ae98500bdd947e7af462a040c93cbcc33d237eef6b925697e1da4b74e5daa7ee147f37b74c2dcb85cca13ac48abd8b3627709c638cc3a9521c0b19262c5fe540da366c29c656248ca3b0f7e37a54ebd86357ad410336f5995885d2363e87ca899d99de47a25d88e9a1db9ff523e3c258354758009147983d67f7d63e2130f3733cf161f31a3038858c72b4d0d727c84d7238775d19933ac1ad1632220482074b7176ed1283d2d9f91cee31115372474e8b3400f87a83312168f1a49744edfcf0b2c55f4a2f62879ada39f5b3438ac8c717471200abe97d4e157ce412df81de7b1bf752614f9f9695102b05e59d97181c1521f9c0af396276348e99b798ff40b5c69780d009a3ceacd31c2d7d7d2f3b85c02530f3dfa19ccf390f2fa388d04b6344f6138deb0ab097391b157566268b279629ef44970497fcb37fdb01e77e104676533114c889e41fd5ed4a29749a9293e90bd0445d6c286274f5201748f20d79bd7c5259d1f24b40022a6284f5470e9d6bc378271acb460538f5921434b12acb7911f506d1ed839ed2caee8940094c016166e5ba26642a2a7a7477510db39c9f997b3ab754daae83ab923d3d59f46bd3b982cd46a453e98e8248d091ab37a57b670066e4390fb3cd55fb0781bde18af7ca0d41b5831a320927a80d0f46f6881e938f18670702a88397842ade05b08b492055b22dcb8e7efcf18218d9dd4042c1924d869d0664d2d58baee865db6a912d7826a41d80a40a6698ba5b28bd3f5c275d6841c4a165da61d2f13a66341665b947987b3c354e8f05aa26836eaec4de5f48a6279b21bf3ca228379e48e500a54e1125ad0a7c6b853c28c60a5f5a6f0f864685d737a2cf221570cb702ab730b38b246aa9c4ed315c707f9549233e8b5e3bb960b217d5cfcf394c4f4429856340dc90f1a57195fc62f2add5360180fcc8d468c511eed1ff7a05b23349ab491068bec5c7c15ff07117673fdcb3588960d20a742247b7fe7742c089e2e2b54c15166d259493b6b37c19342288e81131882c9342fab263d966acc16162201e4698214e8c75408e5e22a3fe743c99e3141625577e852ca4b9921169ae370b437b14a0ebc197d4c3e957d397d34fdec09fb08e4faf0cd7df3d44087889b20b24cf0b8a6f98525c6c5596dcb214aa69b66cd33b6dfb17aa39047db5e067c062bc747372620651f862c03cf3975e5c6440765598d9b8464a281b7c8b6a13c5c7b29316277c93dc80b8b52b6743767a48901d67bcc8f9c2cff2d8986b55963e1bd11d5d77966a5977a69b23e32b69f93c4c5b41c00875b00370f461ca6043e4238daa792616a437517f27c2bdffc040120ee5dcfe2bf471965539a6ef32c1313ec787f41d9f4bb14263910fc6ed5413d52e28772b74c76ddabac96e9b2311b7a66142ebf854e4c47afe5bc0610c6b3f647ffd584c533518f69fbbae56092b44e9f7b4acc0e0968012409d258f4aaa2b2c7c10aadae5dbbac7c9616fc85ef0095ff07374eaa479fdfdc340ab536586646c86a7b6fe1b3745fbc62ba7f35005c2082653d8f88082bb6bedd49aa2ffc4349437e3c76488017d1cb04bc2cc82c7a5fe982322fbd8484366baa062b7a7c29f04157f4d86d4bed9d0185d43949a9213131f3588f4607f155435e612def7a286f6ff330130f2aca3653714eaeaafac45433e8223bd456a541fbdeb6a153c1c2ebc700d33068f2834fe66238415ccdd1575e595b97200486a01af19542300390e360eba6f8d327a6231cba00600ee919180c44bb33eb50aa56a2ec3e55ad12bbd237c30bb57d975521285870ce7b4e4d0c300cdb3f86512deb66ca25c2cc0e67e870eadddca7e90cc8253182d7de54a10dc5004e18a73e0407c1dd4db2dadf8272a49ecd7d468c0419e16d2149cac7ab52a75845476b1f384a306da098b447882e2840a16f6e8a785617f432bc37b1d07812b83a45e96281fa3013b225eee151af00d3be1dae1757b8374a3fb85db46e8578279bd7fa1e17ba444f7bd8dbb612910472aeef9913f442ad506f35c3ee15272c15680cfd6fb26a88e9305dca6ee487150b45135d50c820d14d86632cfab587e1b617761fa81dfc5735e5a0ab372e487614aaf58464decfdc43332b99e73784c113102414acf82c981a312fa1c9141448281100bc61cb41c084af4aff13b6fb0844de95fef33af535c555da39ad6ccb9a5eb40b1e2bcdfaa20d9c1701d5a841a63e6f35949ce801f4ae8a16c7a0d5ca9383f7008435e905abff22d4dcc4e23ca9e02d9759d33874cd3e0e0c3d571a4b24c55f330776e64ee1f3c17150283f377133e26ea88855e0a6e22a09e790a698ba9d55b619df3a61b818b3195ff61610aaa55828be612b7b5538039f9f55a7690a7008bb17f359ea8014aaee6859e4d437d6114e9d709ed7efd5ec405eac55aa101647f3e72cc2150260ad180f768cb40c7de0ab90a99da2afb51f2e7f33f74da56c70e5e58fbc2bf54e2c40580969c8740e317626e167e0ae8f6ab69a26ef6f5560b048228fd60135ae13db0fe5136ed5b8d19b32bab946a147f4c53e3193114630b2202bea54cd345e8f0c8d36635ab6563ed144d3ce5892b8510db8cf72245596a9c53a151c1e9d9a0377984b22a7a86575c20d074759197080a8c54109de08137b144b741d4d65b05f029b69dd83901a1adb937c7f58970f972854d97fd3ae997d6c95bb780b1fe5cb46cecb4944a6f07263dbb4e9a70996bd5d316d501b2d368b5aca2e100a32032f29bf1e6729a82196d7b344164fd667519276fee57155c75991554824fa2188ca68d70999f25fd48e6d7aeb3d4322d86dd5b3108dd43bb25df24e7e80334cfd78d8330bde3d3eb1ef8056fcb5400038a726add9c36aca255388a9fe5165d31a8896fce7829662391a13f833eacaa834d109930ceac45d6787becfb58d8f4f3e44437eff06fd63a30a9fa36a7bdb7716de8ede6b5c45844c5f784326001109a7a37fd3ad7abb42d1655b4aa22b65b32663592b33a915b1432a8b2d28082ea9a61f0c6f607de05861d87f13bd28703de9baf65cbad7b9f9a47697da33ffc04689c91006d4eb45b5678a141302dfe1c9ae61df75bc1916a8d39fbc97034c972f97c28bd321491e8b1b9f45155cb333247dee3ef532ed2f5d648a6e81b5514fe0960e3e9008f35186919da843c90e3be0e8eab07c7006c5c3edf0f4214e69bd570ef5862891e0034f80025327e14607782c8b109122b3a56b92d9bbfbb82fe89df080c95f70759387334f6888466047800a59d8af9fbb60c9a58b4edacc3b65c2c6d338d863d680eb53a2f2c8a5ad5898e551e0711edc5d3434d52f8ad1fddb79649296cd50ffd234130347005cb9e82567510af9ba6ac37968e8bd0765d6a7eeb5b4e6077953889a56a3bd3ee4005162dda044467bb72e73d460774b46ead40beac29a55e4f464f55c3820dd9641bdf2515edb7050f0d9ac679664574dbb4144b0f9009d184fc1f9deaa3a43b2593d5c386635daff2006a2050b93bfccd4ec97b29884040a596ab43b5bd9931447d401bdd1162d5a3ed3a91c87cbcc108bc5bcc6ca2fc7f9993a3b534954c8c52f39b4cfe30d5d373cdcf33b8a700346b653509b4db587812abf653abf80d625dc478760d0db97c2e1fac29d6d0f7ef773282abc472557283fdcc718596f1d5ad27176f95a15699ffb98e67f7e9109344ac2078bcc55a24257eb76c7a7038793bf2f13ffbeb8d0be3a6a28e4e30d6eebc08f09e1d310215c936790a31e3be8174af820674c7b4ac0a7c0788af34588faeb200fbc992b3405f4813e641881354347321c87931200e5d0ad2284450bba2fecc3ac84972b420310d37358f36b1a521ac278ab30fdc73ba44b6b37fda87eecdd38586ab626f3394608b3a6880761443347aebea7ccb3316c5255e9fb3a20bc41c2280ab3c98241331a070773f43a05f9a9b465dd95c72012d6b0851b639d054411add19773835ae76f9f685395e678a7440f363463c39f358d007ecb568cfb3c28e1e99f093ded511a610f197b9192920a6909dbe73ebb7c12880d76594a966aed13d1f1c2a653299b33ed25515a1d998bb16a3b28248487270bee320e591ecc45253238438086e5f1addd5f50ec7a36393a6f3307f8ef60b1f7322ca7cba9a41048ea9bbf59357ebd5c2aa7ef50f637e34698ab26480c1a08accddb507c28659e0121bb5304666907b9bc630d9485959c3f7146802890be212ffafdce191b7c7ef4b9024fdb4e94cf667557b4be1b65b500baa306714a047e5496c92ecdf06e3a0eec9f96cf06b9ef793a88b585df78ade33c38e7265d4e314853544a6e406ed1787badeefec29ad20701d46304ecdd46854c22946cf88ec645f64c2d371e2d150f6d333d899bac9a61785378a31388256e56ac20670c08cf1046e37a0dfd3e0488294c29162ec735e7254e0dad9bce1db0fd0eea00edc92611b7c2381e217340b9be8721bfbe69ea2935e466629c15ec2ceab48f2ed97c02fe614b1c6027003bad349b7a6aa95de0031f7c2df07c46a90417af46f81c578599414fbca5eea5c10d1efb3e7c3d907cd96848e64133955e079571cec5bc1beef40da370645f65d4242fb92d4a07dcc19615d47e40d0fa3980bd43a77a32890f472688aab1e0a30d5fc7ea2de5934e5c81aeca46523b5a32988692a85b744694524e0fda23ad8fe301f1650365c6eb5f96b38eb43fd3ac4d9e5cf1e80bdd77feb26719d04e70533c4d46bea789ddefc8e2955d9d47695d7e91c00308b0c1cb8438d06f8ec04ebe93b51d58f3b83e11dd718863c95ca5eaadd18ea5611fd371b36562f3f8c4b6c07be32360655370defc5b570de54dbff35e43f48cc12ab3e8c5febc662efda4d73dea760a90e9a0fb2bf4ff6c45861c064d97fda0d7313a46fb1afb544045528a2e65992d2dd4fb86ffc0857ba79d64e77db09bf05449d48b274022bd3a600817f616cffaaed46a402c57290a46b2501d6d7e1a29891d6fa9b53fa8bbfdc1f3595d743134a508603993da62f1d242383504d48f6a2d3eb9bf4b7143c4f486e138198d45b7a0a84d9f41d5dd24a516840124e705bd17cc220e22cbe934cf7590076bf68b89521f1e515c4dd20c0836da1cf37f2c5fe98b52cd5970d00be7a992376d0771a1a2db2bcb96101c1f9420ecd2e1d9a73ef84ea494bd66fc9498826ca1dbd191ec4456a4d7d1b4fb095846d897f2336bfaa51618719a5b949bccd6c09941a57232182e14b111405b8c75a03578015cf4d94e51057a7a493b5faadfa29181adcbecb9b0bd0f47ffbe5cdefa7055d0a98c6940ff25a41726a7abb82d451775ea03051f28a086cd96ac0055324af6cf6c8b0d6b16f489e8cf39976ec3bab900da032c1ee98486baee31e04a9dc44943b8cfadc583c83e7c2b73fc2db17c209f45e497dbf51e0a1fd9e448054329ae643716828770aa7a4268b34e0e9904e7e9a813ce836b2ae6706944d858a4e4e4fb7d3fb0c4e74ffc27f874f60878967ca34d2ab8a5eec81cbd944e380e2546b3b2d7b0c25af8e6f8b9003286cf2f6ffa8deea8e097eeb3930f18939f1966a0ea7bbc35982f7c37200f9a5a62d432b995407274c9e487086b55fb33bd9d612037e39ba60862d93d6c85d37a779b074f779b598013adf4af044b535fbba563b511b77be5136e3a97175918a63d8d19d3c86be15f9530ee679f512cb4487c0504699228b94a5b2d41c71a322e991bb1ef2dbbc3965beb2e4cba690f915662646c6631339aebaa1614573192bf591a8e88d62c45e7231d392eda4e9109d34bb6fa3f8a3642aff624c28530df7771d0759c53934ae67c94b2bb79e6e847c7ec735725dc32c334f62a26f38f44e34b5c5886ee17242e68d8356c64844e40e55f0b5fb75117c99dfedec604003959f58c1f15fb58f5ecab8c07c22777b46aace7d8048e652a5b7b539a20dc8bc09eb1af56e1fd938e735e2ba7c60baa9c0c6ceeab556200ff3f51d2ba2d28730cc056f625cc85bc18436630d350a5bac8687da414de0a66b2a57a3db712da2fa82aef0e5bb8a0057922308e70ed2cae6ebc7321926a04b028b81c35526a2a86782f38eef5ec50716f29271af4da3bb268b763f82a43c01ebe6af67e6c62dd8b47284301958cd9f3c2e8759c941ba122a333d5c7ee31f5b89106cb9a47551a0b02679bd56c87d0693c40b765dc42aab78389ea889475ab43ba0f3cd4d9755b4f72e6fd56b31d905e6c810e3c3ef28b773d4d46c40f568e369cbd097cb79dbd09dec88c892fc9e2157dddfbb8b38237704bae44203761b97bf2ad58aee1fc9c251127c31a923fd613374ef2bcc8c3c07495155a999b36fafa5e644592615a32b9186cb98bf28e9cf0c2bfbcbaff291507ad1944126d09e8af7182516cbc572df570256537696f1ca411054ae46f6a9921339e7f2cfe1939522ae986db3ed705d3784bb24fa71619df0894c8af96ad1d865ea916a9f13a6c1fc4250e000ba26ea067e110db992e5f6813b68f0077eb1bd6f298aac6cb52cf830e9e4bae0849d520900d00c1429bcd3309576c5981781064986f32bd11482006097322cc5204391cdd70ade31c36c473cfc326af2923f7d664b238bc5214da454d321a758779096de0d64da18f9acd1ed3a8408c0084afb7a5e1c068e1c245c3c64b31de29b1ea8a537ef536c9636e8780a2d67b8beb77762e79599faff7d741224ca3fa1031c6a8462c6fd5a9707d3744e023e12ab0ff1eca5288977ae3b2ea4afdb3173d247d91eb861fb11b9501497cda7149331d28f433b12ce4deac360215a455188b4ec90168d0938173191a527cea3f056580645b8f0cbbfb6c3e9883aa2539458c5f9e5c6475791628438444a4ddce9b1e2cca24e4296f9593763170506fcfca251a5d9a10dcb2a628008e9f98545b3c273848cbc63dcaa0948c6680c36d5ababd93168a9880d5ca0741cc7911051775b41834a7195e293453d77f22bd3136f31aa5bdee1152c305020ba3f6d57bd7bd28b4c584aab8c9590db97feb0f0cda76602ba21c3d1dc94b55976288b5b985c7f4fab6339f69a5f9049ace364f073cfb1ae2b1dad7008e90403a1a00e2cb2946414a7b2ae7fc7f55308efa389ba227bad2866d5096d11d6e82a27679635e7aa9ff450a68eb1c6071bf07c9e481e2b44ff9451041382d6dc118258ccfbd884547688632610a62275ed8c8ffe666b6c5481d0a28a45d25e3e1d946b077a79256da6f91e1c8a0f5b8d10a050bfe34c064bd8cb1840d16d5e521df45ae2e6e4ca5e0c8c1a65d4a7d3334c671194a20ebc90568037bfb0f8ca03c3192c2d30a1a6be270cae3c9b9734c578cfb1f58d7643a093d35fb6c14d16106a90c8874efe6ad20ff07e8ebdeeb9db5b8ce2759a53c8d27aa5995ff85cd17b4e13edcdcf710418b32c9c98bfe146ee887d2db5dfe4fc898ea920396c0af19aff122aa25a003b1b0dd2083c5662ca044837d02e1d9bf47b63e8fa07d2ef4f9a7860d09d4f87c3800b4ed71c61fe81a6c587251d2ce81320018d86a1d9101ba7a97a53bb5ca37d1fa256a0d1ee614b3d3a43767c54c76252e90dea0c82bb6f5409e77a36d7f4c945d39dc81b172cad6ea3bcea89c6ff15ed2fa0ffd56eeff310bb8d91634986263b159419097e274832ba0b2154193374d96bf0f30927425fb24a1ff6a2a1e0064e511193bbb9823a3e64fb0f04bffd695712b66395d2d58686a75d19b9e59f31a50c3bbad8d13a414d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随机数 </tag>
            
            <tag> 概率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>荷兰国旗问题有几种解法？</title>
      <link href="/2023/01/11/DutchNationalFlagProblem/"/>
      <url>/2023/01/11/DutchNationalFlagProblem/</url>
      
        <content type="html"><![CDATA[<!-- toc --><p>今天我们来聊聊荷兰国旗问题。</p><h1 id="1-问题引入"><a href="#1-问题引入" class="headerlink" title="1. 问题引入"></a>1. 问题引入</h1><p>荷兰国旗问题是荷兰计算机科学家Dijkstra提出的一个排序问题。问题是这样的，荷兰国旗由红，白，蓝三种颜色组成，现在给出一些小球，它们的颜色只有红，白，蓝，现在需要设计一个算法对这些小球排序，使得小球按照红，白，蓝排列。</p><img src="https://picx.zhimg.com/80a6cdaf01ec978971ba777488b7ca4c_1440w.jpg?source=172ae18b"/><p>我们可以对原问题进行抽象，用0代表红色，1代表白色，2代表蓝色，那么原问题本质上就是对一个只含有0，1，2三种元素的数组进行从小到大排序的问题。leetcode上第75题<a href="https://leetcode.cn/problems/sort-colors/">颜色分类</a>，本质上也是一个荷兰国旗问题。</p><h1 id="2-排序"><a href="#2-排序" class="headerlink" title="2. 排序"></a>2. 排序</h1><p>既然是排序问题，那么我们直接对数组排序即可，这个方法简单暴力，因为只有3种数，最好使用计数排序。具体计数排序的代码我就不赘述了。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorSortUsingSort</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; nums.length; ++i) ++cnt[nums[i]];</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) </span><br><span class="line">            <span class="keyword">while</span>(cnt[i]-- &gt; <span class="number">0</span>) nums[j++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-单个指针调整"><a href="#3-单个指针调整" class="headerlink" title="3. 单个指针调整"></a>3. 单个指针调整</h1><p>这个思路是这样的，我们遍历数组一次，把所有的0调整到数组左端；然后再遍历一次，把所有的1，放在0的右边，这样剩下的2必然在1的右边。具体做法就是，使用一个指针p，代表最后一个0出现的位置，p初始化为-1，表示现在还没有找到一个0，然后开始遍历数组，当我们遇到0的时候，此时p的下一个位置一定不是0（因为p表示最后一个0出现的位置），此时这个0要放在p的下一个位置，于是把个0和p的下一个位置交换，因为此时发现了一个0，于是p指针++，当我们遍历完数组，所有的0都被整理到数组左端了。整理1也是同样的方法，只不过p初始化应该是最后一个0出现的位置，而不是-1，如下图所示：</p><img src="1.svg"/><p>根据这个逻辑，可以写出如下的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorSortUsingSinglePointer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> -<span class="number">1</span>, i = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调整0的位置</span></span><br><span class="line">        <span class="keyword">for</span>(; i &lt; nums.length; ++i) </span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">0</span>) swap(nums, ++p, i);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调整1的位置</span></span><br><span class="line">        <span class="keyword">for</span>(i = p + <span class="number">1</span>; i &lt; nums.length; ++i) </span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">1</span>) swap(nums, ++p, i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i != j &amp;&amp; a[i] != a[j]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-双指针调整"><a href="#4-双指针调整" class="headerlink" title="4. 双指针调整"></a>4. 双指针调整</h1><h2 id="4-1-调整0和2"><a href="#4-1-调整0和2" class="headerlink" title="4.1. 调整0和2"></a>4.1. 调整0和2</h2><p>只要想办法把0调整到数组的左端，2调整到数组的右端，剩下的1自然会跑到它该去的地方。我们使用指针p表示最后一个0出现的位置，指针q表示第一个2出现的位置。一开始，p初始化为-1，q初始化为数组长度，然后开始遍历数组（注意此时停止条件是当前位置没有达到q）；</p><p>如果当前位置的数是0，那么此时我们发现了一个0，根据单指针调整的思路，它应该和p的下一个位置的数交换，同时p++，因为交换过来的数是p的下一个位置，根据p和q的定义，以及循环停止条件可以知道，p的下一个位置的数一定是1，因此i++，</p><p>如果当前位置的数是2，那么此时我们发现一个1，根据q的定义，我们应该把这个2放到q的前一个位置，因为q始终指向第一个2出现的位置，于是我们把当前的数2和q的前一个位置的数交换，由于发现了一个2，于是q–-；因为q前面的数还是没有遍历过的元素，所以交换过来的数还需要再次判断，此时i不能++</p><p>如果当前位置的数是1，那么无需处理，跳过，i++，整个过程如下图所示：</p><img src="2.svg"/><p>根据这个逻辑，可以写出如下的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorSortUsingDoublePointer1</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> -<span class="number">1</span>, q = nums.length, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; q) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">0</span>) swap(nums, ++p, i++);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == <span class="number">2</span>) swap(nums, --q, i);</span><br><span class="line">            <span class="keyword">else</span> ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i != j &amp;&amp; a[i] != a[j]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-调整0和1"><a href="#4-2-调整0和1" class="headerlink" title="4.2. 调整0和1"></a>4.2. 调整0和1</h2><p>这个方法是把所有的0搬到数组的左端，把所有的1搬到最后一个0的右边，这样2就在数组的最右边。我们使用指针p表示最后一个0出现的位置，使用指针q表示最后一个1出现的位置，一开始p和q都初始化为-1，我们从左到右遍历数组，</p><p>如果当前元素是0，此时需要看一下p是否等于q，如果p&#x3D;&#x3D;q那么说明此时我们没有发现一个1，那么只需要让这个0和p的下一个位置交换，然后p++，q++，i++；如果p!&#x3D;q，说明我们曾经发现过1，因为当前的这个0要放在指针p的下一个位置，所以我们需要先为这个0腾位置，所以我们可以先让当前的0和指针q的下一个位置交换，然后再和指针p的下一个位置交换，然后p++，q++，i++；</p><p>如果当前元素是1，那么它需要和指针q的下一个位置交换，然后q++，i++；</p><p>如果当前元素是2，不用处理，跳过；整个过程如下图所示：</p><img src="3.svg"/><p>根据这个逻辑，可以写出如下的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorSortUsingDoublePointer2</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> -<span class="number">1</span>, q = -<span class="number">1</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">0</span>) &#123;<span class="comment">// 遇到0</span></span><br><span class="line">                <span class="keyword">if</span>(p == q) swap(nums, q = ++p, i); <span class="comment">//p == q</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    swap(nums, ++q, i);</span><br><span class="line">                    swap(nums, q, ++p);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == <span class="number">1</span>) swap(nums, ++q, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i != j &amp;&amp; a[i] != a[j]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法比上面的方法好一些，是因为当数据是一个一个给我们的时候，我们事先不知道数据有几个，这个方法可以做到实时调整。</p><h1 id="5-赋值"><a href="#5-赋值" class="headerlink" title="5. 赋值"></a>5. 赋值</h1><p>这个方法的思路来自于上面双指针种的第二种方法。假设现在我们遍历到了i位置，最后一个0在p位置，最后一个1在q位置，</p><p>如果i位置的数是2，那么此时我们不用管，直接遍历下一个；</p><p>如果i位置的数是1，那么此时需要把这个1放到q的下一个位置，然后q++，那么1区域部分会增长1个元素的单位，因为q作为最后一个1的位置，那么q的下一个位置一定是2，因此他会把这个2“挤出去”，那么挤到哪里呢？只能挤到i所在的位置，如下图所示：</p><img src="4.svg"/><p>如果i位置的数是0，那么此时需要把这个0放到p的下一个位置，然后p++，然而p的下一个位置，原来放置的应该是1，那么这个1会被“挤出去”，会被挤到哪里？会被挤到q的下一个位置，但是q的下一个位置原来放置的是2，那么这个2同样也会被“挤出去”，会被挤到i所在的位置，如下图所示：</p><img src="5.svg"/><p>因为这个题目只有0,1,2这三种数，因此我们可以写下如下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorSortUsingAssignment</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> -<span class="number">1</span>, q = -<span class="number">1</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                nums[i] = <span class="number">2</span>;</span><br><span class="line">                nums[++q] = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                nums[i] = <span class="number">2</span>;</span><br><span class="line">                nums[++q] = <span class="number">1</span>;</span><br><span class="line">                nums[++p] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写的再简单一点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorSortUsingAssignment</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> -<span class="number">1</span>, q = -<span class="number">1</span>, i = <span class="number">0</span>, t;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            t = nums[i];</span><br><span class="line">            nums[i] = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(t &lt; <span class="number">2</span>) nums[++q] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(t &lt; <span class="number">1</span>) nums[++p] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 荷兰国旗问题 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学好算法的三种境界，小白成神之路</title>
      <link href="/2022/12/01/StudyAlgorithm/"/>
      <url>/2022/12/01/StudyAlgorithm/</url>
      
        <content type="html"><![CDATA[<!-- toc --><blockquote><p>  本文转载自公众号：<font color="#086798">力扣LeetCode</font>。</p><p>  <a href="https://mp.weixin.qq.com/s/t0tnzgARAZtP_T68e5V4sQ">阅读原文</a></p></blockquote><p>王国维先生在《人间词话》中写道：</p><blockquote><p>  古今之成大事业、大学问者，必经过三种境界：“昨夜西风凋碧树。独上高楼，望尽天涯路。”此第一境也。“衣带渐宽终不悔，为伊消得人憔悴。”此第二境也。“众里寻他千百度，蓦然回首，那人却在，灯火阑珊处。”此第三境也。</p></blockquote><p>算法的学习之道也是如此。</p><h1 id="1-夯实根基"><a href="#1-夯实根基" class="headerlink" title="1. 夯实根基"></a>1. 夯实根基</h1><p>在最初的阶段，算法世界的大门刚刚打开，这个时候迷茫是正常的，解决迷茫的要诀在于少想多做，勇往直前。怀着一颗”千磨万击还坚韧，任尔东西南北风”的恒心，爬上算法的高楼，做到”望尽天涯路”。</p><p>从一个算法萌新入门，第一步便在于打牢根基。推荐阅读书籍：</p><ol><li><p><strong>《算法第 4 版》</strong>- Robert Sedgewick </p></li><li><p><strong>《大话数据结构》</strong>- 程杰</p></li><li><p><strong>《算法图解》</strong>- Aditya Bhargava</p></li><li><p><strong>《算法导论》</strong>- Cormen,T.H.</p></li></ol><p>《算法第 4 版》适合初学者入门、《大话数据结构》和《算法图解》这两本书的特点是有趣、易理解，也非常适合初学者。《算法导论》的特点是全面，它是一本算法的百科全书，着重在于开阔算法视野，适合有一定算法基础后再去学习。</p><p>入门阶段是看一些天赋的，花费时间因人而异，大约在 3～6 月之间，将上述提到的书籍选择其中一本看完基本就能入门了。在这个阶段中，需要了解几类常用的算法：</p><img src="1.jpeg" /><p>其中，暴力枚举、贪心算法容易理解，可以很快上手。数论相关的算法需要用到一些数学技巧，包括位运算、幂函数、求模等等性质。二分算法和深度优先搜索算法相对有些技巧性，好在他们都有固定的模板。另外，不得不提的是，深度优先搜索算法的思想非常重要，而且深度优先搜索是动态规划、分治和回溯的基础，需要重点掌握。</p><p>在此过程中，可以辅以力扣中的简单题目，它们往往都代表了一类经典算法，如：</p><table><thead><tr><th>题目链接</th><th align="left">题目描述</th></tr></thead><tbody><tr><td><a href="https://leetcode-cn.com/problems/climbing-stairs/"><font color="#E78C06">70. 爬楼梯</font></a></td><td align="left"><strong>动态规划</strong> 算法的经典题目，通过此题目可以了解状态、边界条件、状态转移方程等基本概念。</td></tr><tr><td><a href="https://leetcode-cn.com/problems/path-sum/"><font color="#E78C06">112. 路径总和</font></a></td><td align="left"><strong>深度优先算法</strong> 的入门题目，递归实现和迭代实现都不难，可以学习到深度优先算法的层层嵌套搜索、找到答案或到达边界停止的基本解题思路。</td></tr><tr><td><a href="https://leetcode-cn.com/problems/search-insert-position/"><font color="#E78C06">35. 搜索插入位置</font></a></td><td align="left"><strong>二分算法</strong> 的典型题目，使用二分算法的解题模板可以轻松解决，二分算法的算法思想清晰明确，一通百通。</td></tr><tr><td><a href="https://leetcode-cn.com/problems/majority-element/"><font color="#E78C06">169. 求众数</font></a></td><td align="left"><strong>分治算法</strong> 的简单题目，如果我们知道数组左边一半和右边一半的众数，我们就可以用线性时间知道全局的众数是哪个。这道题妙就妙在可以有多种解题方式，让初学者至少可以写出暴力枚举算法 AC 题目，然后再逐步深入，优化算法。</td></tr><tr><td><a href="https://leetcode-cn.com/problems/delete-columns-to-make-sorted/"><font color="#E78C06">944. 删列造序</font></a></td><td align="left">这是一道 <strong>贪心算法</strong> 的简单题目，贪心算法理解简单，上手容易，适合作为初学者掌握的第一个算法。</td></tr></tbody></table><h1 id="2-融会贯通"><a href="#2-融会贯通" class="headerlink" title="2. 融会贯通"></a>2. 融会贯通</h1><p>学习算法理论如同阅读了一本武功秘籍，然而仅仅掌握理论是不够的，接下来就要进入到实际练习阶段。</p><p>实战练习非常重要，不经过实战练习，理论仅仅是纸上谈兵。比如，不经过大量练习，永远不会知道二分算法是多么容易出现死循环。一个边界条件控制不好，程序就会显示无情的”Time Limit Exceeded”。在 20 分钟的调试后，或许仅仅是将 while (left &lt;&#x3D; right) 改为了 while (left &lt; right) 。程序员说到底也是手艺人，这一个字符的改动，正是”台上一分钟，台下十年功”的体现，需要在大量的练习中才能理解两者之间的不同作用。</p><p>再比如，动态规划算法中，递归的函数就像是《盗梦空间》中的”梦中梦”，一层套一层，又渐次展开，很难整体把控。在不断的练习后，才会知道，动态规划算法的重点是抓住动态转移方程，只处理两个状态之间的过渡和边界条件，慢慢”大事化小，小事化了”。</p><img src="1.gif" /><p>这一阶段花费的时间将会很长很长，伴随着不断地摔倒、爬起，你会对每类算法逐渐融会贯通。好在这一阶段是不看天赋只看勤奋的，每次从坑里爬起，都是献给成长的一份力量。</p><p>推荐的进阶书籍有《编程珠玑》，本书探讨了程序设计人员面对一系列的实际问题以及解决问题的措施（解决方案的代码以 C&#x2F;C++ 语言编写）。书中选取了许多具有典型意义的复杂编程和算法问题，并阐述和总结了许多独特精妙的设计原则、思考和解决问题的方法以及实用的程序设计技巧。</p><p>在这个阶段，可以尝试练习力扣上的中等题目，中等题目基本上也只会使用一种算法，加上一些特殊的限制，好比让你在学习了直拳的理论后衍生出左勾拳和右勾拳。推荐练习题目有：</p><table><thead><tr><th>题目链接</th><th>题目描述</th></tr></thead><tbody><tr><td><a href="https://leetcode-cn.com/problems/longest-string-chain/"><font color="#E78C06">1048. 最长字符串链</font></a></td><td>分析题目可知，要求出答案必须遍历所有可能的词链，动态规划算法在其中起备忘录的作用，用于记录已经算过的答案，减少计算次数。</td></tr><tr><td><a href="https://leetcode-cn.com/problems/permutations-ii/"><font color="#E78C06">47. 全排列 II</font></a></td><td>这道题是 <a href="https://leetcode-cn.com/problems/permutations/"><font color="#E78C06">46. 全排列</font></a> （使用深度优先搜索算法）的加强版。有两种方法可解：第一种方法最简单，直接用全排列 I 的答案去重即可；第二种方法是先将数组排序，全排列时遇到重复数字则跳过，这样的剪枝优化可以减少遍历次数，提高算法效率。</td></tr><tr><td><a href="https://leetcode-cn.com/problems/combination-sum-ii/"><font color="#E78C06">40. 组合总和 II</font></a></td><td>深度优先搜索算法衍生出来的 <strong>回溯算法</strong>，同样用到 47 题的剪枝优化思想：相同数字只允许递归第一个。</td></tr><tr><td><a href="https://leetcode-cn.com/problems/gray-code/"><font color="#E78C06">89. 格雷编码</font></a></td><td><strong>动态规划</strong> 算法的实际应用之一。</td></tr><tr><td><a href="https://leetcode-cn.com/problems/word-search/"><font color="#E78C06">79. 单词搜索</font></a></td><td><strong>深度优先搜索</strong> 的中级应用，使用单独数组标记已使用过的元素，这也是 DFS 中较为常见的做法，难点在于将标记数组复原的时机，需要反复练习，熟练掌握。</td></tr></tbody></table><p>当你把每一类算法的中等题目刷起来得心应手时，不妨开始尝试困难题目的练习。困难题目总是融合两种或两种以上算法，或是加深难度的经典算法，如二维甚至三维动态规划。练习困难题目好比同时用上左勾拳和扫堂腿，不仅让思维酣畅淋漓，在每次 AC 之后还会带来无与伦比的成就感。推荐练习题目有：</p><table><thead><tr><th>题目链接</th><th>题目描述</th></tr></thead><tbody><tr><td><a href="https://leetcode-cn.com/problems/24-game/"><font color="#E78C06">679. 24 点游戏</font></a></td><td>只有 4 张牌，且只能执行 4 种操作。即使所有运算符都不进行交换，最多也只有 12∗6∗2∗4∗4∗4 &#x3D; 9216 种可能性，这使得我们可以尝试所有这些可能，如果用深度优先搜索算法则需要费一番功夫。</td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/"><font color="#E78C06">124. 二叉树中的最大路径和</font></a></td><td>首先，考虑实现一个简化的函数：计算每个节点及其子树对路径和的最大贡献。再考虑第二点：最大路径不一定包括根节点。这意味着我们在每一步都检查哪种选择更好：是继续当前路径或者以当前节点作为最高节点计算新的路径。</td></tr><tr><td><a href="https://leetcode-cn.com/problems/split-array-largest-sum/"><font color="#E78C06">410. 分割数组的最大值</font></a></td><td><strong>二分算法</strong> 和 <strong>贪心算法</strong> 的综合练习，仔细分析可知其单调关系：数组和的最大值越小，分组数越大。并且数组和的范围是可以确定的。根据此特性，可以将题目转换为：当子数组的和最大为 maxSum 时，至少需要分多少组，能否在最多 m 组的限制范围内完成分割。在每次分割时，采用贪心策略，尽可能多的放置元素，直到一组放不下，再另起一组。如果满足分割条件，记录当前值，利用二分法，缩小子数组总和。否则扩大子数组总和，直到找到最佳答案。</td></tr></tbody></table><h1 id="3-推陈出新"><a href="#3-推陈出新" class="headerlink" title="3. 推陈出新"></a>3. 推陈出新</h1><p>事实上，大量程序员停留在第二重境界就无法再进一步。当提到某一类算法时，你可以说：”我知道”、”我会用”、”踩过坑”，但能说出”我完全理解其思想”、甚至”我能想办法改进”的人却很少很少。这一步仿佛武学中的攻守之道，当你掌握到这一层，便可不再拘泥于一刀一剑、一招一式，如金书中所说：飞花摘叶皆可伤人、草木竹石均可为剑。</p><p>开创算法的过程是艰难又孤独的。每一个经典算法的诞生都伴随着”一将功成万骨枯”。比如现在我们在很多语言中都可以直接调用 <code>Collection.sort()</code> 实现快速排序，而在快速排序算法出现之前，曾有一段时间仅有冒泡、选择、插入三种排序算法。直到 1959 年，希尔提出”希尔排序”算法，或许现在知道此算法的人已经很少了。但它是首个突破 $O(n^2)$复杂度的排序算法，它的基本算法思想如下：</p><blockquote><p>  选择一个增量序列 t1，t2，…，tk，其中 ti &gt; tj， tk &#x3D; 1；按增量序列个数 k，对序列进行 k 趟排序；每趟排序，根据对应的增量ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p></blockquote><p>动图演示如下：</p><img src="2.gif" /><p>希尔排序算法较为晦涩难懂，而且并不是最优的排序算法，现在已经被后来的快速排序算法给淘汰了。然而不可否认希尔对排序算法的演进具有开创性贡献，在攀越算法高峰的路上，每一步都走得战战兢兢，我们只有铭记这些伟大的引路人，以此激励自己不断前行。</p><p>算法世界不尽完美。不仅有经典算法在前奠基，后起之秀遗传算法、深度学习算法也熠熠生辉。算法世界还有许多”所罗门王的宝藏”，一直静静地守候在”灯火阑珊处”，等待着人们去发掘。</p><h1 id="4-学习方法"><a href="#4-学习方法" class="headerlink" title="4. 学习方法"></a>4. 学习方法</h1><p>我给大家整理了一个学习计划，可以保存下图进行学习：</p><img src="2.jpeg"/>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习建议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探讨栈和队列的几个基础问题</title>
      <link href="/2022/11/30/StackAndQueue/"/>
      <url>/2022/11/30/StackAndQueue/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-环形队列"><a href="#1-环形队列" class="headerlink" title="1. 环形队列"></a>1. 环形队列</h1><p>用数组实现一个容量固定的环形队列，需要实现队列的入队，出队，返回元素个数，判空，判断队列是否满等操作。（假设队列只存放整数）。即需要实现如下接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RingQueue</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(<span class="type">int</span> value)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">poll</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1-使用一个size变量记录当前队列的元素个数"><a href="#1-1-使用一个size变量记录当前队列的元素个数" class="headerlink" title="1.1. 使用一个size变量记录当前队列的元素个数"></a>1.1. 使用一个size变量记录当前队列的元素个数</h2><p>队列有队头和队尾，我们需要一个头指针head和尾指针rear记录队列的头和尾，还需要一个size变量记录队列中的元素个数。头指针head始终指向队列中的第一个元素的位置，尾指针rear始终指向队列中最后一个元素的下一个位置。</p><p>当元素需要入队列的时候，只需在rear位置处放入元素，然后rear前进一个位置；</p><p>当元素需要出队列的时候，只需返回head位置的元素，然后head前进一个位置；</p><p>那怎么判断队列的空和满呢？当size等于0的时候，队列空，size等于数组长度的时候，队列满。如下图所示：</p><img src="1.svg" /><p>根据上述逻辑可以实现如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayRingQueue1</span> <span class="keyword">implements</span> <span class="title class_">RingQueue</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size, rear, head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] queue;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayRingQueue1</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">int</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        queue[rear] = value;</span><br><span class="line">        rear = next(rear);</span><br><span class="line">        ++size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> queue[head];</span><br><span class="line">        head = next(head);</span><br><span class="line">        --size;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == queue.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index == queue.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> index + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-不使用size变量"><a href="#1-2-不使用size变量" class="headerlink" title="1.2. 不使用size变量"></a>1.2. 不使用size变量</h2><p>当有size的时候，可以使用size和数组的长度关系判断队列是否为空，是否满，不使用size变量，如何实现呢？直觉告诉我们，当rear指针“追上”head指针的时候，队列为满，那此时队列是否为满的条件是否可以定为head &#x3D;&#x3D; rear呢？不可以！因为read &#x3D;&#x3D; head的时候，队列还有可能为空。那么怎么解决这个问题？如下图所示：</p><img src="2.svg" /><p>于是我们可以写出如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayRingQueue2</span> <span class="keyword">implements</span> <span class="title class_">RingQueue</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rear, head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] queue;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayRingQueue1</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">int</span>[capacity + <span class="number">1</span>];<span class="comment">// 多使用一个元素空间</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        queue[rear] = value;</span><br><span class="line">        rear = next(rear);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> queue[head];</span><br><span class="line">        head = next(head);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head == rear;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next(rear) == head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rear - head + (rear &lt; head ? queue.length : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index == queue.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> index + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-最小栈"><a href="#2-最小栈" class="headerlink" title="2. 最小栈"></a>2. 最小栈</h1><p>设计一个栈，可以返回当前栈的最小值，要求时间空间复杂度尽可能的低。我们可以使用两个栈来实现，一个是数据栈，一个是最小值栈，数据栈用来存储数据，而最小值栈用来存储当前数据栈中的最小值，每次数据栈数据发生变化的时候，都要在最小值栈存储当前的最小值。一开始两个栈都是空的。</p><p>当数据栈push一个元素的时候，需要把当前元素和最小值栈的栈顶元素对比，如果没有栈顶，或者当前元素小于栈顶，那么把当前元素也压入最小值栈，否则把最小值栈的栈顶再次压入最小值栈。</p><p>当数据栈pop一个元素的时候，最小值栈的栈顶也要弹出。如下图所示：</p><img src="3.svg" /><p>任何时候，最小值栈的栈顶元素就是当前数据栈中的最小值。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; data, min;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        min = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        data.push(value);</span><br><span class="line">        <span class="keyword">if</span>(min.isEmpty() || min.peek() &gt; value) min.push(value);</span><br><span class="line">        <span class="keyword">else</span> min.push(min.peek());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> data.pop();</span><br><span class="line">        min.pop();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> min.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-用栈实现队列"><a href="#3-用栈实现队列" class="headerlink" title="3. 用栈实现队列"></a>3. 用栈实现队列</h1><p>因为队列是先进先出，栈是后进先出，因此我们需要使用两个栈，当需要入队列的时候，把数据压入其中一个栈中，当需要出队列的时候，先把栈中的数据倒出，压入另外一个栈，在从另外一个栈弹出。这样就保证了入队列和出队列的顺序。如下图所示：</p><img src="4.svg" /><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueueUsingStack</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; data, help;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">QueueUsingStack</span><span class="params">()</span> &#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        help = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        data.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(help.isEmpty()) &#123;<span class="comment">// 只有help为空的时候，才可以从data中倒出数据，且一次倒完。</span></span><br><span class="line">            <span class="keyword">while</span>(!data.isEmpty) help.push(data.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> help.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-用队列实现栈"><a href="#4-用队列实现栈" class="headerlink" title="4. 用队列实现栈"></a>4. 用队列实现栈</h1><p>可以使用两个队列，一个数据队列，一个辅助队列，当压入数据的时候，把数据压入数据队列，当弹出栈顶数据的时候，需要把之前的所有元素都出队列到辅助队列中，然后返回当前元素。然后辅助队列和数据队列的引用交换。如下图所示：</p><img src="5.svg" /><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackUsingQueue</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; data, help;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StackUsingQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        help = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        data.offer(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(data.size() &gt; <span class="number">1</span>) help.offer(data.poll());</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> data.poll();</span><br><span class="line">        Queue&lt;Integer&gt; t = data;</span><br><span class="line">        data = help;</span><br><span class="line">        help = t;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以只用一个队列实现栈吗？可以的！一个队列既是数据队列，又是辅助队列。如下图所示：</p><img src="6.svg" /><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackUsingSingleQueue</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; data;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StackUsingQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        data.offer(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> data.size();</span><br><span class="line">        <span class="keyword">if</span>(size &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size - <span class="number">1</span>; ++i) data.offer(data.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data.poll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
          <category> 栈和队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法求解旋转字符串问题</title>
      <link href="/2022/11/28/ReverseString/"/>
      <url>/2022/11/28/ReverseString/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="90282aa9a6706f9b81da98ffec0f0533012076938093ff70c0888f1c658dad01"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇文章让你学会KMP算法</title>
      <link href="/2022/11/24/kmp2/"/>
      <url>/2022/11/24/kmp2/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-KMP算法是什么？"><a href="#1-KMP算法是什么？" class="headerlink" title="1. KMP算法是什么？"></a>1. KMP算法是什么？</h1><p>提出一个问题，给你两个字符串s和p（p的长度不超过s的长度，且s和p都不是空的），问s中是否包含p？</p><p>例如：</p><ol><li>s&#x3D;“hello, java”, p &#x3D; “java”，那么s包含p</li><li>s&#x3D;“github”, p&#x3D;“ppt”, s不包含p</li></ol><p>能否写出一个程序高效地解决这个问题。</p><p>我们能容易想到这样的方法：</p><p>设置两个指针，i和j，都初始化为0，我们对比s在i位置，p在j位置的字符。如果s[i]&#x3D;&#x3D;p[j]，那么i和j都移到下一个位置。否则j回退到0，i回退到1，继续上述过程，如果在下一次比较中，还是出现了不匹配的字符，那么j回退到0，i回退到2，继续……，周而复始。直到某一次匹配中，如果j到达越界位置，那么s包含p，否则s不包含p。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrContains</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ls</span> <span class="operator">=</span> s.length(), lp = p.length(), i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= ls - lp) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; lp &amp;&amp; s.charAt(x) == p.charAt(j)) &#123;</span><br><span class="line">                ++x;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == lp) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的查找方法，在遇到s&#x3D;“aaaaaaaaaaaaab”，p&#x3D;“aab”这样的情况的时候，会使得p只有在最后一次匹配的时候，才可以得到匹配。假设s的长度是$N$，p的长度是$M$，那么显然的最坏情况下时间复杂度就是$O(N*M)$。而KMP算法能做到最坏情况下$O(N+M)$的时间复杂度。它是怎么做的呢？我们一起来看看吧。</p><h1 id="2-KMP算法的计算过程"><a href="#2-KMP算法的计算过程" class="headerlink" title="2. KMP算法的计算过程"></a>2. KMP算法的计算过程</h1><h2 id="2-1-一个启发过程"><a href="#2-1-一个启发过程" class="headerlink" title="2.1. 一个启发过程"></a>2.1. 一个启发过程</h2><p>我们上面的暴力方法是基于这样的一个尝试的思路，如果s中有一个子串和p是匹配的，因为任何一个子串都有一个开头位置，那么这个和p匹配的子串当然也有一个开头位置，又因为我们不知道哪个开头位置的子串和p是匹配的，因此我们尝试所有可能的开头。如果我们尝试完所有的开头位置，都没有发现一个子串可以和p匹配，那么s中就没有一个子串和匹配，即s不包含p，反之s包含p。那么这个过程它为什么低效呢？我们来看一下s&#x3D;“aaaaaaaaab”和p&#x3D;“aaab”的匹配过程。</p><img src="kmp1.svg"><p>当我们发现某一个开头的尝试已经宣告失败的时候，此时只能选择下一个开头，继续从头开始匹配。那么此时指向s的指针会回退，之前已经匹配的部分结果完全抛弃，从新开始，因此这个方法是低效的。</p><p>如果某一次尝试失败了，那么之前已经匹配的部分（之前做过的努力）能否给我们提供一些帮助，加速我们的匹配过程，甚至能使得字符串s上的指针不回退呢？我们调整的时候，需要遵循什么原则呢？</p><img src="kmp2.svg"><p>为了便于说明j的调整，下面我们举一个明显的例子。请看字符串s&#x3D;“acacab”，和字符串p&#x3D;“acab”的匹配过程。</p><img src="kmp3.svg"><p>那么如果已经匹配的部分有多个前缀和后缀是匹配的呢？我们怎么选择？请看s&#x3D;“aaaab”和p&#x3D;“aaab”的匹配过程。</p><img src="kmp4.svg"><p>总结一下：此时我们似乎找到了，保证s指针不回退的时候，p的指针的调整方案，即当我们发现某一次匹配失败的时候，我们需要找出<strong>前面已经匹配部分的<font color="red">前后缀最大匹配长度</font>，假设为next，那么我们只需要把j调整为next</strong>，继续进行匹配操作即可。</p><h2 id="2-2-next数组"><a href="#2-2-next数组" class="headerlink" title="2.2. next数组"></a>2.2. next数组</h2><h3 id="2-2-1-什么是next数组？"><a href="#2-2-1-什么是next数组？" class="headerlink" title="2.2.1. 什么是next数组？"></a>2.2.1. 什么是next数组？</h3><p>我们在进行真正的匹配之前，我们要先计算好，每一个元素的next值（next值的含义就是当前元素失去匹配的时候，它前面部分字符串的前后缀最大匹配长度，这个前后缀不包含自己），看下面对字符串“caccacb”的next值的定义过程：</p><img src="kmp5.svg"><h3 id="2-2-2-使用next数组加速匹配过程"><a href="#2-2-2-使用next数组加速匹配过程" class="headerlink" title="2.2.2. 使用next数组加速匹配过程"></a>2.2.2. 使用next数组加速匹配过程</h3><p>如果我们在匹配之前，得到这么一个，关于模式串p的每一个位置index失去匹配后，模式串的匹配指针应该调整为next[index]的next数组的话，那么我们的匹配过程可以变成这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrContainsKmp</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ls</span> <span class="operator">=</span> s.length(), lp = p.length(), i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] next = getNext(p);<span class="comment">//获取关于模式串p的next数组</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= ls - lp &amp;&amp; j &lt; lp) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == p.charAt(j)) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                ++j;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果模式串p的第一个字符p[0]和字符串s的当前字符s[i]都不匹配，</span></span><br><span class="line"><span class="comment">            那么说明s中从i开始不可能匹配出p来，因此换下一个开头继续尝试</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>) ++i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            否则j位置不是0，说明它前面有匹配成功的部分，</span></span><br><span class="line"><span class="comment">            那么此时j应该调整为next[j]的位置</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">else</span> j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j == lp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>next数组能加速匹配过程，可以从下面两个方面来理解：</p><ol><li><p>保证i指针不回退，指导j指针的调整</p><p>在我们匹配失败的时候，它可以利用我们之前已经匹配的部分字符串（以前做过的努力），在保证i（字符串s的匹配指针）不回退的情况下，指导此时指针j（模式串的匹配指针）应该做怎样的调整。前面的图示已经向大家说明了这一点。</p></li><li><p>跳过了一些无需验证的可能性</p><p>还记得我们的暴力做法吗？它尝试字符串s中每一个可能的开头位置（即验证所有的可能性），而next数组指导j的调整，可以跳过一些根本不可能匹配出来模式串p的位置，如下图所示：</p></li></ol><img src="kmp6.svg"><p>这两种理解是等价的。</p><h3 id="2-2-3-next数组正确性分析"><a href="#2-2-3-next数组正确性分析" class="headerlink" title="2.2.3. next数组正确性分析"></a>2.2.3. next数组正确性分析</h3><p>上面我们举了一个例子说明next数组能够指导j指针的调整，同时保证i指针不回退，并且还能跳过那些不可能的开头位置。那么为什么呢？我们这里给出一般性的说明。如图所示：</p><img src="kmp7.svg"><h3 id="2-2-4-求解next数组"><a href="#2-2-4-求解next数组" class="headerlink" title="2.2.4. 求解next数组"></a>2.2.4. 求解next数组</h3><p>既然next数组这么好用，我们如何快速得到它呢？</p><img src="kmp8.svg"><h1 id="3-代码和测试程序"><a href="#3-代码和测试程序" class="headerlink" title="3. 代码和测试程序"></a>3. 代码和测试程序</h1><h2 id="3-1-完整代码"><a href="#3-1-完整代码" class="headerlink" title="3.1. 完整代码"></a>3.1. 完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrContainsKmp</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ls</span> <span class="operator">=</span> s.length(), lp = p.length(), i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[lp];</span><br><span class="line">        getNextArray(p, next);<span class="comment">//获取关于模式串p的next数组</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; ls &amp;&amp; j &lt; lp) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == p.charAt(j)) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                ++j;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果模式串p的第一个字符p[0]和字符串s的当前字符s[i]都不匹配，</span></span><br><span class="line"><span class="comment">            那么说明s中从i开始不可能匹配出p来，因此换下一个开头继续尝试</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>) ++i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            否则j位置不是0，说明它前面有匹配成功的部分，</span></span><br><span class="line"><span class="comment">            那么此时j应该调整为next[j]的位置</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">else</span> j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j == lp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getNextArray</span><span class="params">(String p, <span class="type">int</span>[] next)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> p.length();</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//i: 当前要求解next[i]</span></span><br><span class="line">        <span class="comment">//cn: cn始终记录next[i - 1]的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>, cn = next[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p.charAt(i - <span class="number">1</span>) == p.charAt(cn)) next[i++] = ++cn;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cn == <span class="number">0</span>) next[i++] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> cn = next[cn];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-复杂度分析"><a href="#3-2-复杂度分析" class="headerlink" title="3.2. 复杂度分析"></a>3.2. 复杂度分析</h2><p>设字符串s的长度是$N$，p的长度是$M$，我们看估计contains方法中while循环体的一共执行多少次。我们设置两个量，一个是$i$，一个是$i-j$，其中i的范围$[0,N]$，i-j的范围$[0,N]$。</p><ol><li>如果代码命中第7行的分支，那么会推高$i$，但是$i-j$保持不变</li><li>如果代码命中第15行的分支，那么$i$和$i-j$都会被推高</li><li>如果代码命中第21行的分支，那么$i$保持不变，$i-j$会被推高。</li></ol><p>且在整个while的执行过程中变量$i$和$i-j$不会减小，那么这个while循环运行的结果就是把这两个变量不断推到最大值。可以知道这两个变量的最大值都是$N$，因此while循环的执行次数不会超过$2N$次，因此时间复杂度$O(N)$。</p><p>空间复杂度$O(N)$。</p><h2 id="3-3-测试程序"><a href="#3-3-测试程序" class="headerlink" title="3.3. 测试程序"></a>3.3. 测试程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrContainsTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">100_0000</span>, maxStrLen = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">while</span>(times-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> r.nextInt(maxStrLen) + <span class="number">2</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> getRandomStr(r, len);</span><br><span class="line">            String p;</span><br><span class="line">            <span class="keyword">if</span>(r.nextInt(<span class="number">2</span>) == <span class="number">0</span>) </span><br><span class="line">                p = s.substring(r.nextInt(len));</span><br><span class="line">            <span class="keyword">else</span> p = getRandomStr(r, r.nextInt(len) + <span class="number">1</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">ans1</span> <span class="operator">=</span> StrContains.contains(s, p);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">ans2</span> <span class="operator">=</span> StrContainsKmp.contains(s, p);</span><br><span class="line">            <span class="keyword">if</span>(ans1 ^ ans2) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Oops!, wrong answer, ans1 = &quot;</span> + ans1 + <span class="string">&quot;, ans2 = &quot;</span> + ans2);</span><br><span class="line">                System.out.println(<span class="string">&quot;s: &quot;</span> + s);</span><br><span class="line">                System.out.println(<span class="string">&quot;p: &quot;</span> + p);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Testcase: &quot;</span> + times + <span class="string">&quot; done!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test done successfully!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getRandomStr</span><span class="params">(Random r, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span>(len-- &gt; <span class="number">0</span>) </span><br><span class="line">            bd.append((<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span> + r.nextInt(<span class="number">26</span>)));</span><br><span class="line">        <span class="keyword">return</span> bd.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位操作的妙用，出现K次的数字问题</title>
      <link href="/2022/11/23/appear-K-times-number/"/>
      <url>/2022/11/23/appear-K-times-number/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h1><p>给定一个数组arr，其中只有一个数字出现了K次，剩余的数字都出现M次，且$1\le K&lt;M$，找出这个出现K次的数。</p><h1 id="2-暴力做法"><a href="#2-暴力做法" class="headerlink" title="2. 暴力做法"></a>2. 暴力做法</h1><p>使用哈希表统计每一个数出现的次数，最后遍历哈希表，返回出现K次的数。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppearKTimesNumber</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findKTimesNum</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length, i = <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; countMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">cnt</span> <span class="operator">=</span> countMap.get(arr[i]);</span><br><span class="line">            <span class="keyword">if</span>(cnt == <span class="literal">null</span>) cnt = <span class="number">0</span>;</span><br><span class="line">            ++cnt;</span><br><span class="line">            countMap.put(arr[i], cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Integer number : countMap.keySet()) </span><br><span class="line">            <span class="keyword">if</span>(countMap.get(number) == k) <span class="keyword">return</span> number;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(N)$，空间复杂度$O(N)$。</p><h1 id="3-最优解"><a href="#3-最优解" class="headerlink" title="3. 最优解"></a>3. 最优解</h1><p>int类型的底层是32位2进制数，我们统计所有数的二进制位上1的个数，我们假设答案ans上某一位是1，那么这个1要么出现$K$次，要么出现$K+xM(x \ge 0)$次，如果ans上的某一位是0，那么这一位上1的个数，只可能是$M$的倍数。因此我们可以根据某一位上1出现的次数能否被$M$整除，就可以知道答案ans这一位是0还是1，如下图所示：</p><img src="1.svg"/><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppearKTimesNumber2</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findKTimesNum</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length, i = <span class="number">0</span>, j, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] bitCnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; len; ++i) </span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j) <span class="comment">// 遍历数组每一个数字的每一位，记录每一位上1出现的总次数</span></span><br><span class="line">                <span class="keyword">if</span>((arr[i] &amp; (<span class="number">1</span> &lt;&lt; j)) != <span class="number">0</span>) ++bitCnt[j];</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span>(bitCnt[j] % m != <span class="number">0</span>) ans |= <span class="number">1</span> &lt;&lt; j;<span class="comment">// 如果这一位上1的出现次数和m取模不是0，那么ans这一位一定是1</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(N)$，空间复杂度$O(1)$。</p><h1 id="4-测试程序"><a href="#4-测试程序" class="headerlink" title="4. 测试程序"></a>4. 测试程序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppearKTimesNumberTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">100_0000</span>, maxM = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(times-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> r.nextInt(maxM) + <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> r.nextInt(m - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mTime</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> m * mTime + k;</span><br><span class="line">            <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[size], arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[size], arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">            HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mTime; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> r.nextInt();</span><br><span class="line">                <span class="keyword">while</span>(set.contains(num)) num = r.nextInt();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; m; ++x) &#123;</span><br><span class="line">                    arr1[j] = arr2[j] = arr3[j] = num;</span><br><span class="line">                    ++j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> r.nextInt();</span><br><span class="line">            <span class="keyword">while</span>(set.contains(num)) num = r.nextInt();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; k; ++x) &#123;</span><br><span class="line">                arr1[j] = arr2[j] = arr3[j] = num;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans1</span> <span class="operator">=</span> AppearKTimesNumber.findKTimesNum(arr1, k, m);</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans2</span> <span class="operator">=</span> AppearKTimesNumber2.findKTimesNum(arr2, k, m);</span><br><span class="line">            <span class="keyword">if</span>(ans1 != ans2) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Oops!, wrong answer, ans1 = &quot;</span> + ans1 + <span class="string">&quot;, ans2 = &quot;</span> + ans2 + <span class="string">&quot;, k = &quot;</span> + k + <span class="string">&quot;, m = &quot;</span> + m);</span><br><span class="line">                System.out.println(<span class="string">&quot;Origin array: &quot;</span> + Arrays.toString(arr3));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Testcase: &quot;</span> + times + <span class="string">&quot; done!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test done successfully!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-升级问题"><a href="#5-升级问题" class="headerlink" title="5. 升级问题"></a>5. 升级问题</h1><p>给定一个数组arr，其中只有一个数字出现了N次，剩余的数字都出现M次，且$1\le N&lt;M$，如果$N&#x3D;K$，那么返回这个出现K次的数，否则返回-1。</p><p>这个题目只是出现次数不一定是$K$次了，做法和上面的最优解大致相同，只是有一个小细节，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppearKTimesNumber3</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findKTimesNum</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length, i = <span class="number">0</span>, j, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] bitCnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; len; ++i) </span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j)</span><br><span class="line">                <span class="keyword">if</span>((arr[i] &amp; (<span class="number">1</span> &lt;&lt; j)) != <span class="number">0</span>) ++bitCnt[j];</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> bitCnt[j] % m;</span><br><span class="line">            <span class="keyword">if</span>(mod == k) ans |= <span class="number">1</span> &lt;&lt; j;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mod != <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans == <span class="number">0</span>) &#123;<span class="comment">// 细节，如果ans是0的话，那么并不能保证arr中有0，就算有0，那么也不能保证0刚好出现K次，因此必须再扫一遍，查看0出现的次数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> n: arr)</span><br><span class="line">                <span class="keyword">if</span>(n == <span class="number">0</span>) ++cnt;</span><br><span class="line">            <span class="keyword">if</span>(cnt != k) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间空间复杂度和上面的最优解一样</p><h1 id="6-升级问题测试程序"><a href="#6-升级问题测试程序" class="headerlink" title="6. 升级问题测试程序"></a>6. 升级问题测试程序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppearKTimesNumberTest2</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">100_0000</span>, maxM = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(times-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> r.nextInt(maxM) + <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> r.nextInt(m - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mTime</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">realK</span> <span class="operator">=</span> r.nextInt(<span class="number">2</span>) == <span class="number">0</span> ? k + <span class="number">1</span> : k;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> m * mTime + realK;</span><br><span class="line">            <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[size], arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[size], arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">            HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mTime; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> r.nextInt();</span><br><span class="line">                <span class="keyword">while</span>(set.contains(num)) num = r.nextInt();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; m; ++x) &#123;</span><br><span class="line">                    arr1[j] = arr2[j] = arr3[j] = num;</span><br><span class="line">                    ++j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> r.nextInt();</span><br><span class="line">            <span class="keyword">while</span>(set.contains(num)) num = r.nextInt();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; realK; ++x) &#123;</span><br><span class="line">                arr1[j] = arr2[j] = arr3[j] = num;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans1</span> <span class="operator">=</span> AppearKTimesNumber.findKTimesNum(arr1, k, m);</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans2</span> <span class="operator">=</span> AppearKTimesNumber3.findKTimesNum(arr2, k, m);</span><br><span class="line">            <span class="keyword">if</span>(ans1 != ans2) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Oops!, wrong answer, ans1 = &quot;</span> + ans1 + <span class="string">&quot;, ans2 = &quot;</span> + ans2 + <span class="string">&quot;, k = &quot;</span> + k + <span class="string">&quot;, m = &quot;</span> + m + <span class="string">&quot;, realK: &quot;</span> + realK);</span><br><span class="line">                System.out.println(<span class="string">&quot;Origin array: &quot;</span> + Arrays.toString(arr3));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Testcase: &quot;</span> + times + <span class="string">&quot; done!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test done successfully!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 位运算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算的一些骚操作，都在这了</title>
      <link href="/2022/11/21/BitOperSummary/"/>
      <url>/2022/11/21/BitOperSummary/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f872792ae4914a7ebfe2d28ac58f66959af7c5a4208da746d09afe4c2b8e0e66"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 位运算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Top K 问题</title>
      <link href="/2022/11/17/TopK/"/>
      <url>/2022/11/17/TopK/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e5e39b6fab5ed853efc5d6a8629158ff0f6c42f1aa84d1593e7deecfbae31871"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆 </tag>
            
            <tag> 快速排序 </tag>
            
            <tag> BFPRT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组排序后相邻元素的最大差值问题</title>
      <link href="/2022/11/16/MaxDiffBetweenAdjacentNumAfterSort/"/>
      <url>/2022/11/16/MaxDiffBetweenAdjacentNumAfterSort/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1b5ed6ac9c6d86fe9a775a91c8fb2a13d2782c57c4b0c08286eb811ed1957a6c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见过就会没见过就不会系列 </tag>
            
            <tag> 桶排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需要排序的最短子数组问题</title>
      <link href="/2022/11/14/ShortestSubarrayNeedSort/"/>
      <url>/2022/11/14/ShortestSubarrayNeedSort/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d2b3951e12aacf7ef26b78d9fcf66d3deab04d087642c7dbf235d8f4e53f24ca"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见过就会没见过就不会系列 </tag>
            
            <tag> 选择排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基数排序</title>
      <link href="/2022/11/12/RadixSort/"/>
      <url>/2022/11/12/RadixSort/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-基数排序算法思想"><a href="#1-基数排序算法思想" class="headerlink" title="1. 基数排序算法思想"></a>1. 基数排序算法思想</h1><p>现在有一个问题，对一个数组从小到大排序，数组中元素的范围都在$[0,9]$。</p><p>最好的做法是设置一个桶数组buckets，长度为10，buckets的第i个元素，表示数字i出现的次数。因此我们只需要遍历一次数组，把各个数字出现的次数记录到buckets里，然后我们从左到右遍历buckets，如果buckets[i]&gt;0，说明元素i出现了buckets[i]次，那么就输出buckets[i]个元素i到原数组即可。如下图所示：</p><img src="1.svg"/><p>写成代码就是如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortZeroToNine</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] buckets = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//统计各个元素的出现次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; ++i) ++buckets[arr[i]];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历统计结果，填入数据。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>, i = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++j) </span><br><span class="line">            <span class="keyword">while</span>(buckets[j]-- &gt; <span class="number">0</span>) arr[i++] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(N)$，空间复杂度$O(1)$。</p><p>这是计数排序的思想。因此当数据的范围很有限的时候（屈指可数），使用计数的思想是比较好的。</p><p>基数排序也是基于这样的想法。只不过基数排序是对数据的每一位按照上述方法排序，排序的过程大致如下：假设一组数据中最高位是百位，那么首先按照个位进行排序；然后在个位有序的基础上，对十位进行排序，对于十位相同的数据，不要改变个位已经排好的顺序；然后对百位进行排序，百位相同的数据，不要改变十位已经排好顺序（稳定性）。这样整个数组就有序了，如下图所示：</p><img src="2.svg"/><p>这样做的道理是什么呢？</p><blockquote><p>  我们观察一个有序的数组（不妨按照从小到大的顺序，便于描述，我们假设数组中元素的最高位是百位），所有元素的相同的位有一个规律，即百位按照从小到大的顺序排列，百位相同的，十位按照从小到大的顺序排列，十位相同的，个位按照从小到大的顺序排列的。反之，我们只要把数组排列成这样的顺序，数组就是有序的（因为比较两个数的大小的时候，先比较高位）。</p><p>  因为基数排序是先排个位，然后十位，… …，最后排最高位。因为最高位是最后完成排序的，因此最高位一定是有序的。那么当最高位相同的时候，我们排序的时候要求不能改变次高位已经排好顺序的相对位置，因此次高位也是从小到大，… …，这样我们正好达到了上面所说的一个有序数组的规律，因此这样操作可以完成数组的排序。</p></blockquote><!-- 单行注释 --><div style="display:none">多行注释我们是怎么比较两个正整数的大小的呢？先看最高位，最高位大的那个数大，如果最高位分不出来，那么再看次高位，次高位大的那个数大，否则再往下看，直到能分出来为止，如果所有的位都看完了，还没有分出来，说明两个数一样大。 这是因为整数的大小是由最高位决定的，当最高位相等的时候，此时我们就需要看下一位，因为我们是从低位到高位依次排序的，因此在排高位的时候，低位已经完成了排序。因为当高位相等的时候，我们只需按照数据在原数组中的原来的位置输出即可，而不能改变他们的相对次序。因为一旦改变的话，就打乱了低位已经排好的顺序（这就是为什么我们要求在给每一位排序的时候，选择的排序方法是稳定的原因）。即基数排序的基本思想是，高位可以决定出来大小的，就采用高位排出来的顺序，否则就采用它的下一位给出的顺序。例如arr=[123,133,321]，先按个位排序：[321,123,133]，在按十位排序：[321,123,133]，再根据十位排序的时候，321和123的十位都是2，因此分不出来大小，于是就按照原顺序输出（即参考个位给出的顺序），再根据百位排序：[123,133,321]，根据百位的大小关系，321被排在了最后，这是因为它是百位最大的，于是它就改变原来的顺序（百位大的数更大，可以忽略十位排好的顺序），但是123和133因为百位都是1，分不出来大小，因此它们的相对顺序不变，从第二步的1，2位置，变成第三步的0，1位置（相对位置不变，即参考十位给出的顺序）。</div><h1 id="2-算法实现"><a href="#2-算法实现" class="headerlink" title="2. 算法实现"></a>2. 算法实现</h1><p>我们需要获取到一个数上的各个数位的值，比如123，第0位是个位，第1位是十位，… …，现在给定任意的一个正整数$x$，得到它的第$i(i&gt;&#x3D;0)$位上的值，应该怎么办？这里直接给出公式：$\frac{x}{10^i}\bmod 10$。</p><p>还有一个问题就是，我们怎么对每一位排序？根据上面的描述，我们知道，整数的每一位的范围是$[0,9]$，因此对每一位排序我们可以采取计数排序的方法，但是根据上面我们说过的规则，对每一位排序要求排序方法是<strong>稳定的</strong>，而一般的计数排序是做不到稳定性的，此时我们需要对一般的计数排序算法改进一下，使其达到稳定性的要求。那么如何改进呢？</p><blockquote><p>  所谓排序算法的稳定性是指在排序前后，相同数据的相对位置不能改变。</p><p>  例如数组arr：[1,<font color="red">3</font>,4,5,7,<font color="green">3</font>]，排序之前红色的3在绿色的3左边，在排序以后，红色的3不能跑到绿色的3右边。虽然这在一般的排序中即使换了位置也无所谓，但是在对象排序以及本文所介绍的基数排序中是至关重要的。</p></blockquote><h2 id="2-1-稳定的计数排序"><a href="#2-1-稳定的计数排序" class="headerlink" title="2.1. 稳定的计数排序"></a>2.1. 稳定的计数排序</h2><p>下面使用一张图描述计数排序的改进方案，如下图所示：</p><img src="3.svg"/><h2 id="2-2-稳定的计数排序代码"><a href="#2-2-稳定的计数排序代码" class="headerlink" title="2.2. 稳定的计数排序代码"></a>2.2. 稳定的计数排序代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortZeroToNineStable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] buckets = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//统计各个元素的出现次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; ++i) ++buckets[arr[i]];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//变换计数桶</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; ++i) buckets[i] += buckets[i - <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//辅助数组</span></span><br><span class="line">        <span class="type">int</span>[] help = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        System.arraycopy(arr, <span class="number">0</span>, help, <span class="number">0</span>, arr.length);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历统计结果，倒出</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt; -<span class="number">1</span>; --i) arr[--buckets[help[i]]] = help[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(N)$，空间复杂度$O(N)$。</p><h1 id="3-基数排序完整代码"><a href="#3-基数排序完整代码" class="headerlink" title="3. 基数排序完整代码"></a>3. 基数排序完整代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadixSort</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] RADIX_TABLE = &#123;</span><br><span class="line">        <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">10000</span>, <span class="number">10_0000</span>, <span class="number">100_0000</span>,</span><br><span class="line">        <span class="number">1000_0000</span>, <span class="number">1_0000_0000</span>, <span class="number">10_0000_0000</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> i, max = arr[<span class="number">0</span>], radix, j;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//申请辅助数组和计数桶数组</span></span><br><span class="line">        <span class="type">int</span>[] buckets = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>], data = <span class="keyword">new</span> <span class="title class_">int</span>[len], help = <span class="keyword">new</span> <span class="title class_">int</span>[len], t;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//找出数组的最大值，确定最高位是多少</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; len; ++i) max = Math.max(max, arr[i]);</span><br><span class="line">        radix = lengthOf(max);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这里把数据拷贝到data数组中，便于后续排序</span></span><br><span class="line">        System.arraycopy(arr, <span class="number">0</span>, data, <span class="number">0</span>, len);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; radix; ++i) &#123;<span class="comment">// 需要排序radix趟</span></span><br><span class="line">            Arrays.fill(buckets, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; len; ++j) ++buckets[radixOf(data[j], i)];<span class="comment">// 对第i位上的数，计数入桶</span></span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">10</span>; ++j) buckets[j] += buckets[j - <span class="number">1</span>]; <span class="comment">//转换buckets数组，便于后续倒出</span></span><br><span class="line">            <span class="keyword">for</span>(j = len - <span class="number">1</span>; j &gt; -<span class="number">1</span>; --j) help[--buckets[radixOf(data[j], i)]] = data[j];<span class="comment">// 倒出</span></span><br><span class="line">            t = help;</span><br><span class="line">            help = data;</span><br><span class="line">            data = t;</span><br><span class="line">        &#125;</span><br><span class="line">        System.arraycopy(data, <span class="number">0</span>, arr, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lengthOf</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num != <span class="number">0</span>) &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">radixOf</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> i)</span> &#123;<span class="comment">// 获取num上的第i位的值，i&gt;=0</span></span><br><span class="line">        <span class="keyword">return</span> (num / RADIX_TABLE[i]) % <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设数组中的最大值是$max$，那么时间复杂度$O(N*\log_{10}max)$，空间复杂度$O(N)$。</p><h1 id="4-测试程序"><a href="#4-测试程序" class="headerlink" title="4. 测试程序"></a>4. 测试程序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadixSortTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">100_0000</span>, maxArraySize = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">while</span>(times-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> r.nextInt(maxArraySize) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span>[] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[size], array2 = <span class="keyword">new</span> <span class="title class_">int</span>[size], array3 = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) array1[i] = array2[i] = array3[i] = r.nextInt(<span class="number">10_0001</span>);</span><br><span class="line">            RadixSort.sort(array1);</span><br><span class="line">            Arrays.sort(array2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array1[i] != array2[i]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Oops!, wrong answer!!&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;array1 is:&quot;</span>);</span><br><span class="line">                    System.out.println(Arrays.toString(array1));</span><br><span class="line">                    System.out.println(<span class="string">&quot;array2 is:&quot;</span>);</span><br><span class="line">                    System.out.println(Arrays.toString(array2));</span><br><span class="line">                    System.out.println(<span class="string">&quot;origin array is:&quot;</span>);</span><br><span class="line">                    System.out.println(Arrays.toString(array3));</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Testcase &quot;</span> + times + <span class="string">&quot; is finished!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test is done successfully!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基数排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2022/11/12/QuickSort/"/>
      <url>/2022/11/12/QuickSort/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-说在前面"><a href="#1-说在前面" class="headerlink" title="1. 说在前面"></a>1. 说在前面</h1><p>快速排序使用了分治的基本算法思想。它的大致思路是，设置一个枢轴值作为基准，把数组中小于基准的放在左边，剩下的放在右边，然后只需递归地对小于基准的部分和大于等于基准的部分完成排序即可。</p><h1 id="2-经典的快速排序"><a href="#2-经典的快速排序" class="headerlink" title="2. 经典的快速排序"></a>2. 经典的快速排序</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>经典的快速排序就不再多说了，重点是它的partition过程，即选定一个枢轴以后，怎么把数组整理成小于枢轴的放左边，剩下的放右边呢？其实有很多方法可以做到这一点，这里介绍一种方法。其实我们只要把所有小于枢轴的元素挪在一起放左边，那么剩下的就自然到右边了。那么怎么挪呢？</p><p>我们设置一个指针less，它始终指向小于枢轴部分的最后一个元素，我们从左到右遍历数组，如果发现一个小于枢轴的元素，我们只需要把它和less的下一个交换即可，然后less++，如下图所示：</p><img src="1.svg" /><p>根据这个过程，我们可以写出经典快速排序的代码如下：</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr != <span class="literal">null</span>) len = arr.length;</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        sort(arr, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(lo &gt;= hi) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> partition(arr, lo, hi);</span><br><span class="line">        sort(arr, lo, p - <span class="number">1</span>);</span><br><span class="line">        sort(arr, p + <span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[lo], i = lo, less = lo;<span class="comment">// 这里默认选择第一个作为枢轴元素</span></span><br><span class="line">        <span class="keyword">while</span>(++i &lt;= hi) </span><br><span class="line">            <span class="comment">// 如果发现当前元素小于枢轴，那么当前元素和less的下一个位置的元素交换</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; pivot) swap(arr, i, ++less); </span><br><span class="line">        swap(arr, less, lo);</span><br><span class="line">        <span class="keyword">return</span> less;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i != j &amp;&amp; arr[i] != arr[j]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- 快速排序整体采用分治的算法思想，先根据一个枢轴（pivot）元素把数组分成三部分，使得小于枢轴的元素在左边，等于枢轴的元素在中间，大于枢轴的元素在数组右边，这样划分相当于对数组进行了一次**预排序**，这是因为，等于枢轴的部分的位置在后续的排序过程中不会再动了，他们已经在了最终的位置。我们只需要对小于枢轴和大于枢轴的部分进行排序即可。且小于枢轴的部分的元素在排序的时候，它们的位置调整仅限于小于区域内，大于枢轴的部分也是一样，相较于归并排序，我们在解决了这两个子问题以后，就不需要把两个子问题的结果进行合并。--><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>这个方法有什么问题呢？其实还是有点小问题的，</p><ol><li><p>我们选择枢轴的方法是默认选择第一个元素的，这样当原数组原本就是从小到大有序的时候，这样会使得我们选择的枢轴打的很偏，这样，经过我们每一次的划分以后，大量的元素都被划分到一组了，划分失去了意义，时间复杂度也会变成$O(N^2)$；</p></li><li><p>我们把小于枢轴的元素划分为一组，剩下的元素（大于等于枢轴）划分为另一组，这样当数组中有很多元素和枢轴元素相同的时候，而小于枢轴的元素没几个，这样的话，使得小于枢轴的元素的那一部分很少，因此划分又几乎失去了意义了。</p><img src="2.svg" /><p>举个极端的例子，当数组中所以的元素都是一个数的时候，那么每一次划分，都会使得左半部分没有数据，这样划分就完全没有意义了。</p><img src="3.svg" /></li></ol><p>对于第一个问题，我们可以使用三数取中法，或者随机化的方法来选择枢轴元素，这样每一次都选择一个“很偏”的枢轴的概率就会变得很小了；对于第二个问题，我们可以使用另一种partition的方法，使得等于枢轴的元素尽量分散到两组中，就是下面介绍的二路快排。</p><h1 id="3-二路快速排序"><a href="#3-二路快速排序" class="headerlink" title="3. 二路快速排序"></a>3. 二路快速排序</h1><h2 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h2><p>二路快排主要是partition上的改进，我们设置两个指针less和more，分别从数组的开头和末尾位置开始遍历，只要当前元素小于枢轴，那么less++，直到某一次遍历当前元素不小于枢轴；然后more指针开始走，只要当前元素大于枢轴，more--，直到某一次遍历当前元素不大于枢轴，然后交换less和more位置的元素，然后less++，more--，周而复始，直到less大于more为止。如下图所示：</p><img src="4.svg" /><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort2Ways</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr != <span class="literal">null</span>) len = arr.length;</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        sort(arr, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(lo &gt;= hi) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> partition(arr, lo, hi);</span><br><span class="line">        sort(arr, lo, p - <span class="number">1</span>);</span><br><span class="line">        sort(arr, p + <span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 随机取[lo,hi]中的一个位置作为枢轴元素下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pivotIndex</span> <span class="operator">=</span> r.nextInt(hi - lo + <span class="number">1</span>) + lo;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[pivotIndex];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 先把枢轴放在lo位置，便于操作</span></span><br><span class="line">        swap(arr, lo, pivotIndex);</span><br><span class="line">        <span class="type">int</span> <span class="variable">less</span> <span class="operator">=</span> lo + <span class="number">1</span>, more = hi;</span><br><span class="line">        <span class="keyword">while</span>(less &lt;= more) &#123;</span><br><span class="line">            <span class="comment">// 只要less不越界，且less位置的元素小于枢轴，那么less向右</span></span><br><span class="line">            <span class="keyword">while</span>(less &lt;= more &amp;&amp; arr[less] &lt; pivot) ++less;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 只要more不越界，且more位置的元素大于枢轴，那么more向左</span></span><br><span class="line">            <span class="keyword">while</span>(less &lt;= more &amp;&amp; arr[more] &gt; pivot) --more;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 当二指针都停下且不越界的时候，交换二者的元素，less向右，more向左</span></span><br><span class="line">            <span class="keyword">if</span>(less &lt;= more) swap(arr, less++, more--);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把枢轴元素放回more位置</span></span><br><span class="line">        swap(arr, lo, more);</span><br><span class="line">        <span class="keyword">return</span> more;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i != j &amp;&amp; arr[i] != arr[j]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h2><p>二路快速排序中其实是考虑到等于枢轴的元素比较多的时候，把等于枢轴的元素尽量平均的分散到左右两组中，使得左右两组长度相差不要太大。我们知道，数组排好序后，相等的元素是相邻的，这些等于枢轴的元素在排好序以后一定是和枢轴元素相邻。而一次partition以后，我们只需要对枢轴左边和右边的部分进行排序，枢轴元素不参与后续的排序了，其实枢轴元素在这次partition以后已经在了最终的位置。</p><p>那么我们在partition的时候，能否把等于枢轴的元素和枢轴紧挨放置，这样等于枢轴的所有元素包括枢轴自己，都不需要参与后续的排序过程，只需要对小于，大于枢轴的部分进行排序即可。 这对于大部分都是相等的元素的数组排序有很大的性能提升。如下图所示：</p><img src="5.svg" /><p>下面介绍的三路快排，就能完成这样的操作。</p><h1 id="4-三路快速排序"><a href="#4-三路快速排序" class="headerlink" title="4. 三路快速排序"></a>4. 三路快速排序</h1><h2 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h2><p>其实三路快速排序也是对partition的过程进行的优化，它把枢轴分成了三部分，小于枢轴部分，等于枢轴部分和大于枢轴的部分。然后只需对小于和大于枢轴的部分进行排序即可。那么问题是这个划分过程怎么实现？这个问题也叫做<a href="/2023/01/11/DutchNationalFlagProblem">荷兰国旗问题</a>，下面给出解决这个问题的方法。</p><p>设置两个指针less和more，分别代表小于枢轴部分的右边界和大于枢轴部分的左边界，我们从左到右遍历数组，当前位置为i，less初始化为枢轴开头的前一个位置，more初始化为末尾的后一个位置，i初始化为枢轴开头下标，只要i小于more，进行下面的过程：</p><ul><li>如果i位置的元素小于枢轴，那么i位置的元素和less的下一个位置的元素交换，less++，i++；</li><li>如果i位置的元素等于枢轴，那么i++；</li><li>如果i位置的元素大于枢轴，那么i位置的元素和more的前一个位置交换，more--，i不动</li></ul><p>根据less和more的定义，只需要对开头到less和more到末尾这两部分排序即可。下图展示了partition的过程：</p><img src="6.svg" /><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort3Ways</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> less, more;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr != <span class="literal">null</span>) len = arr.length;</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        sort(arr, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(lo &gt;= hi) <span class="keyword">return</span>;</span><br><span class="line">        partition(arr, lo, hi);</span><br><span class="line">        sort(arr, lo, less);</span><br><span class="line">        sort(arr, more, hi);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 随机取[lo,hi]中的一个位置作为枢轴元素下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pivotIndex</span> <span class="operator">=</span> r.nextInt(hi - lo + <span class="number">1</span>) + lo;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        当然这里也可以使用三数取中法获取枢轴下标</span></span><br><span class="line"><span class="comment">        int pivotIndex;</span></span><br><span class="line"><span class="comment">        if(hi - lo + 1 == 2) &#123;</span></span><br><span class="line"><span class="comment">        pivotIndex = lo;</span></span><br><span class="line"><span class="comment">        &#125;else &#123;</span></span><br><span class="line"><span class="comment">        int m = (lo + hi) &gt;&gt;&gt; 1;</span></span><br><span class="line"><span class="comment">            pivotIndex = arr[lo] &gt;= arr[m] ? </span></span><br><span class="line"><span class="comment">            (arr[m] &gt;= arr[hi] ? m : (arr[lo] &gt;= arr[hi] ? hi : lo)) </span></span><br><span class="line"><span class="comment">            :</span></span><br><span class="line"><span class="comment">            (arr[lo] &gt;= arr[hi] ? lo : (arr[m] &gt;= arr[hi] ? hi : m));</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[pivotIndex];</span><br><span class="line">        less = lo - <span class="number">1</span>;</span><br><span class="line">        more = hi + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lo;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; more) &#123;<span class="comment">// 只要当前位置小于more位置，就继续</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 当前位置的数小于pivot，当前位置的数和less的下一个位置的数交换，less++， i++</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; pivot) swap(arr, ++less, i++);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 当前位置的数大于pivot，当前位置的数和more的前一个位置的数交换，more--， i不动</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arr[i] &gt; pivot) swap(arr, --more, i);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 当前位置的数等于pivot，i++</span></span><br><span class="line">            <span class="keyword">else</span> ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i != j &amp;&amp; arr[i] != arr[j]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-复杂度分析"><a href="#5-复杂度分析" class="headerlink" title="5. 复杂度分析"></a>5. 复杂度分析</h1><h2 id="5-1-时间复杂度"><a href="#5-1-时间复杂度" class="headerlink" title="5.1. 时间复杂度"></a>5.1. 时间复杂度</h2><p>假设数组长度为$N$：</p><p>最好情况下，当所有元素都一样的时候，三路快排一次扫描就可以完成排序，此时时间复杂度$O(N)$；</p><p>最坏情况下，partition每一次都选中当前区域的最大值或者最小值作为枢轴，使得左组或者右组的长度为0，那么此时就需要进行$N$次partition，而每一次partition至少需要扫描数组一遍，此时时间复杂度$O(N^2)$，即使这种情况出现的概率很低，但不可否认，也是存在的；</p><p>平均情况下，假设每一次partition后，小于枢轴的部分和大于枢轴的部分是等长的，假设时间复杂度$T(N)$，那么显然：$T(N) &#x3D; 2*T(\frac{N}{2})+O(N)$，根据<a href="https://www.jianshu.com/p/ad9ca164c8ce">master公式</a>，时间复杂度为$O(N\log_2{N})$。</p><h2 id="5-2-空间复杂度"><a href="#5-2-空间复杂度" class="headerlink" title="5.2. 空间复杂度"></a>5.2. 空间复杂度</h2><p>最好情况下，当所有元素都一样的时候，三路快排一次扫描就可以完成排序，此时空间复杂度$O(1)$；</p><p>最坏情况下，partition每一次都选中当前区域的最大值或者最小值作为枢轴，使得左组或者右组的长度为0，那么此时就至少需要进行$N$次partition，因此空间复杂度$O(N)$；</p><p>平均情况下，假设每一次partition后，小于枢轴的部分和大于枢轴的部分是等长的，那么每一次partition以后都会使得当前排序的部分长度减少一半，因此经过$\log_2{N}$次partition以后，当前排序部分的长度是1，于是空间复杂度$O(\log_2{N})$；</p><p>为了便于理解空间复杂度，这里给出快速排序的迭代写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort3WaysIteratively</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> less, more;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr != <span class="literal">null</span>) len = arr.length;</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        sort(arr, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        Stack&lt;Task&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Task&gt;(); <span class="comment">// 模拟系统栈</span></span><br><span class="line">        st.push(<span class="keyword">new</span> <span class="title class_">Task</span>(lo, hi)); <span class="comment">// 压入初始任务</span></span><br><span class="line">        <span class="keyword">while</span>(!st.isEmpty()) &#123;</span><br><span class="line">            <span class="type">Task</span> <span class="variable">curTask</span> <span class="operator">=</span> st.pop();</span><br><span class="line">            lo = curTask.start;</span><br><span class="line">            hi = curTask.end;</span><br><span class="line">            <span class="keyword">if</span>(lo &gt;= hi) <span class="keyword">continue</span>;</span><br><span class="line">            partition(arr, lo, hi);</span><br><span class="line">            st.push(<span class="keyword">new</span> <span class="title class_">Task</span>(lo, less));<span class="comment">// 压入子任务</span></span><br><span class="line">            st.push(<span class="keyword">new</span> <span class="title class_">Task</span>(more, hi));<span class="comment">// 压入子任务</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="type">int</span> pivotIndex;</span><br><span class="line">        <span class="keyword">if</span>(hi - lo + <span class="number">1</span> == <span class="number">2</span>) &#123;</span><br><span class="line">        pivotIndex = lo;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">// 使用三数取中法获取枢轴下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            pivotIndex = arr[lo] &gt;= arr[m] ? </span><br><span class="line">            (arr[m] &gt;= arr[hi] ? m : (arr[lo] &gt;= arr[hi] ? hi : lo)) </span><br><span class="line">            :</span><br><span class="line">            (arr[lo] &gt;= arr[hi] ? lo : (arr[m] &gt;= arr[hi] ? hi : m));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[pivotIndex];</span><br><span class="line">        less = lo - <span class="number">1</span>;</span><br><span class="line">        more = hi + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lo;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; more) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; pivot) swap(arr, ++less, i++);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arr[i] &gt; pivot) swap(arr, --more, i);</span><br><span class="line">            <span class="keyword">else</span> ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i != j &amp;&amp; arr[i] != arr[j]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> &#123;</span><br><span class="line">        <span class="type">int</span> start, end;</span><br><span class="line">        Task(<span class="type">int</span> s, <span class="type">int</span> e) &#123;</span><br><span class="line">            start = s;</span><br><span class="line">            end = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-测试程序"><a href="#6-测试程序" class="headerlink" title="6. 测试程序"></a>6. 测试程序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSortTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">100_0000</span>, maxArraySize = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(time-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> r.nextInt(maxArraySize) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span>[] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[size], array2 = <span class="keyword">new</span> <span class="title class_">int</span>[size], array3 = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) array1[i] = array2[i] = array3[i] = r.nextInt(<span class="number">201</span>) - <span class="number">100</span>;</span><br><span class="line">            QuickSort3Ways.sort(array1);</span><br><span class="line">            Arrays.sort(array2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array1[i] != array2[i]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Oops! wrong answer&quot;</span>);</span><br><span class="line">                    System.out.println(Arrays.toString(array1));</span><br><span class="line">                    System.out.println(Arrays.toString(array2));</span><br><span class="line">                    System.out.println(<span class="string">&quot;Origin array:&quot;</span>);</span><br><span class="line">                    System.out.println(Arrays.toString(array3));</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Testcase:&quot;</span> + time + <span class="string">&quot; done!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Done successfully!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>范围上的子数组累加和问题</title>
      <link href="/2022/11/07/SumOfArrayOnRange/"/>
      <url>/2022/11/07/SumOfArrayOnRange/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b75fc699420d133de1840071af9b71d42b1c58fe909dd8bf4b3fd22703ac073a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 多解法问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 归并排序 </tag>
            
            <tag> 有序表 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组逆序对个数问题【2】</title>
      <link href="/2022/10/26/ReversePairCount2/"/>
      <url>/2022/10/26/ReversePairCount2/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h1><p>给定一个数组array，和一个正整数p，数组的长度len是$2^p$，再给定一个数组reverseGroup，他的数组元素的范围是$[0,p]$。我们需要返回一个答案数组ans，ans[i]表示把原数组按照$2^{reverseGroup[i]}$个元素为一组反转后，数组中逆序对的个数。</p><p>p的范围$[1,10]$，reverseGroup[i]的范围$[1,100]$。</p><p>例如：</p><p>array&#x3D;[1,2,3,4,5,6,7,8], reverseGroup &#x3D; [0,1,2], p &#x3D; 3;</p><ol><li>首先把原数组按照$2^0 &#x3D; 1$个元素一组反转，此时相当于没有反转，逆序对个数0，因此ans[0] &#x3D; 0;</li><li>然后把数组按照$2^1 &#x3D; 2$个元素为一组进行反转，反转后的数组array&#x3D;[2,1,4,3,6,5,8,7]，逆序对个数是4，ans[1] &#x3D;4，</li><li>然后把数组按照$2^2 &#x3D; 4$个元素为一组进行反转，反转后的数组array&#x3D;[3,4,1,2,7,8,5,6]，逆序对的个数是4，ans[2] &#x3D; 4,</li></ol><p>于是返回ans&#x3D;[0,4,4]；</p><h1 id="2-暴力解法"><a href="#2-暴力解法" class="headerlink" title="2. 暴力解法"></a>2. 暴力解法</h1><p>直接模拟即可，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReversePairCount2</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] count(<span class="type">int</span>[] array, <span class="type">int</span>[] reverseGroup, <span class="type">int</span> p) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rLen</span> <span class="operator">=</span> reverseGroup.length, pre = -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[rLen];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rLen; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(reverseGroup[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(pre == -<span class="number">1</span>) pre = getReversePairCount(array);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                reverseByGroup(array, <span class="number">1</span> &lt;&lt; reverseGroup[i]);</span><br><span class="line">                pre = getReversePairCount(array);</span><br><span class="line">            &#125;</span><br><span class="line">            ans[i] = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getReversePairCount</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> array.length, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; len; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i] &gt; array[j]) ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseByGroup</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> group)</span> &#123;<span class="comment">// group个元素为一组，反转数组。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = array.length, j;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len) &#123;</span><br><span class="line">            j = i + group - <span class="number">1</span>;</span><br><span class="line">            reverseRange(array, i, j);</span><br><span class="line">            i = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseRange</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;<span class="comment">// 反转一块数组</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> array[i];</span><br><span class="line">            array[i++] = array[j];</span><br><span class="line">            array[j--] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(N^2*rLen)$，空间复杂度$O(1)$。</p><h1 id="3-最优解"><a href="#3-最优解" class="headerlink" title="3. 最优解"></a>3. 最优解</h1><h2 id="3-1-算法分析"><a href="#3-1-算法分析" class="headerlink" title="3.1. 算法分析"></a>3.1. 算法分析</h2><p>使用归并排序的merge过程，先按照两个数为一组求解所有组中的逆序对；然后按照4个数为一组求解所有组的逆序对（求解4个数为一组的逆序对的时候，需要把一组的4个数，分成左右两组，左右两组每组两个数，只考虑左右两组之间能产生多逆序对，而不要考虑左组内部有多少逆序对，右组内部有多少逆序对，这是因为左右两组内部的逆序对在上一步的时候已经求解过了），然后按照8个数为一组求解所有组的逆序对（同样，求解8个数为一组的时候，每一组分成左右两组，左右两组每组4个数，我们只需要求解左右两组之间可以产生多少逆序对），…，一直求解到按照$2^p$个数为一组的时候，逆序对的个数。</p><p>我们把每一步的答案都记录下来，根据数组长度是$2^p$，我们一共可以得到p个答案，因此数组中总的逆序对的个数就是这p个答案的加和。</p><p>为什么要这么做呢？</p><p>这是因为当反转的时候，我们没有必要去真的反转数组，只需要调整我们上面求得的答案，就可以快速获取反转后的答案。当我们要求4个数为一组反转后的答案的时候，可以知道4个数为一组反转后，它不影响我们上面求解的8个数为一组的时候的答案（因0为8个数为一组的答案是左右两组之间形成的逆序对的个数，左右组反转了（实际上左右组内的数据无论被洗牌成什么样，只会影响左右组自己组内的逆序对的个数，而不会影响左右两组之间形成的逆序对的个数），那么反转会使得4个数为一组，2个数为一组的逆序对的个数发生变化，变成了什么呢？其实反转以后，他们的逆序对的个数，就是反转之前正序对的个数，因此我们只需要求得2个数为一组，4个数为一组，…，$2^p$个数为一组的正序对，逆序对的个数就可以了。这样当发生反转的时候，例如$2^i$个数为一组进行反转，我们只需要从$2^1,2^2,…,2^i$，这些组的逆序对个数和正序对个数交换，那么就可以修正原来逆序对的答案数组，每一步的答案就是修正后的逆序对的答案数组的元素加和。</p><p>于是我们有如下算法：</p><p>设置两个答案数组reverseCountByGroup和normalCountByGroup，分别代表数组各个分组的逆序对个数和正序对个数。然后使用归并排序的方法，对数组求解逆序对和正序对的个数，把答案写在数组中。</p><p>设置答案数组ans，然后遍历reverseGroup数组，对每一个反转分组rGroup，进行如下步骤：</p><ol><li>如果rGroup&gt;0，那么对所有的i从0到rGroup-1，把reverseCountByGroup[i] 和 normalCountByGroup[i]，互换。</li><li>i从0到p-1，把reverseCountByGroup[i]累加起来，作为当前这次的答案放入ans中。</li></ol><p>例如，array&#x3D;[1,3,5,7,2,4,6,8], reverseGroup&#x3D;[1,2,0,3],</p><p>array长度len &#x3D; 8; p &#x3D; 3。</p><p>因此reverseCountByGroup和normalCountByGroup的长度是3</p><ol><li>reverseCountByGroup[0]的值是按照两个数为一组的时候，逆序对的总个数，因为两个数一组的时候，没有逆序对，因此reverseCountByGroup[0]&#x3D;0;</li><li>reverseCountByGroup[1]的值是按照4个数为一组的时候，因此第一组[1,3,5,7]，分成左右两组[1,3],[5,7]，这两组之间没有逆序对，同样[2,4,6,8]也没有逆序对。因此reverseCountByGroup[1]&#x3D;0;</li><li>reverseCountByGroup[2]的值是按照8个数为一组的时候，第一祖[1,3,5,7,2,4,6,8]，分成左右两组，左组[1,3,5,7]，右组：[2,4,6,8]，这两组之间可以产生逆序对（3,2），（5,2），（5,4），（7,2），（7,4），（7,6）。因此一共有6个，因此reverseCountByGroup[2]&#x3D;6;</li></ol><p>求解normalCountByGroup是类似的方法。因此</p><p>normalCountByGroup&#x3D;[4,4,10]</p><p>reverseCountByGroup&#x3D;[0,0,6]</p><p>reverseGroup[0] &#x3D; 1, 即两个数一组进行反转，因此我们需要把normalCountByGroup[0]和reverseCountByGroup[0]进行互换，因此normalCountByGroup&#x3D;[0,4,10]，reverseCountByGroup&#x3D;[4,0,6]，于是反转后，逆序对的总个数是4+0+6&#x3D;10</p><p>reverseGroup[1] &#x3D; 2, 即4个数一组进行反转，因此我们需要把normalCountByGroup[0…1]和reverseCountByGroup[0…1]进行互换，因此normalCountByGroup&#x3D;[4,0,10]，reverseCountByGroup&#x3D;[0,4,6]，于是反转后，逆序对的总个数是0+4+6&#x3D;10</p><p>…</p><p>剩下的也是类似的做法。</p><h2 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2. 代码"></a>3.2. 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReversePairCount22</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] count(<span class="type">int</span>[] array, <span class="type">int</span>[] reverseGroup, <span class="type">int</span> p) &#123;</span><br><span class="line">        <span class="type">int</span>[] reverseAns = <span class="keyword">new</span> <span class="title class_">int</span>[p], </span><br><span class="line">        normalAns = <span class="keyword">new</span> <span class="title class_">int</span>[p], </span><br><span class="line">        arrayCopy = <span class="keyword">new</span> <span class="title class_">int</span>[array.length], </span><br><span class="line">        h = <span class="keyword">new</span> <span class="title class_">int</span>[array.length], </span><br><span class="line">        ans = <span class="keyword">new</span> <span class="title class_">int</span>[reverseGroup.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; ++i) arrayCopy[array.length - <span class="number">1</span> - i] = array[i];</span><br><span class="line">        getReversePairCntAns(array, reverseAns, h);</span><br><span class="line">        getReversePairCntAns(arrayCopy, normalAns, h);</span><br><span class="line">        <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">// 因为当reverseGroup[i]==0的时候，此时的答案可以采用上一步的答案，因此pre代表上一步的答案。当pre==-1的时候，代表上一步的答案无效。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; reverseGroup.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(reverseGroup[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; reverseGroup[i]; ++j) &#123;<span class="comment">// 如果翻转了，那么就需要下标从范围[0,reverseGroup[i] - 1]，reverseAns 和 normalAns 互换，这是因为反转了以后，正序对的个数就变成逆序对的个数。 </span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> reverseAns[j];</span><br><span class="line">                    reverseAns[j] = normalAns[j];</span><br><span class="line">                    normalAns[j] = t;</span><br><span class="line">                &#125;</span><br><span class="line">                pre = -<span class="number">1</span>;<span class="comment">// 此时发生了反转，令上一步答案失效</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pre == -<span class="number">1</span>) &#123;<span class="comment">// 如果上一步答案失效，那么需要重新计算答案。</span></span><br><span class="line">                pre = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; p; ++j) pre += reverseAns[j];</span><br><span class="line">            &#125;</span><br><span class="line">            ans[i] = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getReversePairCntAns</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span>[] ans, <span class="type">int</span>[] h)</span> &#123;</span><br><span class="line">        <span class="type">int</span> l, m, r, i = <span class="number">0</span>, g = <span class="number">1</span>, len = array.length, t;</span><br><span class="line">        <span class="keyword">while</span>(g &lt; len) &#123;</span><br><span class="line">            l = <span class="number">0</span>;</span><br><span class="line">            t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>((m = l + g - <span class="number">1</span>) &gt;= len - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                r = Math.min(len - <span class="number">1</span>, m + g);</span><br><span class="line">                t += merge(array, l, m, r, h);</span><br><span class="line">                l = r + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans[i++] = t;</span><br><span class="line">            <span class="keyword">if</span>(g &gt; (len &gt;&gt; <span class="number">1</span>)) <span class="keyword">break</span>;</span><br><span class="line">            g &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> l, <span class="type">int</span> m, <span class="type">int</span> r, <span class="type">int</span>[] h)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l, j = m + <span class="number">1</span>, k = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m) &#123;</span><br><span class="line">            <span class="keyword">while</span>(j &lt;= r &amp;&amp; array[i] &gt; array[j]) ++j;</span><br><span class="line">            ans += j - m - <span class="number">1</span>;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        i = l;</span><br><span class="line">        j = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m &amp;&amp; j &lt;= r) h[k++] = array[i] &lt;= array[j] ? array[i++] : array[j++];</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m) h[k++] = array[i++];</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= r) h[k++] = array[j++];</span><br><span class="line">        System.arraycopy(h, <span class="number">0</span>, array, l, k);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组array长度N，reverseGroup数组长度是R，那么时间复杂度$O(max{p*R,N\log_2N})$，空间复杂度$O(N)$。</p><h1 id="4-测试程序"><a href="#4-测试程序" class="headerlink" title="4. 测试程序"></a>4. 测试程序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReversePairCount2Test</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">100_0000</span>, maxP = <span class="number">6</span>, maxReverseGroupSize = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(time-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> r.nextInt(maxP) + <span class="number">1</span>, size = <span class="number">1</span> &lt;&lt; p, groupSize = r.nextInt(maxReverseGroupSize) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span>[] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[size], array2 = <span class="keyword">new</span> <span class="title class_">int</span>[size], array3 = <span class="keyword">new</span> <span class="title class_">int</span>[size],</span><br><span class="line">            group1 = <span class="keyword">new</span> <span class="title class_">int</span>[groupSize], group2 = <span class="keyword">new</span> <span class="title class_">int</span>[groupSize], group3 = <span class="keyword">new</span> <span class="title class_">int</span>[groupSize];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) array1[i] = array2[i] = array3[i] = r.nextInt(<span class="number">201</span>) - <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; groupSize; ++i) group1[i] = group2[i] = group3[i] = r.nextInt(p + <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span>[] ans1 = ReversePairCount2.count(array1, group1, p), ans2 = ReversePairCount22.count(array2, group2, p);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; groupSize; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans1[i] != ans2[i]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Oops! answer incorrect!!, ans1[&quot;</span> + i + <span class="string">&quot;] = &quot;</span> + ans1[i] + <span class="string">&quot;, ans2[&quot;</span> + i + <span class="string">&quot;] = &quot;</span> + ans2[i]);</span><br><span class="line">                    System.out.println(Arrays.toString(ans1));</span><br><span class="line">                    System.out.println(Arrays.toString(ans2));</span><br><span class="line">                    System.out.println(Arrays.toString(array3));</span><br><span class="line">                    System.out.println(Arrays.toString(group3));</span><br><span class="line">                    System.out.println(p);</span><br><span class="line">                    System.out.println(groupSize);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Testcase: &quot;</span> + time + <span class="string">&quot; done!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test done successfully !!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组逆序对个数问题【1】</title>
      <link href="/2022/10/26/ReversePairCount/"/>
      <url>/2022/10/26/ReversePairCount/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h1><p>在一个数组中，如果存在两个下标i&lt;j，使得array[i] &gt; array[j]，那么称这是一个逆序对，求解数组中逆序对的个数。</p><p>例如：</p><p>array&#x3D;[1,2,3,1]，返回2，（2,1）,（3,1）</p><p>数组长度len范围$[1,5000]$。</p><p>测评链接：<a href="https://www.nowcoder.com/questionTerminal/bb06495cc0154e90bbb18911fd581df6">https://www.nowcoder.com/questionTerminal/bb06495cc0154e90bbb18911fd581df6</a></p><h1 id="2-暴力解法"><a href="#2-暴力解法" class="headerlink" title="2. 暴力解法"></a>2. 暴力解法</h1><p>遍历数组，对于每一个当下下标i，都在i的右边寻找有几个数小于array[i]，累加到答案中</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReversePairCount</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> array.length, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; len; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i] &gt; array[j]) ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(N^2)$，空间复杂度$O(1)$。</p><h1 id="3-最优解"><a href="#3-最优解" class="headerlink" title="3. 最优解"></a>3. 最优解</h1><h2 id="3-1-算法分析"><a href="#3-1-算法分析" class="headerlink" title="3.1. 算法分析"></a>3.1. 算法分析</h2><p>在merge sort的merge过程中，假设左右两组都是从小到大有序的，如果我们发现左组中的一个数a，大于右组中的一个数b，那么可以知道右组中从开始到b的数，都是小于a的，因此我们可以在线性时间内，求得左组中的任何一个数，在右组中有几个数小于它。因此我们有如下算法：</p><p>假设左组的当前下标是i，左组的结束位置是m，右组的当前下标是j，右组的结束位置是r，设置一个变量ans记录当前merge中产生的所有逆序对的个数，只要i&lt;&#x3D;m成立，执行如下步骤：</p><ol><li>只要j&lt;&#x3D;r &amp;&amp; array[j] &lt; array[i] 成立，++j;</li><li>收集答案，此时右组中有j-m-1个数小于array[i]，ans+&#x3D;j-m-1;</li><li>++i;</li></ol><p>然后执行merge操作。</p><p>上游的排序过程累加每次merge产生的逆序对的个数。</p><h2 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2. 代码"></a>3.2. 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReversePairCount2</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> array.length, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="type">int</span> l, m, r, g = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] h = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="keyword">while</span>(g &lt; len) &#123;</span><br><span class="line">            l = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>((m = l + g - <span class="number">1</span>) &gt;= len - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                r = Math.min(len - <span class="number">1</span>, m + g);</span><br><span class="line">                ans += merge(array, l, m, r, h);</span><br><span class="line">                l = r + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(g &gt; (len &gt;&gt; <span class="number">1</span>)) <span class="keyword">break</span>;</span><br><span class="line">            g &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> l, <span class="type">int</span> m, <span class="type">int</span> r, <span class="type">int</span>[] h)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l, j = m + <span class="number">1</span>, k = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m) &#123;</span><br><span class="line">            <span class="keyword">while</span>(j &lt;= r &amp;&amp; array[j] &lt; array[i]) ++j;<span class="comment">// 只要满足条件，j一直跳下一个</span></span><br><span class="line">            ans += j - m - <span class="number">1</span>;<span class="comment">//此时右组一共有j-m-1个元素小于array[i]</span></span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        i = l;</span><br><span class="line">        j = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m &amp;&amp; j &lt;= r) h[k++] = array[i] &lt;= array[j] ? array[i++] : array[j++];</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m) h[k++] = array[i++];</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= r) h[k++] = array[j++];</span><br><span class="line">        System.arraycopy(h, <span class="number">0</span>, array, l, k);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(N\log_2N)$，空间复杂度$O(N)$。</p><h1 id="4-测试程序"><a href="#4-测试程序" class="headerlink" title="4. 测试程序"></a>4. 测试程序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReversePairCountTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">100_0000</span>, maxSize = <span class="number">5000</span>;</span><br><span class="line">        <span class="keyword">while</span>(time-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> r.nextInt(maxSize) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span>[] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[size], array2 = <span class="keyword">new</span> <span class="title class_">int</span>[size], array3 = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) array1[i] = array2[i] = array3[i] = r.nextInt(<span class="number">101</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans1</span> <span class="operator">=</span> ReversePairCount.count(array1), ans2 = ReversePairCount2.count(array2);</span><br><span class="line">            <span class="keyword">if</span>(ans1 != ans2) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Answer incorrect!, ans1: &quot;</span> + ans1 + <span class="string">&quot;, ans2: &quot;</span> + ans2);</span><br><span class="line">                System.out.println(Arrays.toString(array3));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Testcase: &quot;</span> + time + <span class="string">&quot; success!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test done successfully!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二倍不及问题</title>
      <link href="/2022/10/25/TwiceNotLargeThan/"/>
      <url>/2022/10/25/TwiceNotLargeThan/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="50611f38faea083b0cc4b4a6f70c7877a53f25ee54e18cf947c40943af64d701">ea43e291078290804dfc12960269e3462d8a335812b0e86215b67b32576d5bd8f6dfdf5ee1f58f76c0827297f0a33ef6583513ce9ac3edc6475c455935fc34589630f70d35881c3c1c545a4bd1fb58bcecc374705f14632b6ecc7d4f9a0db4c8f7451dd3df73e084d0bbb81e98f83a09bdeaa640f3c85805094f2d4e3e0ea415e5dbe95a46060b7ff701bf832d27cc3141d97e38be05ff7d384f086abbb78f24c2a15ff3a09127e5e91e0f75c463432eb2e5396ee2b162e1c82e6b8d63e0cf728a281b7060cbebca12270b4247104ca744104a4b76aff100700266d3681ecf2b62afa6db3cd904a3471168ca87ef9c532e985f1834c92441125287d05795bc2c03ec2e4dad90569020b2aec3969aa6e91e81e206b585211bb3c8a1c4e21ef69d0255de9239a8243ff57411bee15267d23530eea2b65dde21bd2031dc783fe78dc438f3dbad66d244030c2973f399b29f82e1e9934130268ef223c48aab2b5fe749540e923612213698f73c383d1fe795b156afc329b655fed46c4f33a44cf5bebf94b3d5320d5f1aca5b19a688305981b514ddf2864cf256bbe59c7ad176fde49c2ba71683fe754e866a70f48517cce333669aefe22941f93d30a4a5794a0b9312f1273376131dea0ddd8a22a81e9ef65b4020b87c0d0bcc97d76cdf01e3fac4027f5b6d31ec71090f8dc2d5d84cb21be57f58dee7fb7f5f0b7ed36b908a34abfa9e3e1dda576c5b3ac82ebccd1cd4f51f076d231ee12f10df1cce9de2a9bb75f3453495f04b5bade843929b23da67eb3944d89d9e45381857ab7776603080404515ae0453750604fe028d9791841dc4a0c2585e62e1469965c8b172a30e8c1910500f851064c8816e4dd23dbfdd0d99d4687791df4a97a00f7fc177201955bcb41857ae9a2787fe3d673de473b0efd532695877bf90d87b2fad755bb4645ecf79244d9739b3600669ce9d8de875f77829bf1123ab85ee2c6601402f427f9cd7e072f16c2ab4f9dd4aae10888970337bfd1106270116b6823cb8512bf3cbf47948bcd2244cdb29520a3f14bcfe18cc50ccbbc6f9a9d077e3bfe61f3b93dbb5def4c1451d104588c48b0a7db1d5bd664a70f70e4143092325e294061deb03205b3d5f4c5ff53615dc96bc036b351281d5dc101469c3cea780778f5c1f66534ea65295cc18fa5e8f6d11989719495cd963e062e6e3db19f1c85ab69f65bcd4c3b7ba5afbe78435c3ada4c86496c2f83f663e3eb7a8ecbff3080d4c0eed9f7d4cf2c7f4e3e35fa2725949edf4de71941bc9579e4bcb6ee4ceb45eb5faafa5f26209751005864c85eb188fe9ce52ab1f8eba77fc2f58263aa6cb6d879c786b3fd4cb1a1851887f3c7f391a80f0adab750147b093334c658f7d7558cbc2a3132ba422e112e651b5286183afc771dd7096ca8587abf931c7e3e10b91d99b9952d8370eddde303c8ba189f20f17ba8d096d6b5c9ca743a266b6230efc7b0f247ab5d1ab379388ccf247a47d8775048d2be10286aef52804c5db88548e7cef01e8764ba62611874d4884081eadee40be047bd40bda29af2c6c221ddfbdf8cf2cd922de28801ee321540893c27fe1e5b789175b651703ec6ea080fcc14a7d6cff04a11005b84c8cd8cab070de86a7369415908464587f2a7e20397ad1e02d469d3e53466879bd54eee4c6d9281371ee78b20395ff00bf9dd5325a0b7ef0e7dd58bd8895f6427e2ba444bc3ed2f6ffee026e0e0fde92c976e20597e7ee24524ca52ef950f22a19cfe35beda9a780663846ba81cc7eba9378bf95a3d208b627eba17794e1636b69b4c6783f1e9414dc912bbc18329182258b6274601245a703547aff35401579196dc34903d35793315ade6613b2d650ad39fbbef1cb4da0ca563fdbe5132b9db8d50578a586d8895698a24d31de771d5662136644927d92f144d596e08fd80eb3d35de756aa8273a93ef472a2ec42239e7834f91e000fef04ae3a6aafe7e532c305f6871ad2683fb57d30b47ea7d7019ddecd1fb19d7aa4789d2d886119215755b4426e144a5146f4df906d64947c2f10e63de5c075d7ebc7f0a087bcda64fd846c013cad25a335c502c41276a288385c41ccb00e44d9a4670c3d17b13ae296ec0f17f36cfd44343ca9c7ea9cecc87d8e61c7d0bd9e430736784af741a54d4a7d2a4399d656e0fe6799d549cb07189f56eff962bdcae14083078384534c6dc9891ebc771bce257bf27a739d4076125f6a733054f4ea723678a8521edcdbb7b3db3aef469af03ec532aa25599eb76b4872d07ce13d2e0c6038ef36d621f123be0b8f230a6019d20fedc0991585b71a2bd74eafec62030f6d412709ae82e9a0bce50394d1e61810b4ec1993577be5eb9fa7daf6a721d5b7b833ae948c2e99cfd9e1836d0d324767ed416fa4912700fde5f17f3b8be653f373744e2a01e59747a8cb26016137ac76c9bff56510032fbe2389753deabb4b43d02a098eabf1b98fd1fc50718536cb25e950d517916b36913a94eab56fff6d42c152ce67895f27b9d9442788fc5e2253b24d9afd8dab5b1ae9f6288d8c194ed8869593550994853ea5e38166f2d494c877d706ae219bf4f588995ef367696f59c56559df3150190f841269446dedfee30ecf9556439b9133d4bf5acb7d57dfb8b4c34f91245937211ed8ffbf9dbc50cbc8e0941b384b90a3887aa3ff2c57decc0cf554edd4d8f2186dc63b3469680fea43b842d121c31570f480f45873dd1f2e93b0f1836fcc72dfab0f010db56b08c49675fc28bdf3c57fcce4a5687919394ce8d981c165908e88c23e338fc9b48e702b2a645315bf572d99c4663e404f5933c7f75770e320c3436d77c461f85530c2792a27df1bf52f7a04a978234c63caaea0a229daa4aafc0f7762b87b8d092518c433288c82a51fbbad76981c07d18a9112f1aa64c200d928dc4c3495c62371dd8cf340a3bd25aabd481569d1a5b3b984ade638622b3f0a1cd2a0784a0ed711556780727394b860b4bdac107c59dfb164b8af826e32d67f22dfe4019af176b03c758689611bc0debe1c805c33c99fa5cf737bed19ce07009bf314f42a0b76ebf939fb9b59bfdc0c93d0073ab5cf350e64ec0dc204c6ffda0a46f4f103bec983eabf545a198892d5c84ec5d3aa917fa642540aca3a4661e2a1dc7ab9e90d093fb145dfbf48e2d7a288bea7e89f1ab2808275b84258a928b0bc6d03401e4497df8ac4572c50e3d91f0c5bffb504e1e6d7ee82050276d1592218a67965c251335d47301958349bf1249f917addd1526689052e0f7a1752718b5704ff5fd4b52e0a669ed6195c8bf88c13c636f0b9e57879dc886f46b0c2cd9fc091621da9094d2ce5e9b575aad5ede3b69d472be312002f4c59a186791272730c8f1850ca1b6baf5f128fec7fe4497a2d2ad9c56e579cab689bcbfb6dd6569b0a088725ff0c4b38e4d94a2346ea2785f3d357b64f386b0b34ba179083b91ced5f9dd0557fcffcf775950f3ee4c7c2b5acc525e7a2b0aff6e57439e67dbbde07c5015af22f6f263a4792c5f19f16a083eb4bceddc612d91e27a5321d8a808591446945af1a17bb36c220b245b327a0a051ddf84135f248152f79d60f7138f714b0eaa232a8ae92be2059e27a61f20fc1814039773a837a03fd28f8909c0886c692259694a3e93dacaab694165a8fb4846997bf1d2b9e82904f48bcd05baced77a336e1ee3d41e34acfc8533b2a0e04be6bed0898691a321ef7a3d903f8a83550f4ae43d572374769ec3cba2b89427ebfbc7ee7e7fb5d5c56c170c97bd56d530a70f0f32bb650d6e0b1d1693470ff5b1be5b8986dc2e017a3685e89f8b5509081b80bbfb94bb3bdc7eafcb9a6b1ea6cf94ad63f3c4de9c8f3fd49659cb84e9e038228df3499d103d9ccc3421a72e3d0fcba7594c99ec482125b0651f13607c68cbe5d57eb66f769ac2fb700d74b21946af816158f272fbcb54a961d9d1e3ba687d9fce892a37a4be9c6889ef53698165acc1185d69772487e27eeb254035e43822ebd743b5159e7d6c76aa72506c1193c4b0f026c889f35d7d83254329c871d5bc7bedf1df06a4c178d38710a64df2e37970f2dffb4de68e37209f962c98ab6a5c40d565836013f178b408319152f2818bd166dd257f91064e894c0e54e92a3b5b3111f84677ac50f2216040044e7beee4948c7c6bf9f8c0495848d21b9cac56a5c4a12cb27c7917cc125398bc221f3a8b99ccc7fcb9cd7d84a34dbb7ae6a90e25b041f26e16f6aebfb5a6c57f9f762850d8c2a24b4b07b042bef5c7fb3beb4adecfef67773255bd7144749a1074b0fa674a8aae19661e78e246cf5b06ed206141d36b6786883b41c47ddbbd267e82bc3415093a590a8eab419b967a757ae716a4d84991d003d4f38f65927f48a9b3eb30cd072ffca929eb9ca9373d16a01b6b3231a14df895b444f3a32db2ad714b2c5f11689ffe789ff1ffebf0006becf5c8691699be2fd3f1be0318d0c02f71170ea1a3fec39cc5d2044c95a3e757f72e80efe451d5acac76c7a2f4dc196ebbc667d42ef886d64442be08812af4663a058fbe04a4dba555f56537fe43790925aa1e4e29bc9077191878628c375180faeb73c02512c44fe2b52df869627b67cb34ab88428c344ef023ca1a022255d4d2983196c60c9d85f0a2dd05ff3ee026dc6dffb12236d1fc64dabaa79e1e5ec48dbc5874628fadda0f38bcfe9fccdf49a26a6d0844b6e44204a41f9cfdfd94136a510688ea12e9ce906c43742484e5582c999f23f15cb54b7a09b7cf1a16795640a47e9454789b88d15b91777f6340f238536fc99a30fe2681063165372f1bf563a229d3eacdc737d2bdd653428b0b7c965e8693d6ad4b934950b70988547e53481b1b966162e1193a25a2f9ff644622adfcc45b97c277432ae4df4dc6c683b9cd87aa3c84b48ac22768048258f07d6dcde9c43d1f3bcd64a4da386865424a6f0a59ebb4464232a16f895b37d41b47535e07c4dede21009f27880263801d1134697c4429e4a4289b0dfaa8254c41c6d8c263d2a1386716dd3e0b6978361f0c2f83dffcb030de9013b58cfb1ca8df679c43d8f85ce308477929776f6a75f918765f9e6d35108985d6ba4dce020d9bc488d5bad745d9844212b008978d8d7328a04baebe9a9e9d5b49529ece25af66b78445ebf960ebd74852fccf2c42e0cda31af5270bc0542c36c4e7f37d410884b652d7c182597648c239c85d7847636d8a34ce6d7c499d74415ddfb2caf2505eaa0687fd2a717dd98309b847d8c173d9ef6680205732fce0510dee96a632643c7104be755b808d764d70f2463ffc490bbe28335eb76688b92780507bf0a8ccf388336c815e265ca4b0e77c3b7ed35eed5cc8788e4ab2b2718f2acfcce310fc336b3da73fe241f83fc5045832fb12a8efd0a909089e5636557c63c23d7d1a1873973559eba898af4fb66582857e3f5d0def69c268368be62314fd324ea43d06f22ec0f2f858fec2f4ebd178a30f33e386dd144c77dd150cf6203c4f7ff548b23e65efa900566637fbdd5fe18e092b547b4b49d30bc1ae810f509c47d697fdb9f091ea23c63f1c4f02b0d761f18b8ed58e4959eb7c573aebf69146b0b4e5ae48dd1ca662cd7950abf3935e305689c4b405e504961ac796fe50c7cca59dbee24a06b4872fa75060375e25be83d736ecf17d4e998a4b7a37d31aa575d0570a9a6ee0ebf412652660d0e14a347a1146b9007d47aee708ffb2d142a373617bb7e50377e5d534041061fbd8b976f6de7c5f0d2b619d50ad6fac823d7e4dc8c86289c387072b6e9fbfaa970591796fd8f8299fad316eae820f0c08b92615e442af2b7a1cad5e9b4da06f44d4685c26ed9cea318069a33d7f1b95432a790f5b3b39d1094f97855cb649c33fe503f0952bf3082753c67c1858215bd45b3314b126ba5dd5554929ec303eab12110df18858d1194c4947e8f3cadee0a5f58eac3216fde4950daa520788287aba631be91939d8fe6f0cf7c3737c3bf71961be927e89b3c5857d0251affd3f95f37e856efdc0d550f5a04c45fdea996135e7cdd7ebd8d099c0f6c6d35a5789de1edea47aa50e02aa47e5c7dcfd00650641481406d01c62a8a60ce877027a097dc8259b637d1ab772e6d51072c13923a2fd63d988428f5f7652d17d7bcf189893fc33f37429edfaafe4370b98f106664f4c0101a090788fc179d900146ac3ed1b9f4bf11f63ceb7db5157e850bee641c46ff2ce920471ffbc3300be4c66d007ac190fb9b39acda56da08a955373a08b63cdb823f121104d8651352c7d70f29f0c107638af6214ff7e9064a850272ea2e5ba1970a556e1ed56f4740e665e83754d1a1254d04383a6e0489f8a685801bc790e61c438a610f07f28867964277dba2c8dde0e1fe453ebb824ec6750cff179dafd47279d10c59d917944a4450f1fa981cb63e7cbf8817f8ab7d0d2d622e7509384c7f414a2c0fc173d50dd0637ebbe8278f705149714bd97594ad44863a911bd76aade3e851e9cec8c762fab73215ab47f83ca6b1b34dfe909acb4e90f177f889a78d4b53fdcf7238dd6aa92a9935b1657b8467f2d91847e82d3104bcae8f475feca01688da2b72c11408c005696503e38e854fc5bd326a500e43f83c23c9d2d5972b65a3f87199302e1db99d8a654c6259040994f657c96c0a5a85e5285c9198c30ac0e1391a5e3897511bfb584582017e2925543634f0c47c63471420fb9a0107ccf7b8805933ecca81c9c0b23991c359bdae91dbc73a4fc7f523a4e1c7b07c7097f96693d37ebf143353ab1a6e53b25f2969046633bd76eab0255d45cf19ee775964537c3f050210d21adb8bed6cb31b33051ba6216ce31d200fce45ff7aba6a74cd7969bbbe6a1edc13f8df82c8e6de8e1499f9d1b5b5b74cf3cd4c4552eaf1fa5ccd02afb6b9a2f3b61e69b79ce2094a7011074ccd6f2bbfbaa3d3b0f7f63edaeca67428f4848499b329ffa14fb31b3dcd4285a01bf19f7d439f9b879915823cb2ca5116cfa927d6e854b8a2badfceeca5e7de7ee27aa1eed6bdae8f02052c84601a7aa74b2f681cbe1b4763d45bc7f5d4657e9ad79c7cf88024ad1b0f0d4164adb6b3fe8a661cc7ac34db624f0662aa87a07af9ea005bf8079f7baff66208d206aed0e1250293779ba050bbcf93e7f07939d1554217b39ee1423d30a1de05e1ccfce98ff1c1609707ccb37f3ca3bbfef5060b3b30c44afae2bcf8ada87ff270a80ddd251a0d88857f185d58722a83a0ab36a941899426fb537e9c9c2e7d942849503a0698e9c4609b195beba4e03e89ea5c307134a4f0a1ba03edb4f31b7ff9f75bda836069ec915f0930d9e97aab83c40a1e8218a81b6dff1c22c28122e7cedf15bda223ea3e59cff2943e296b7983d1630fe11bfafb28a05fa4a30975268c6d80af1b02de80dd8e441f94801c5972cfa219868e2e3cc59b72a542c079bc7a921ffc42c276be1b0c3aa035c94045485373ab5f376a3aad854f3fc3d5e0c4fdf380810c8703b80067d311c43503b95d577988334c2d99a37f49e72d30ba537d1900cbfbeef6dcad1e0def0e20d22302ab5454a934ac313da608cd92dd5c684ca6a903a69949025f347c491830d0e25ac5393dc0b8aefefec6fe5d069a49466a9cd84b737f0bfeb4f23469abefb9f42bdb54bd11c66d5d2584a53b2d83f9f8edeba19f7e61f2f5da993bfc404f114292d6af425a88578699fcd7cb795f86a665978e0741796519ea31f3bc15c80adddd8c5efba0d5807c60d40913c05f5957c8e9da8964919a7313255323d400d7723004dc22a40527dee21962a08f3aac9dbb26a42901af781e822f26df2d8ea18f2052670deb8f07f8ff9ebb20f5b9216faf5540a924cab62abfc1de77de7ee2314fb95d77ef3667cc24953c80c2dec58e1f79f0991668c83ded18474c8811a397ef266e65727443c8784d3be2cd51e19123c0d478d0858ce7d0ee68e1911699cb4d192ce1746ce0baa7e9d3b7e5d4674fe16c171bbb5c9a1f48bbc5263103bd53d88097c0e9b3195848b424bdf663478c6f4f90d007031e7e9ab73ec02f65f9360df6ff848ecf704c6eafdb08e090364b4c1e7d926d355cc6a29e42337a434550db5c0a91b6cdb0350ea90919d05c86a14e7dbb4a6848399cf3cf4d5e4509816a198addb7522f41c27e0b3e72504e7679c7801474574c60ab9e01e40ae6af1313a104dcf41cd44c3f99718e1565b5e033e5ae2aa04fcff4011f48e9a0720ace65986e112c41108aaadeb69251d70153579c8b1e1d9890d613cc61cea1720545a6ab989d3cc59350416737f8b41f07e57809b80c084707594712f7370885fefdc4631ec8ab85c12e9a6afb6be60c0a1c21179e7902a9153c5409977422806528b463a4d110d55eede8bc55c8102331ea4179d9ff1712907ed8ab60083419119c337c47659aa79c994ffa6b3ba34c38f18cd2076ede03b26fae2853ecd5a9b7d3348dedecd224b6337ba4a66dbd31f5e26fad11fc1c9393613f8341d8e738da8e0eee94a2eeccef5cbe4abe1988f56273d72bc6834395b290dde3cb6dde3b18677d4e025758418e3119686853e50eeaed43b8b4e6971acad1bb800445e255ae10210ad27eaf445d3a3354b52ee78ebc9ad7b48ae6132f0afb0ad79afbf61cbf29cbd01b34c72be5f20b9c1cdc03dbadc599cd1b2e18fdff7db394b0e6d739f4432463f9ce9847aeafab88718c7f9fa84d6b480e3beb686ef3e7224b2f2ade89bcfe48eacc90706316a105b215723d90cb5be9d872d815c6fa1eb82e005af33fde3c111785f013eb09e1c12f87798dc8753fa2b6684d70581d6c64bb17696ec3563bceaed2f528f2222c283639fad45dc0f74f820d248e7a7b718d67db50786ce7ed6ff502ea8f997f2b6b3b69d9d48a507134db43e53e74e17e82d65fa05505691b7c5a81215dc96ce73ae97dec9bada6b0719b39def44005c9255aa3bf5e1ec9d57e2a41148a216b5abcbbbd6d787b2439cb6fe3cb7b2a4d786e055fa329bb410c855c2e44a602e711a97b20d6212ba6c2799d8a00fce5c451559e6b5f64c9f5a9f9c99f31ab25bd8ba6143618b9e16bc208ab4ca6180e11ddd446a75014fd30cf9ee8f6aa261cfd60631f614dd2ce1636273b5a02d182688a46bee8368772fe3bee423ac37377ab33942170ee338e77e715cd914f1426c747ab90a45f70516943df7511f31f4e7ff844c63b538744f082a2937bfda9632b9a2d172429f64cd0b36822ad39e9fdfb8dc2250495a39bec02866eea08604fd436a6c9a82fa5aeb471a44de13960574f8fc2186f4602760273c6e1cc03c17e67690dbe7cbe28da77cbdc7ea019abaf8a5d3cf27403beb91c4fa7f6a3f9b81899a8bc7dde049af8e8d658360f45b1abc9bbf2260dfb3cbdd8dd9ca129fd1275abb79559055e562aaf51fd910e5cd84cc6556ae5be8018c90dea36345a69a04833ce2f107db823de4d343c36c340ae3fd398950ad4e162ba2c91fce9c155e9dcdff1c6b1f13aab5befd52f3991516389a1077e6423ab8c073811ce7c2ea86e91633d9810372648b9bb4b4724701053bbce04dc29476d77d1135d4b0fd52831ec6efaa51d321d04373d79273fa8188399cfb0f1e4d9d2b6bb2cf4ff077b586d5ceed8b21399e64ce4bc3233a311dc5c2b6383f47a47749f0e980e6853c920d4aa8603feadeb60b9655fc39b1aba659f7585c5f5dd7f00b08f961297334938e3e4a771dee5464b47bd1c4ea58c5a3d8602e454b863941cd80646aed2d0cd7f371542862ed6256071180dfad2c187ee419bb150ab14dfa07f2698e300b8ba00195d97c5b5aa4cfe7e8261fe067b9e3f72fb57928fe10fd5708c96359e1bbc721f186d8e44d0deac31d153d2e67087c1114a390610611653705bd6dd00c1100be4bc5526df936b521871bd149b196ee37abf283c8e5d52d20b3f30f6a97fc46ef3e3592f3c02f3be8b897d2ce50fcbccf8b728f02af61cbf556ec1c1c7dc7d7b05d95da7e2964c3503362376e8592b120dea082a513c4349f4ae7969e48d18447443475123f0eb656d28f4c34666b873a5dda51a6661c846df789bc46098c63c3d79170dce8aba01ae530a1ceeaf260b375e1ec1c2f4d9379198314f0d7525bbf3fad18e123efb1b36f57520461e9b4c1a73ff29cd6df30039d0fd5389b3040a83905a2aea34b5d05eab4c3753730f2677d044accb4216e6ae4493eee0eb2bc07544cfc753653fd69be91d781ba3ac662cac576f78cbbfb787b22195336e05b3c26faf7d3a400c12ac90bbf70b8b66f76f4117828a2d6d9f3a751e13bec092708177a951b9c3e21b4d02c5509e79416e1161b17d569a7eb7b5874470c42a57b3f0dcbe2570bc87a2504bcbf661c485ff4813fc44d2f5fa0999d8ccf3d508dd05f9c8c2f8e43e7c2b1e7ed7c3a81ef4fbb6936bae3a15c8913bb3bb537013332a2ff14fdccd1d264685983fbe1dda345bf24b9637f68bc0ac7ddab7fb371f06a3f8ec247afb23e73b8da8f79a57bf438191ae24187aecfc512f587355ce9928193c91f2e689c860cd575b4657605262dcb457aad2d86cc7e09b61a1280ac36e61b3fb16cbac9db9584805a9a38124458a8cdcc8d5df976418a659e530ba887c526a36d5f38bc752f57ad6cd944e06065161da2578d3adfaf55792c2c0db73bd59449453300b04cce5d450f5d9fe02420c065c9e4980532c847f72b6e52c28cdda17011225d45dc0837be5ada5765da77a46c5b7ba8172994653fd3408e3875a2fb4aca2fc5b0cd95b462166b57df0a2667814fc66c343867ce750236f265b27f21c0ba180cf358d869fdb39afc3549a59340fdb408c26540752c62ee7eb1dbe03d9a1484a1ceaa4ee8fd70a45b8c5524466a8dffd3059acc1132a8915ada56fffba22b0351a82060b3fddd8acf3bb8407e535339e0082e389a328f4660d53c889644e5dea3bff23c82bece024c041b1ebdc6ed51037689cb2c14cf5de64de6475917e1d8da512dd103d8a00ff87975e71ae62c47761b24ab8350a243a70e6be70aef5134bf7b82d1c72041c0a65357e76bd89ff09abb38ee7289c09867584d88c66bfaf99cbfab4dbd4e1e4b4db11bb2bdee56e20bb031f004d96e1aa4a2d5fd0e6633e38cca76a38a232262320441f8c51d05b4a82148f35184d4d485eddd7be24ab0b44456468a3493df6263ae60a5ceb1932b761c2275a9dba610c72aada2ff14f90132ca8f60a59f1fab545d64dacf2f44138feda3ff530a9c10e39ff8972d39507995885671bf152e76bc11facc706385321a9bdd7ff9e828466fcf1f4dab50870fa80e543107b62900aef86ece15e5af5087cbe8ab967ecc0a7265eab98a4c12f811d4321d337f2178cc599718fcccce27d44f0ffc3c7bc68b36dce1fe42a260386af1fd156af90038c91f6c5b7c93d4ec25ffc0812c5bad60a20c974515c7e4a706815162768ad008e70817603d1da82f94dc3994551179ad3fa91af6528b8f1200048c90c64fadae7cc8eb1cd5a65daaeb5bf32af69cfa67b9ee67e028b523a5385225d94aa1050c1cd7b66a11f61ee7c25215aff511476ca4f91f7fccf99804090dd944a97dbccd0c022861bcbf6e230a3feff099e88ca41164acdd26ca1547a4785588e3a4d60f83b97dcb25b01c5726b3f554593ada086b3c76d06010807d948acc82d005d02ca951524ca5165bab61795cd94bd3eb221182177f67fef555fe3f79660ecb60cf6cc6b1cd32b173373871f029800c873d8cdf240b94216c6fd57b53fad3f713746179b28b7d1652b60851a3002377ca8bffcc2c4b2b27ffb6f2d081a09f909fa62ec6723f744dfaebcd51ae43b43188f6603da6531c84790fac65890a8b1562f67710cad0c00d8ba5f74067e7841ca9cbd9d8ff4409ff9996199d799b7eaf97a79859f21345f5b5921104c2d203121720c025af70a0fe15e4ac0a9839d82afa39ce1d006c51d277abe62bb6ea95ec6f03d589794ddaebd90c0572f5d65e4f6adc2cffc4f87c2f5ba9ca6023c1c23ec21521f1a01b74eea2db996ce6f4624067e4f3345f6d0ba4e8a5948d02c77be94ecad505c38a2e16e78e7f4fc02faef092766ecbc8074b0fbcd5f9ef6f55446775588194b6fc73405b4d41992588ecd3698dfb9515fcdf73241d3c7e828ed14a9305bc9d1403e580892839706cf9eacd08a1b64ff5d2989056f7a279288d3d0d711572625147f41d6b14bf0de27601eebba4036ec86b68d34e688f1746ad622ea9d95ff0ded60e2f310be3cff16e53c98d76bf322d0b719c691ea33db277ba04c5fd8750b08aec1b68ecd3290874ee365b0ed99ff9851e8bf9e2d084675784ca5a3977e302f98274ef1b4332df9c347831d46754f116c37d24aa9e9781c07189f117491ef035c5d1502333001781ad0434f4cd6689bd5cefab1a9dd650b7f5b50a77ac1c150fc16fb1241d73ed09dbdcf362453055f80a07796ee19f83952beaf14c60e1e5267c6a679fddb694636e331483da952bd4238077b63ec4575b8da9f57c2a7ec88cbf357e139aade825d58c7672f0e7c136f47ff1215688b278ef9da96469893d92a1776efc737a71b67bea2cdd9498accbba9dcc274576c320ce0dcd5a6b410af8bede745fc5d0ea70cce8743114331b36869fc70d66269c39abaaf62aefab1aff41189deed79c67ff1316c44df6ce14ff30561dbb502775ebdede0a3c2368d395aaab6f0dba9cc4dae4638e78418baa9f950e301f099df6a0b3d1056e40deb4a9bd0c0f05ce2393a22341f835f9db060e6cc90bdf86eb5f4ef290c8659fb36e0b71ed45b3da6a02e625ecbd2d82976ca65d00ec6f5283e8391fc17889cb8cd857fcf17ff5f1e155f47c84fc829298e074f1962068c552fbd4cdd588c660c85498c241ad4445a70e2c46788eba43226d32e37812ab4959411befbf012a74271f64165978da3d3ddd7e31cde96e8411e649941dfba912cf0320df88f3134836eb4801b5bd07e40308935ba91bee981380ea1b33b88ef3ffc8c77fb9c75895184495288d5ea311ee1c3eee9034c8730491c2b33711da8adc0eef65b7ed1636567fed3e52af283264718759862bd6f3bb337332d1598b0437d33c19ea152907fbd5895e4af34896a84390f827997a6205a5e0af33e6119ed8875e9d1d64a6e2096ae650d39920277a2a7a6a55ca72c0c536297b50a5e976b33229efadd6cadc6aa616d8945ddb8c51ab3b3d0e49df50ed483a4a23a20b8b0f5558c5b04f0d956cdd3bec55db3bf91a1b46e085ff08526fd3d59c3a4f16fd0b4cbffdce8623f1a483c6b16debe046487df384b222746c8b5e9441d4ac3bccafbc2f5bf4c5f85a99e688ccccd63719a90da4fb452463b1602bac0e6aa38f289fde7c95806f952c407a690b547d138e58d2dd7a40123ec86c6b449e615ef31176798f7b900d62779f13bf9b8f60f947a1e9ae82db8e64ff5e09d58d324038f7aceac45e2838e5afbd872e32d291d8dc117025ef45f34915dd8e3de340e7bd36aef213f5236f7be6c764fb07a4bc1c5c3fa76bd6f64e797afcef13fac8fa985eeddf6101181bd70b562c3b9ffad3fb88ec6f4349fe8219ba0781fa8d1d2db54ecf0ddf1620305afa46d2c5e5dff15406ea5385c2997b17cf89db546f2452e6285dadf280b573c9bfa7bd0f91b4986d3c6ec455fb29bfe054eccdebe09d3938fb2bbc9fcaf66d3c6274ebf24ca69f03c0a8f8af9f4bb0e97e23164891328f92bfaa7d969413411fc7ff7d7b935267f15164cc3970c70fff4a117111fec36e17e21388fc9338f814fcea95fb4e580f24759adacc8c16ba1d29c94debff72d1496f36aa4c494bb2e1e7678d5878a1cc9ef9e0ad0eb6ad43bcec30c9eac54b6057b60b557a07fd783892e3150b45804c5ca13d7a5362af80da020bc9a345d851243b54a5cca7e0c06680dce230e2ca0f36f9a10eed0f3ad574fbf27bd80c7af3ef4cf7e208d78d6fc77fc40eccb5fb81ba7f2a06001af6e9a0a87d28d3d1806182949f95a51095d54bc412362a33c967b6aa967f6157ad3476dad4d52972e6e1fdf8a9ab1908f96c911f4e3f68c23314cfc80cd61375f4a44ab99ab88e5af7107f66186a7b4a9db9513cd33aba74bc0405f34e3ad1904fd0e1aa673aaaa41a26c1700d85c52f7486a07023eeda86122964fd137d8c7b852af211feda511ddfa338a96fa6c0b628e507f4dcbd1cc1872a7705855010a4898cd110a2591647e4e998e33e5205e9f0217edd5359ae16724329bc3cb185955bed37d488a466ebae11c4350a0b941243af311c805a347afd68516c9a13570cea3ac1a83e2136ec59bd490b734fb2cb5ddc8102994b959ce2d23f9a598ccc2143017eadb7a0b04e2e33d3ce087afd8655e781582997284ad944d7b78c14f207dc5a1894424dff96c9ee6f111112257d0627dedfb218eef1e0606c48d5f5b9af7dfafed7ad5e95a0e072aea90eb5f81d8bc78868c320b4b0be71e8873380b2b4bbaacd31d87db2f1285e9955eea23d12ebe80ea4095980d8261dea3a65e0b3cba693f2bee7f085666b3977e93d94c858a8077a07fb13c735d0a647b33445f3847a066573ddf94b036acda1f0b331bc7b49a263b66b060019a53fe1da46a7a221fc36891da73941aa2c7f948c67726df5c1b084bf75d21dd1aeb395e58b8ef6a4e0b5f05b650545055abb60111144172d7363dcdf5ad2b5082d4bb57593dea874328b59440d8c18a0839dadc3214dfe1a99a6ae3e7daa72438c2051e85177d58bf73fba55fec53d64a16f95677fce8256ec308f431b540cf75df33bd7d4eae6a3bc008b06c99518a7db865125a5c72d8bbae313bac435f72092877f290eb8843e4f122784ae5035a0e47f856a842a69602e5253a0e67626c974a119a9bff76dbdafa849e42950f7273e69848ede94010ba08308488bcfe3ac8c274fc322888f9cd2c11504fef9879f0012dc9a88419162d6b66d1d997ea97fd6400c9b43a8f6a6a5da1cbb51a2173d0e9633190d4c0e1e2721004ca3d79b94881604b53eaf3a2956f25dc88a580b7214129ed52ecc88185388c0279982f77534cb7a129bcdc9bccd8d893e7d3cdf7e73501f989e3bd2d14cd8e72d1c0dcbbb758eda89312d449bd71a75aa78aaca968d630877f260f75c38d96c7a9d16dec8783b80e9732f507b9be9f8b204b9e1c305588341ba401a457c3271f5e19088e29a2ac0ed24212bfe51edff0715aa8b1c012d9c8d9984a2207f480d8f9313662df341af41476f2de9efe49a263338294f3c42604fb83656a442a7e1bdddf129241f4622703a05616b85d9876ce9ff94691b7aceef8f9c6fbbf60f2150b1b491b937c007ab0c4cbae023c11cd6cb6549ac08e7adc4c23541408e3eb0b9feba9730ae4e321fbeca872e298ab3264bfb5750cc6b9fb0f66271d59aa9faf32ed5e4e631966b3bdc8f71a1d28b08820c086918c9d48859f36c466158c15a5ade38af23f68e130c8ea688520065b42b2ecedc3e70c060a8b535f73fbe08299b366ec0852400f1c7441f2108fed1c8e368a2dcfa7e9f156d1475c13fc0aed985d591174543b3ae84c1c147c15c9b47fc5b55d5b1476c3ebda7c4c98bb68fdb1d290b3a6310bee52bd72a453465b79317f648a53f01873dc554a110562843f3f453a2d5ddd3a54892f03f1b9550d3ba38d6f7e702676230bb5819f983ef7e7d88849f330c8e8ac2c4fb8b50557ee649e96f05b817d429d506c1548e1b79f8ab78c2fd420b7c66c71074268ad4fe77c7e9170e79d92006ac5ceaa8e2b1721df7b468e7d351a27c6a081625cfdc1b007a2e5f9e18b9ea5123cfb0e17852e01436481a5851a00a9c7e149324468f3175ce8c2f67c6853e34db6df2b026d30dd661d388e25f4373a16e304d086d06393d7f63b3a6c9c23345d0d04a59be863459f26c1e09f4ad4ae6ff74de8d53ed676eb21a6cee3ad60c2ac89a4169173a2bd96b946ea4834e97f645a2a6812e0a564c82adbe9d489f93b40ad29eb62860fbd02ea52b5481d4a6d1966ee875df01850e9b0acf4031b7d1b634f38d6a56fb13da4add18de2c14c25d015326824aaaca3b7a61b73435db7d0d52980d6e495cc9a7ef1a4f2bc32557cec99977c82b4963f6fd9cfd0b8d31d5522c801d75d4dc3fe1551abaa3e7d614118a3a09a6a94d76e0021b8b3f1b64caefc0732f53d40597152859c4e20b07eb01b6803d0f9d859c244f5687713148e4020d2baa5304fe515e9f37a0d6be21acd632cddc4bc9ecbafd0dba618f8918afcd644c427fcc5b4c5ad244da06216de195bb3289339cf37df077dc489b168957c2a63bfc4ccb00f2da7acd7efd7cfa2241ea68811e52fa5f6beb4b3dfe261d28085fd0da4a6653e5ffe1f8d7a734b05056ffc25a70952dedb01fc4009d8c01401da3fd54258cb9a6abb54da5aa8726bb31c584250d3f1c2a4c337797045bf7201afc0a21ba74ace4f53fb26291bdfddf00eb5c33dd514570406e11a86ce8f661d4408c832ec6e47dbc7ece120d8b77002c97e08f0b41d5a555e4c935bbd2268722e8c6cd8058619883e0c5cf18e5aafa9a5ff4c4f8275fbec40c49af6a74449dd929e871d6123f3521247801e311de31aac7d1c7defa514ad33e2398cd6d963f0a6d8ffc8e7600de4416c3517834398284230d6725cdbcb6c82d05978ef29424d2811fad9d27c876465eb6bf249e8100f6251c99107550fdd5d4ad422f51e270d8ac7400453fda3ce9d824f1132221f1db97c39474322446e489800c9bf8199b43a61364384f3f9e49c1731818b9b97cc305abd2d512667677c57d890733463a4173f259f6908bbc6c4188bff5d7e01a97125f7f0232cd9634116d9202683c89b01811157e21fa00958c37649571609bf5d46b924a82b16182c835afd3198c9d4676cc6074b416d9c5e2b708877edc74df1fe1f9e174c49f1213d7de06f049460586c140b573d485ef3a1f70671686a2922fd92c7526845ac842d2505493c6cd507c31b3757dd4879067ff7ea773bf409bd90e1b3afa5bddc61d0b5f03dba85a31a9e30c6129bde4962e27521524d54447a5def5a408a09007d3165056086335153262cc12633b0fdb6ab102be15ae9bb20c489b37d3da29ef9fd416f15ec56f8e4919bfbf37b2b89d114d34d5878f7d227e70f4d9d4e3d3bd80f8b9a1b033188d8c172690d2ad47ffc758bbc4393d53ceb1c9356cf517c56db547361f7a1d1c55638b5ea413ccd8e728f13db895e430bdfbe30cbd2ea3d73afa0675ac63ef777cf4ea46866082e38b1bb5baedea485af2e7da879c85e572a826b2c96cb2dfe522c1ad10819cab21eec5533c3f543890260d4bab30fa75cef4bdf621cf7c0a9e8f24f8549334eb5db69b016a133c5b8e877b0d8cb28e546a0829e1ad352987d682f7ca338a1da4de9ef043dc23432be6bd313ffe2b6f45a392be8097ddf61b6a13236703f45fca85ea5b4a54976505b8d3f9c5e72b7881f9b354a372b3f5d7333650e18ce599c77090db654ac2fa38429a995ccbc4ef44b4e771d9aaae1a7496e0073d63326da4a132aed31530fe606aecf84a0dc7adb69f03b745fff3290e55a051ff923cfe00533259fa2c877246d218a8b37dde47b29c458e8209e01d7a97f9ccc19da59336867fb72643b05160c3b2bf5ab9adb550866002ac8cd4b4237ad8262bf806c61c28a096b7dafb700057ecd8bbfb2bca65d25560c99a472693c12cb7de0d0319471767b4244bf3bb2dc1aea20e12fbdc66b32bd6ac00d91e79b764a6c98ca2acdaf987a58969ac3b6ef36767c9e5f403f24ef010e742e157a7fdc965e135de4eeec9cbbaa0b3dbec20ccdca3d034924fd9b42ce7ae5d669ffb7fecb5512cc48f5c22f95ed1e93185998d8520fcd139208dd393fbd3ca08c95ad1fc0afa9a61d9e44fc544841ac2f30e4571b0c230004f9d10e90e43dc4167a641c9f970e71854799332e92c28c0f6eef0cc034470a9389057860991d087a6ce95658d93a4d156634f6c4c34adfb471f8d99fc098a3535cebd3778f8e46a294bf8550f984daac2ff65ab705c62f48defacdc178befd25dd59e655af378722e24b75a949ac45feb3aa857cbc65e24391ed9c48ea2343a40a4a53bec3d1bfbda7cbe7e488580d8cb171a8085ee0fc8756d20e6266606a5a456856f2567b4988b32ec964ec1d563baf4af0586124eb4d8a0d31a6316a7ef7a1e4224a63e6d465be9f6a77c44c55d8c77118f6f0515dd40b8f12af022f4bb9329933c9b24605ddb5350740fda41c34c1212c20184d0ef93da771b33a7e209de51d55a2222facc1788349a71136d16c612f43733e1bbc376101c5783a8a29473a19aad69d16546e108713178f02a5c85aeda5ab90d554ba9ebe8f4473a4f1809befb57cac5fce5d5114e233da933e2365fec3a62eba30efd95ed7dca10e3c457e9ba4b419beb81dbfcc63ed74952097fd21dae4016f32645728e2e915967805455796e24e7e991f7dfb88a29da43e5af5ed73309fba483c9d0ccc9ec6e795c39a15ac12d0e4fa54dac7a588d9e6c72815a93527e67a7425ea9e9c2cc845cabc941006572a5057827a2f9883c889a9607176f2ec2d1331904fc9ac2a1c62ae4ae33cd82158bc0777bf8a06b4a2e4b443f8042876bf32800424300410401a97a9496083fe1f4b9c6cba61f67a2242303ac505b46182c4d89cfa96e0179b0a3d1ca0b259765e8e2af5012eeeed200d36accca7185976a71d18503e0f2286bf84d999ef6bd5ec72026b8ed6f2325a5e3515634d46af9e88cbb49e4b7e6aec5ad57675f4236252d2d7b64ca22bab4ae02b6cddfbc38eceba735d90054751292b5ccefc1a70d601f43333d96b9cc6619811c7f6f8677c3005aa7da185d599738e784f9b9ec3e71048388cc7c121a1d543aa68d06788626e7804dcbf7442c9ef3edf83971207776ae7b384cf3b1b2064ff7780153c10e774d65c31e7e1165632a4d9ea56453a2127d3176cdff41d82d67e9d44476f7c7bb73307563eb1e53d2fd6515023d231bfcbe94a00aeb1fec32573280c37c55e7e959c1ffb60d73b99673c634722a54e938c284f15542e644f99942906d3ee34e017022899f47dc2b16d1640ac610e3c8951a58d876617a28b05068f5068953af4928ab1fc85cd22c8e5f7573143917a581f4edd51499ddedd445ece4dccd9c26fa8aa7d2388f4f8fe577fe3d0c01bbc588d004ddd14a67bf3b5c767b8399012041acbcf25a1e151a340dd3f226e70b4c3b2f9aae15aca5d17dcd15fa2a973d6349c95ff9ec560ffdcb7db4e08c872b8b4d17d07d44ecef1f5c7ce67137fa86515</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组小和问题</title>
      <link href="/2022/10/25/SmallSum/"/>
      <url>/2022/10/25/SmallSum/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e9c4c2d41ec61f2eaf85cce00f76ba3471f68e15b3e6a3b9ebd60fe17ab04184"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2022/10/24/MergeSort/"/>
      <url>/2022/10/24/MergeSort/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-归并排序算法思想"><a href="#1-归并排序算法思想" class="headerlink" title="1. 归并排序算法思想"></a>1. 归并排序算法思想</h1><p>归并排序使用的是分治的思想，把问题拆分成子问题，逐个解决子问题，在把子问题的解合并，得到原问题的解。</p><h1 id="2-递归的归并排序"><a href="#2-递归的归并排序" class="headerlink" title="2. 递归的归并排序"></a>2. 递归的归并排序</h1><h2 id="2-1-算法描述"><a href="#2-1-算法描述" class="headerlink" title="2.1. 算法描述"></a>2.1. 算法描述</h2><p>对于一个数组array，数组的长度是size：</p><ol><li>如果size&#x3D;&#x3D;1，那么数组已经有序了，返回；否则进行下面的步骤，</li><li>把原数组拆分成长度近似相等的两个子数组（如果size是奇数，那么无法平均分配），递归调用归并排序的方法，对这两个子数组进行排序；</li><li>把排好序的两个子数组和并在一起。</li></ol><h2 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2. 代码"></a>2.2. 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSortRecursively</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        sort(array,<span class="number">0</span>,array.length - <span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">int</span>[array.length]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> l, <span class="type">int</span> r,<span class="type">int</span>[] help)</span> &#123;</span><br><span class="line">        <span class="comment">// 对数组的[l..r]部分进行排序，使用辅助数组help</span></span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (l + r) &gt;&gt;&gt; <span class="number">1</span>;<span class="comment">// 获取中点位置，使用&gt;&gt;&gt;是为了防止溢出</span></span><br><span class="line">        sort(array,l,m,help);</span><br><span class="line">        sort(array,m + <span class="number">1</span>,r,help);</span><br><span class="line">        merge(array,l,m,r,help);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> l, <span class="type">int</span> m ,<span class="type">int</span> r, <span class="type">int</span>[] help)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l, j = m + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m &amp;&amp; j &lt;= r) help[k++] = array[i] &lt;= array[j] ? array[i++] : array[j++];<span class="comment">// 谁小拷贝谁，相等的时候，优先考虑左组（保证排序算法的稳定性）</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m) help[k++] = array[i++];</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= r) help[k++] = array[j++];</span><br><span class="line">        System.arraycopy(help,<span class="number">0</span>,array,l,k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(N\log_2N)$，空间复杂度$O(N)$的合并辅助空间以及$O(\log_2N)$的递归栈空间。</p><h1 id="3-迭代的归并排序"><a href="#3-迭代的归并排序" class="headerlink" title="3. 迭代的归并排序"></a>3. 迭代的归并排序</h1><p>递归版本的是从上往下的方法，大数组不断拆分成小数组。迭代的方法是从下往上的方法，先考虑合并最小的分组，然后逐渐增加分组的长度，直到整个数组变成一个分组的时候，数组就排好序了。</p><h2 id="3-1-算法描述"><a href="#3-1-算法描述" class="headerlink" title="3.1. 算法描述"></a>3.1. 算法描述</h2><p>数组待排序部分的长度记为len，分组长度groupLen初始化为1；数组待排序部分开始下标l，末尾下标r；</p><p>只要groupLen&lt;len，就执行下面的步骤：</p><ol><li>使用一个变量x表示当前分组的开始位置，x初始化为l；只要x&lt;r，执行下面的步骤；<ol><li>如果数组剩余部分刚好够左分组的长度，或者不够左分组的长度，那么此时是没有右分组的，因此直接退出内循环；</li><li>否则，有右分组，那么确定右分组的结束位置y，以及左分组的结束位置mid；</li><li>执行merge操作</li><li>开始位置x &#x3D; y+1；</li></ol></li><li>如果分组长度groupLen已经超过了数组的长度了，那么退出外循环，排序结束，</li><li>否则groupLen *&#x3D; 2</li></ol><h2 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2. 代码"></a>3.2. 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSortIteratively</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        sort(array,<span class="number">0</span>,array.length - <span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">int</span>[array.length]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span>[] help)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> r - l + <span class="number">1</span>, groupLen = <span class="number">1</span>, x, m, y;</span><br><span class="line">        <span class="keyword">while</span>(groupLen &lt; len) &#123;</span><br><span class="line">            x = l;</span><br><span class="line">            <span class="keyword">while</span>(x &lt; r) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>((m = x + groupLen - <span class="number">1</span>) &gt;= r) <span class="keyword">break</span>;<span class="comment">// m是左组的结束位置，如果m不小于r，则说明此时没有右组了，因此结束</span></span><br><span class="line">                y = Math.min(m + groupLen, r);<span class="comment">// 有右组，但是右组不一定是满的，因此右组的结束位置是r和m+groupLen的二者的最小值。</span></span><br><span class="line">                merge(array,x,m,y,help);</span><br><span class="line">                x = y + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(groupLen &gt; (len &gt;&gt; <span class="number">1</span>)) <span class="keyword">break</span>; <span class="comment">// 这里不能使用 if((groupLen &lt;&lt; 1) &gt; len)，因为groupLen 乘以2以后可能会溢出。</span></span><br><span class="line">            groupLen &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> l, <span class="type">int</span> m, <span class="type">int</span> r, <span class="type">int</span>[] help)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l, j = m + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m &amp;&amp; j &lt;= r) help[k++] = array[i] &lt;= array[j] ? array[i++] : array[j++];</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m) help[k++] = array[i++];</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= r) help[k++] = array[j++];</span><br><span class="line">        System.arraycopy(help,<span class="number">0</span>,array,l,k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(N\log_2N)$，空间复杂度$O(N)$。没有过多的系统堆栈空间。</p><h1 id="4-测试程序"><a href="#4-测试程序" class="headerlink" title="4. 测试程序"></a>4. 测试程序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSortTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">testTimes</span> <span class="operator">=</span> <span class="number">100_0000</span>, maxArraySize = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">while</span>(testTimes-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> r.nextInt(maxArraySize) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span>[] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[size], array2 = <span class="keyword">new</span> <span class="title class_">int</span>[size], array3 = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) array1[i] = array2[i] = array3[i] = r.nextInt(<span class="number">5000</span>);</span><br><span class="line">            Arrays.sort(array1);</span><br><span class="line">            MergeSortRecursively.sort(array2);</span><br><span class="line">            MergeSortIteratively.sort(array3);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array1[i] != array2[i] || array1[i] != array3[i]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Oops!!, Not equals&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;array:&quot;</span>);</span><br><span class="line">                    System.out.println(Arrays.toString(array1));</span><br><span class="line">                    System.out.println(<span class="string">&quot;array2:&quot;</span>);</span><br><span class="line">                    System.out.println(Arrays.toString(array2));</span><br><span class="line">                    System.out.println(<span class="string">&quot;array3:&quot;</span>);</span><br><span class="line">                    System.out.println(Arrays.toString(array3));</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Test case: &quot;</span> + testTimes + <span class="string">&quot; pass&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Done Successfully!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分解质因数</title>
      <link href="/2022/10/24/PrimeNumberDecomposition/"/>
      <url>/2022/10/24/PrimeNumberDecomposition/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h1><p>编写一个程序，给定一个正整数n（n&gt;&#x3D;2），分解质因数，返回分解结果。</p><p>例如：</p><ol><li>n&#x3D;6，返回：[2,3]；</li><li>n&#x3D;18，返回[2,3,3]；</li><li>n&#x3D;3，返回[3]</li></ol><h1 id="2-算法描述"><a href="#2-算法描述" class="headerlink" title="2. 算法描述"></a>2. 算法描述</h1><p>准备一个答案列表ans，设置一个循环遍历i从2开始，循环条件是i&lt;&#x3D;n；对于每一个i：</p><ol><li>如果i&#x3D;&#x3D;n，那么把i加入ans，返回；</li><li>只要n%i&#x3D;&#x3D;0，那么就把i加入ans；n&#x2F;&#x3D;i;</li><li>如果n是质数，那么就把n加入ans，返回，否则i++</li></ol><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimeNumberDecomposition</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">decomposition</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == n) &#123;</span><br><span class="line">                ans.add(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                ans.add(i);</span><br><span class="line">                n /= i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(primeNum(n)) &#123;</span><br><span class="line">                ans.add(n);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">primeNum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">3</span>) <span class="keyword">return</span> n != <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">6</span> != <span class="number">1</span> &amp;&amp; n % <span class="number">6</span> != <span class="number">5</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>, limit = (<span class="type">int</span>)Math.sqrt(n); i &lt;= limit; i += <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n % i == <span class="number">0</span> || n % (i + <span class="number">2</span>) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;Input your number please:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Result is: &quot;</span> + decomposition(num));</span><br><span class="line">            System.out.println(<span class="string">&quot;Input your number please:&quot;</span>);</span><br><span class="line">            num = sc.nextInt();</span><br><span class="line">        &#125;<span class="keyword">while</span>(num != <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Bye~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 素数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筛选素数</title>
      <link href="/2022/10/20/getPrimeNums/"/>
      <url>/2022/10/20/getPrimeNums/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5f199b2e672b8c98e7c111207410b110fa18190a306fbf3fa9b39fbcb1415461"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 素数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>素数判断</title>
      <link href="/2022/10/20/judgePrimeNum/"/>
      <url>/2022/10/20/judgePrimeNum/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3e27d09a946f5126578ddd3941238e2d340570826bafebfb0c3bfa165cf783eb"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 素数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>出现最频繁的K个单词</title>
      <link href="/2022/10/19/TopKFrequentWords/"/>
      <url>/2022/10/19/TopKFrequentWords/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h1><p>给定一个单词流，单词个数未知的。现在需要设计一种结构，它可以接收一个单词，也可以返回到目前为止，出现次数最多的K个单词。用户会在某些时候要求查询出现次数最多的K个单词，按照出现次数升序，字典序降序的顺序输出。</p><p>K通过构造方法传入，K&gt;0</p><p>测评链接：<a href="https://www.lintcode.com/problem/550/">https://www.lintcode.com/problem/550/</a></p><h1 id="2-暴力解法"><a href="#2-暴力解法" class="headerlink" title="2. 暴力解法"></a>2. 暴力解法</h1><h2 id="2-1-算法分析"><a href="#2-1-算法分析" class="headerlink" title="2.1. 算法分析"></a>2.1. 算法分析</h2><ol><li>使用list存储每一个单词及其出现次数</li><li>使用哈希表存储每一个单词内容和单词本身的映射。</li><li>对于每次添加的操作，先在哈希表中查找是否存在单词，如果存在则获取其引用，增加其出现从次数，如果不存在，则新建一个单词的引用，出现次数是1，添加到list和哈希表。</li><li>对于每次获取topk操作，先对list按照出现次数从大到小，字典序从大到小排序，取前K个单词即可。</li></ol><h2 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2. 代码"></a>2.2. 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KFrequentWords</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> k;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;WordInfo&gt; data;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,WordInfo&gt; wordMap;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;WordInfo&gt; cmp = (a,b) -&gt; a.cnt != b.cnt ? b.cnt - a.cnt : b.word.compareTo(a.word); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KFrequentWords</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        wordMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">WordInfo</span> <span class="variable">wi</span> <span class="operator">=</span> wordMap.get(word);</span><br><span class="line">        <span class="keyword">if</span>(wi == <span class="literal">null</span>) &#123;</span><br><span class="line">            wi = <span class="keyword">new</span> <span class="title class_">WordInfo</span>(word);</span><br><span class="line">            wordMap.put(word,wi);</span><br><span class="line">            data.add(wi);</span><br><span class="line">        &#125;<span class="keyword">else</span> ++wi.cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getTopKWords</span><span class="params">()</span> &#123;</span><br><span class="line">        data.sort(cmp);</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> Math.min(k,data.size()) - <span class="number">1</span>;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(end + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= end; ++i)</span><br><span class="line">            ans.add(data.get(i).word);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WordInfo</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> cnt;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> String word;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">WordInfo</span><span class="params">(String word)</span> &#123;</span><br><span class="line">            cnt = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">this</span>.word = word;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">KFrequentWords</span> <span class="variable">kfw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KFrequentWords</span>(<span class="number">3</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        System.out.println(kfw.getTopKWords());<span class="comment">// yes,hello,C++</span></span><br><span class="line">        kfw.add(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        System.out.println(kfw.getTopKWords());<span class="comment">// yes,hello,C++</span></span><br><span class="line">        kfw.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        System.out.println(kfw.getTopKWords());<span class="comment">// yes,C++,hello</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-最优解"><a href="#3-最优解" class="headerlink" title="3. 最优解"></a>3. 最优解</h1><h2 id="3-1-算法分析"><a href="#3-1-算法分析" class="headerlink" title="3.1. 算法分析"></a>3.1. 算法分析</h2><ol><li><p>还是使用哈希表存储每一个单词内容和其本身的映射；</p></li><li><p>使用一个长度为K的小根堆结构，维护出现次数最多且字典序最大的K个单词；还需要一个哈希表，告诉一个元素是否在堆上；</p></li><li><p>当新来一个单词的时候，如果不在map中那么新建出来，加入map，否则当前单词的出现次数++；</p><ul><li>如果当前单词在堆上，那么调整堆（此时只需要heapify，因为出现次数增加，又是小根堆）</li><li>如果当前单词不在堆上，<ul><li>如果堆size没有达到K，那么加入堆中，调整堆（heapInsert），</li><li>如果堆size达到K，然后看看它能否替换堆顶，如果可以则替换堆顶，调整堆</li></ul></li></ul></li><li><p>当需要获取topK的时候，只需要取出堆中的所有元素，排序即可。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KFrequentWords2</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> k;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WordInfo[] heap, help;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String,WordInfo&gt; wordMap;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;WordInfo,Integer&gt; indexMap;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;WordInfo&gt; heapCmp = (a,b) -&gt; a.cnt != b.cnt ? a.cnt - b.cnt : a.word.compareTo(b.word);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;WordInfo&gt; sortCmp = (a,b) -&gt; a.cnt != b.cnt ? b.cnt - a.cnt : b.word.compareTo(a.word);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KFrequentWords2</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        heap = <span class="keyword">new</span> <span class="title class_">WordInfo</span>[k];</span><br><span class="line">        help = <span class="keyword">new</span> <span class="title class_">WordInfo</span>[k];</span><br><span class="line">        wordMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        indexMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">WordInfo</span> <span class="variable">wi</span> <span class="operator">=</span> wordMap.get(word);</span><br><span class="line">        <span class="keyword">if</span>(wi == <span class="literal">null</span>) &#123;<span class="comment">// 不在Map则新建</span></span><br><span class="line">            wi = <span class="keyword">new</span> <span class="title class_">WordInfo</span>(word);</span><br><span class="line">            wordMap.put(word,wi);</span><br><span class="line">        &#125;<span class="keyword">else</span> ++wi.cnt;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">index</span> <span class="operator">=</span> indexMap.get(wi);</span><br><span class="line">        <span class="keyword">if</span>(index == <span class="literal">null</span>) &#123;<span class="comment">// 不在堆上</span></span><br><span class="line">            <span class="keyword">if</span>(size &lt; k) &#123;<span class="comment">// 堆不满，则放入堆中</span></span><br><span class="line">                heap[size] = wi;</span><br><span class="line">                indexMap.put(wi,size);</span><br><span class="line">                heapInsert(size++);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;<span class="comment">// 堆满，则看看能否替换堆顶</span></span><br><span class="line">                <span class="keyword">if</span>(heapCmp.compare(heap[<span class="number">0</span>],wi) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    indexMap.put(wi,<span class="number">0</span>);</span><br><span class="line">                    indexMap.remove(heap[<span class="number">0</span>]);</span><br><span class="line">                    heap[<span class="number">0</span>] = wi;</span><br><span class="line">                    heapIfy(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> heapIfy(index); <span class="comment">// 在堆上，则调整堆</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getTopKWords</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Math.min(k,size);</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) help[i] = heap[i];</span><br><span class="line">        Arrays.sort(help,<span class="number">0</span>,len,sortCmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) ans.add(help[i].word);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapInsert</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> parent;</span><br><span class="line">        <span class="keyword">while</span>(heapCmp.compare(heap[index],heap[parent = (index - <span class="number">1</span>) / <span class="number">2</span>]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            swap(index,parent);</span><br><span class="line">            index = parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapIfy</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> child, bnd = size &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; bnd) &#123;</span><br><span class="line">            child = (index &lt;&lt; <span class="number">1</span>) | <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(child + <span class="number">1</span> &lt; size &amp;&amp; heapCmp.compare(heap[child],heap[child+<span class="number">1</span>]) &gt; <span class="number">0</span>) ++child;</span><br><span class="line">            <span class="keyword">if</span>(heapCmp.compare(heap[index],heap[child]) &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            swap(index,child);</span><br><span class="line">            index = child;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">              </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">WordInfo</span> <span class="variable">wi</span> <span class="operator">=</span> heap[i], wj = heap[j];</span><br><span class="line">        indexMap.put(wi,j);</span><br><span class="line">        indexMap.put(wj,i);</span><br><span class="line">        heap[i] = wj;</span><br><span class="line">        heap[j] = wi;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WordInfo</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> String word;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> cnt;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">WordInfo</span><span class="params">(String word)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.word = word;</span><br><span class="line">            cnt = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">              </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">KFrequentWords2</span> <span class="variable">kfw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KFrequentWords2</span>(<span class="number">3</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        System.out.println(kfw.getTopKWords());<span class="comment">// yes,hello,C++</span></span><br><span class="line">        kfw.add(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        System.out.println(kfw.getTopKWords());<span class="comment">// yes,hello,C++</span></span><br><span class="line">        kfw.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        kfw.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        System.out.println(kfw.getTopKWords());<span class="comment">// yes,C++,hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-测试程序"><a href="#4-测试程序" class="headerlink" title="4. 测试程序"></a>4. 测试程序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KFrequentWordsTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">testTimes</span> <span class="operator">=</span> <span class="number">100_0000</span>, maxWordCnt = <span class="number">20</span>,maxK = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">while</span>(testTimes-- &gt; <span class="number">0</span>) &#123;<span class="comment">// 测试testTimes次</span></span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> r.nextInt(maxK) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">wc</span> <span class="operator">=</span> r.nextInt(maxWordCnt) + <span class="number">1</span>;</span><br><span class="line">            String[] words = <span class="keyword">new</span> <span class="title class_">String</span>[wc];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; wc; ++i) words[i] = getWord(r);<span class="comment">// 生成wc个单词</span></span><br><span class="line">            <span class="type">KFrequentWords2</span> <span class="variable">kfw2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KFrequentWords2</span>(k);</span><br><span class="line">            <span class="type">KFrequentWords</span> <span class="variable">kfw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KFrequentWords</span>(k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; wc; ++i) &#123;</span><br><span class="line">                kfw2.add(words[i]);</span><br><span class="line">                kfw.add(words[i]);</span><br><span class="line">                <span class="keyword">if</span>(r.nextInt(<span class="number">2</span>) == <span class="number">0</span>) &#123;<span class="comment">// 一半的概率获取topK</span></span><br><span class="line">                    List&lt;String&gt; ans2 = kfw2.getTopKWords(), ans =  kfw.getTopKWords();</span><br><span class="line">                    <span class="keyword">if</span>(ans2.size() != ans.size()) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;Oops!! ans2.size:&quot;</span> + ans2.size() + <span class="string">&quot; ans.size:&quot;</span> + ans.size());</span><br><span class="line">                        System.out.println(<span class="string">&quot;All words:&quot;</span>);</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; wc; ++j) &#123;</span><br><span class="line">                            System.out.print(words[j]);</span><br><span class="line">                            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println();</span><br><span class="line">                        System.out.println(<span class="string">&quot;ans2:&quot;</span>);</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; ans2.size(); ++j) &#123;</span><br><span class="line">                            System.out.print(ans2.get(j));</span><br><span class="line">                            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println();</span><br><span class="line">                        System.out.println(<span class="string">&quot;ans:&quot;</span>);</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; ans.size(); ++j) &#123;</span><br><span class="line">                            System.out.print(ans.get(j));</span><br><span class="line">                            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">ansSize</span> <span class="operator">=</span> ans.size();</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">kk</span> <span class="operator">=</span> <span class="number">0</span>; kk &lt; ansSize; ++kk) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(!ans.get(kk).equals(ans2.get(kk))) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;Oops!! Not equals at:&quot;</span> + kk + <span class="string">&quot;ans[&quot;</span> + kk +<span class="string">&quot;]:&quot;</span> + ans.get(kk) + <span class="string">&quot;, ans2[&quot;</span> + kk + <span class="string">&quot;]:&quot;</span> + ans2.get(kk));</span><br><span class="line">                                </span><br><span class="line">                                System.out.println(<span class="string">&quot;All words:&quot;</span>);</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; wc; ++j) &#123;</span><br><span class="line">                            System.out.print(words[j]);</span><br><span class="line">                            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println();</span><br><span class="line">                        System.out.println(<span class="string">&quot;ans2:&quot;</span>);</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; ans2.size(); ++j) &#123;</span><br><span class="line">                            System.out.print(ans2.get(j));</span><br><span class="line">                            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println();</span><br><span class="line">                        System.out.println(<span class="string">&quot;ans:&quot;</span>);</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; ans.size(); ++j) &#123;</span><br><span class="line">                            System.out.print(ans.get(j));</span><br><span class="line">                            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Done successfully!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getWord</span><span class="params">(Random r)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> r.nextInt(<span class="number">20</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) sb.append((<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+r.nextInt(<span class="number">26</span>)));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
          <category> 堆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大线段重合问题</title>
      <link href="/2022/10/16/MaxLineCoincide/"/>
      <url>/2022/10/16/MaxLineCoincide/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h1><p>给定一些整数对（a，b）代表数轴上的两个点，且a&lt;&#x3D;b，这两个点表示一个线段。请返回最多几个线段重叠在一起。</p><p>例如：</p><ol><li>[[1,3],[2,5],[7,9]]，因为[1,3]和[2,5]重叠在一起，返回2；</li><li>[[1,2],[2,3]]，返回2；</li><li>[[1,2],[2,3],[1,3]]，返回3</li><li>[[1,2]]，返回1</li></ol><p>数组长度至少是1，不超过100_0000；</p><h1 id="2-暴力解法"><a href="#2-暴力解法" class="headerlink" title="2. 暴力解法"></a>2. 暴力解法</h1><h2 id="2-1-算法分析"><a href="#2-1-算法分析" class="headerlink" title="2.1. 算法分析"></a>2.1. 算法分析</h2><p>我们可以用笔画几条线段发现，任何重叠的部分的左端点，都是某一个线段的左端点。比如[1,3]，和[2,4]重叠的部分是[2,3]，其中2就是第二个线段的左端点；又比如：[1,5]，[3,7]，[4,6]，重叠的部分是[4,5]，其中4就是[4,6]的左端点。既然任何一个重叠的部分都满足这个性质，那么重叠线段最多的那一部分，也满足。</p><p>因此我们只需要看一下，哪个左端点下经过的线段数目最多即可。</p><p>因此我们可以枚举所有线段的左端点，对于每一个左端点，再次枚举有几条线段经过当前点，返回最大值。</p><p>线段[a,b]经过当前点x的充要条件是：a&lt;&#x3D;x&lt;&#x3D;b</p><h2 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2. 代码"></a>2.2. 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxLineCoincide</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxLineCoincide</span><span class="params">(<span class="type">int</span>[][] lines)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> lines.length;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>, t, leftPoint;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            t=<span class="number">0</span>;</span><br><span class="line">            leftPoint = lines[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;len; ++j) &#123; </span><br><span class="line">                <span class="keyword">if</span>(lines[j][<span class="number">0</span>] &lt;= leftPoint &amp;&amp; leftPoint &lt;= lines[j][<span class="number">1</span>]) ++t;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(t,ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] lines = &#123;</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">3</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(maxLineCoincide(lines));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(N^2)$</p><h1 id="3-最优解"><a href="#3-最优解" class="headerlink" title="3. 最优解"></a>3. 最优解</h1><h2 id="3-1-算法分析"><a href="#3-1-算法分析" class="headerlink" title="3.1. 算法分析"></a>3.1. 算法分析</h2><p>上述的解答中，最耗时的部分在于对于每一个左端点，找有几条线段通过这个点？因为给定的线段列表是杂乱的，因此我们只能遍历去找，浪费了时间。</p><p>如果我们把所有的线段，按照左端点从小到大排序，那么我们在确定一个左端点有几条线段通过它的时候，就可以排除一些不必要的遍历。</p><p><strong><font color=red>即对于一个左端点leftx，能通过它的线段，只可能是左端点不超过leftx的线段，如果一个线段的左端点都超过了leftx，那么这个线段是不会通过leftx的。</font></strong></p><p>左端点不超过leftx的线段中，不都是满足条件的，只有那些右端点不小于leftx的线段，才是通过leftx的。因此我们还要知道这些线段的所有右端点信息，我们可以把这些线段的右端点都放在小跟堆中，不断从堆顶弹出一个右端点rightx，如果发现一个线段的右端点rightx，小于leftx，那么这个线段是不会计入leftx的答案的，当然在计算leftx的下一个（如果有的话）左端点nextLeftx的时候，更不会计入nextLeftx的答案，因此这个右端点rightx就丢弃了，直到某一个rightx不小于leftx的时候，因为是小跟堆，堆中所有的元素都是不小于leftx的，此时堆的size就是当前leftx的答案。</p><p>因此整体的算法如下：</p><ol><li>把所有的线段，按照左端点从小到大排序</li><li>设置一个小跟堆，遍历每一个线段，对于每一个线段line：<ul><li>把line的右端点rightx放入小跟堆；</li><li>只要堆顶元素小于当前线段的左端点leftx，则弹出</li><li>把堆此时的size作为子问题的答案，和全局答案pk</li></ul></li></ol><h2 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2. 代码"></a>3.2. 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxLineCoincide2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxLineCoincide</span><span class="params">(<span class="type">int</span>[][] lines)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> lines.length;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        Arrays.sort(lines,(a,b)-&gt;a[<span class="number">0</span>]-b[<span class="number">0</span>]);</span><br><span class="line">        PriorityQueue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            q.offer(lines[i][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">while</span>(!q.isEmpty() &amp;&amp; q.peek() &lt; lines[i][<span class="number">0</span>]) q.poll();</span><br><span class="line">            ans = Math.max(ans,q.size());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] lines = &#123;</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">3</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(maxLineCoincide(lines));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(N\log_2N)$</p><h1 id="4-测试程序"><a href="#4-测试程序" class="headerlink" title="4. 测试程序"></a>4. 测试程序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxLineCoincideTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">testTimes</span> <span class="operator">=</span> <span class="number">100_0000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxArraySize</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxPoint</span> <span class="operator">=</span> <span class="number">10_0000</span>;</span><br><span class="line">        <span class="keyword">while</span>(testTimes-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> r.nextInt(maxArraySize) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span>[][] data = <span class="keyword">new</span> <span class="title class_">int</span>[size][<span class="number">2</span>], data2 = <span class="keyword">new</span> <span class="title class_">int</span>[size][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">                data[i][<span class="number">0</span>] = r.nextInt(maxPoint);</span><br><span class="line">                <span class="comment">//保证data[i][1]不小于data[i][0]</span></span><br><span class="line">                data[i][<span class="number">1</span>] = data[i][<span class="number">0</span>] + r.nextInt(Integer.MAX_VALUE - data[i][<span class="number">0</span>]);</span><br><span class="line">                data2[i][<span class="number">0</span>] = data[i][<span class="number">0</span>];</span><br><span class="line">                data2[i][<span class="number">1</span>] = data[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans0</span> <span class="operator">=</span> MaxLineCoincide.maxLineCoincide(data);</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans1</span> <span class="operator">=</span> MaxLineCoincide2.maxLineCoincide(data2);</span><br><span class="line">            <span class="keyword">if</span>(ans0 != ans1) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ans0: &quot;</span> + ans0 + <span class="string">&quot; ans1: &quot;</span> + ans1);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">                    System.out.println(Arrays.toString(data[i]));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Oops&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Done successfully!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
          <category> 堆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆 </tag>
            
            <tag> 面试原题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽奖系统问题</title>
      <link href="/2022/10/14/Lottery/"/>
      <url>/2022/10/14/Lottery/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h1><p>有一个抽奖系统，规则如下：</p><p>给定两个整数数组，ids代表用户ID列表，ops代表操作，二者等长。对于每一个位置i，如果ops[i]=&#x3D;0，代表ID为ids[i]的用户退了一件货物，ops[i]&#x3D;&#x3D;1代表他购买了一件货物。有两个区域，一个是获奖区域，一个是候选区域，最多k个人获奖。</p><p>如果一个用户购买了一件货物，此时：</p><ul><li>如果获奖区域人数没满，且他没进入过获奖区域的话，那么他直接进入获奖区域，以前进入过就不做任何操作。</li><li>如果获奖区域的人数满了，那么如果他以前没进入过候选区域，则直接进入候选区域，以前进入过候选区域就不做任何操作。</li></ul><p>此时如果发现候选区域的某个人X的购买数量大于获奖区域的某个人（或者某些人）的购买数量的话，则候选区域这个人进入获奖区域，原来获奖区域的人被替换，进入候选区域。如果原来获奖区域多个人的购买数量都小于X的购买数量的话，则替换掉最先进入获奖区域的那个用户。</p><p>如果一个用户退了一件货物，此时：</p><ul><li>如果他的购买数量已经是0了，抽奖系统不允许购买数量是负数，因此跳过这种情况</li><li>如果用户只有最后一件货物了，退了以后，用户的购买数量就是0了， 那么不管他原来在那个区域，都退出原来的区域；</li></ul><p>如果他退了一件货物以后，发现获奖区域Y某个人购买数量已经小于候选区域某个人（或者某些人）的购买数量的话，则Y退出获奖区域进入候选区域，候选区域的人进入获奖区域，如果候选区域有多个人的购买数量都大于Y的购买数量的话，那么最早进入候选区域的那个用户进入获奖区域。</p><p>总结来说就是，一个抽奖系统，在获奖区域还没满的时候，只要购买数量大于0的用户，都可以直接进入获奖区域；获奖区域满了的话，购买数量大于0的用户则进入候选区域，每一次购买或者退货事件发生的时候，凭着购买数量多，且先到先得的原则，去更新获奖区域。</p><p>现在给定这两个数组，编写代码计算每一次购买退货事件发生的时候，获奖区域的用户ID列表。</p><p>ops[i]只有0和1两个值</p><p>ids[i]可以是任意整数。</p><p>k&gt;0</p><h1 id="2-暴力做法"><a href="#2-暴力做法" class="headerlink" title="2. 暴力做法"></a>2. 暴力做法</h1><h2 id="2-1-算法分析"><a href="#2-1-算法分析" class="headerlink" title="2.1. 算法分析"></a>2.1. 算法分析</h2><ol><li>使用一个结构保存用户的id，购买数量和进入每个区域的时刻；</li><li>使用哈希表记录每一个id的用户；</li><li>使用list保存获奖区域和候选区域的用户</li><li>每次事件发生的时候，如果还没有更新获奖区域，且候选区域还有人的情况下，按照购买数量升序，到达时间降序对候选区域进行排序，按照按照购买数量降序，到达时间降序对获奖区域排序，用候选区域的最后一个替换获奖区域的最后一个即可。</li><li>收集答案</li></ol><h2 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2. 代码"></a>2.2. 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LotteryGameMethod1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">getLotteryUidList</span><span class="params">(<span class="type">int</span>[] ids, <span class="type">int</span>[] ops, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        HashMap&lt;Integer,User&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">// 这里保存的是购买数量大于0的id和用户的映射。</span></span><br><span class="line">        ArrayList&lt;User&gt; lotteryArea = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),</span><br><span class="line">                candidateArea = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        Comparator&lt;User&gt; cntUpTimeDown = (a,b)-&gt; a.cnt!=b.cnt?a.cnt-b.cnt:b.time-a.time,</span><br><span class="line">                cntDownTimeDown = (a,b)-&gt;a.cnt!=b.cnt?b.cnt-a.cnt:b.time-a.time;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(ids.length);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;ids.length; ++i)&#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> map.get(ids[i]);</span><br><span class="line">            <span class="keyword">if</span>(!(user == <span class="literal">null</span> &amp;&amp; ops[i] == <span class="number">0</span>))&#123;</span><br><span class="line">                <span class="comment">// user == null 表示用户还没买过货物，或者用户买的货物都退了。此时如果还发生退货事件，那么不用理会了</span></span><br><span class="line">                <span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line">                    user = <span class="keyword">new</span> <span class="title class_">User</span>(ids[i],i);</span><br><span class="line">                    map.put(ids[i],user);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(ops[i] == <span class="number">0</span>)--user.cnt;</span><br><span class="line">                <span class="keyword">else</span> ++user.cnt;</span><br><span class="line">                <span class="keyword">if</span>(user.cnt == <span class="number">0</span>)&#123;</span><br><span class="line">                    map.remove(ids[i]);</span><br><span class="line">                    lotteryArea.remove(user);</span><br><span class="line">                    candidateArea.remove(user);</span><br><span class="line">                    <span class="keyword">if</span>(lotteryArea.size() &lt; k &amp;&amp; !candidateArea.isEmpty())&#123;</span><br><span class="line">                        <span class="comment">// 如果移除的是获奖区域的用户，且候选区域还有人的情况下，需要从候选区域选择一个最好的，放入获奖区域</span></span><br><span class="line">                        candidateArea.sort(cntUpTimeDown);</span><br><span class="line">                        <span class="type">User</span> <span class="variable">candidate</span> <span class="operator">=</span> candidateArea.remove(candidateArea.size() - <span class="number">1</span>);</span><br><span class="line">                        candidate.time = i;</span><br><span class="line">                        lotteryArea.add(candidate);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(lotteryArea.size() &lt; k)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!lotteryArea.contains(user)) lotteryArea.add(user);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!candidateArea.contains(user) &amp;&amp; !lotteryArea.contains(user))&#123;</span><br><span class="line">                            <span class="comment">// 获奖区域已经满了。如果他既不在获奖区域也不在候选区域，那么加入候选区域</span></span><br><span class="line">                            candidateArea.add(user);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 排序后，把候选区域购买数量最大的 且来的最早的 和 获奖区域购买数量最小的 且来的最早的，互换</span></span><br><span class="line">                        <span class="keyword">if</span>(!candidateArea.isEmpty())&#123;</span><br><span class="line">                            candidateArea.sort(cntUpTimeDown);</span><br><span class="line">                            lotteryArea.sort(cntDownTimeDown);</span><br><span class="line">                            <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> candidateArea.get(candidateArea.size() - <span class="number">1</span>);</span><br><span class="line">                            <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> lotteryArea.get(lotteryArea.size() - <span class="number">1</span>);</span><br><span class="line">                            <span class="keyword">if</span>(user1.cnt &gt; user2.cnt)&#123;</span><br><span class="line">                                user1.time = user2.time = i;</span><br><span class="line">                                candidateArea.set(candidateArea.size() - <span class="number">1</span>,user2);</span><br><span class="line">                                lotteryArea.set(lotteryArea.size()-<span class="number">1</span>,user1);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ArrayList&lt;Integer&gt; ansItem = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(lotteryArea.size());</span><br><span class="line">            <span class="keyword">for</span> (User lotteryUser : lotteryArea) &#123;</span><br><span class="line">                ansItem.add(lotteryUser.id);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.add(ansItem);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ids = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                ops=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1</span></span><br><span class="line"><span class="comment">        1,2</span></span><br><span class="line"><span class="comment">        1,2</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        3,4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lotteryUidList = getLotteryUidList(ids, ops, k);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; integers : lotteryUidList) &#123;</span><br><span class="line">            System.out.println(integers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        <span class="type">int</span> id,cnt,time;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> t)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">            time = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(N^2)$，因为ArrayList删除的时候，时间复杂的是平方级别。</p><h1 id="3-最优解"><a href="#3-最优解" class="headerlink" title="3. 最优解"></a>3. 最优解</h1><h2 id="3-1-算法分析"><a href="#3-1-算法分析" class="headerlink" title="3.1. 算法分析"></a>3.1. 算法分析</h2><p>上面的平凡解中在每一次事件发生的时候，需要在候选区域中寻找购买数量最多，且来的最早的用户。每次使用排序的方式，效率较低。</p><p>我们可以使用堆维护候选区域和获奖区域，候选区域组成 按照购买数量升序，进入时间降序的大顶堆，同时获奖区域 按照购买数量降序，进入时间降序的大顶堆；</p><p>则候选区域堆顶就是购买数量最多且来的最早的，获奖区域堆顶就是购买数量最少，且来的最早的。同时堆可以随着元素的添加删除动态调整。</p><p>可以在堆结构中加一个contains方法，来判断一个元素是否在堆中。</p><h2 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2. 代码"></a>3.2. 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LotteryGameMethod2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">getLotteryUidList</span><span class="params">(<span class="type">int</span>[] ids, <span class="type">int</span>[] ops, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        HashMap&lt;Integer,User&gt; map  = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        MyHeap&lt;User&gt; lotteryArea = <span class="keyword">new</span> <span class="title class_">MyHeap</span>&lt;&gt;((a,b)-&gt;a.cnt!= b.cnt?b.cnt-a.cnt:b.time-a.time),</span><br><span class="line">                candidateArea = <span class="keyword">new</span> <span class="title class_">MyHeap</span>&lt;&gt;((a,b)-&gt;a.cnt!=b.cnt?a.cnt-b.cnt:b.time-a.time);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,len=ids.length;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;len;++i)&#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> map.get(ids[i]);</span><br><span class="line">            <span class="keyword">if</span>(!(user==<span class="literal">null</span> &amp;&amp; ops[i] ==<span class="number">0</span> ))&#123;</span><br><span class="line">                <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">                    user = <span class="keyword">new</span> <span class="title class_">User</span>(ids[i],i);</span><br><span class="line">                    map.put(ids[i],user);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(ops[i]==<span class="number">0</span>)--user.cnt;</span><br><span class="line">                <span class="keyword">else</span> ++user.cnt;</span><br><span class="line">                <span class="keyword">if</span>(user.cnt == <span class="number">0</span>)&#123;</span><br><span class="line">                    map.remove(ids[i]);</span><br><span class="line">                    lotteryArea.remove(user);</span><br><span class="line">                    candidateArea.remove(user);</span><br><span class="line">                    <span class="keyword">if</span> (lotteryArea.size()&lt;k &amp;&amp; candidateArea.size() &gt;<span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="type">User</span> <span class="variable">poll</span> <span class="operator">=</span> candidateArea.poll();</span><br><span class="line">                        poll.time = i;</span><br><span class="line">                        lotteryArea.add(poll);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(lotteryArea.size()&lt;k)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!lotteryArea.contains(user))lotteryArea.add(user);</span><br><span class="line">                        <span class="keyword">else</span> lotteryArea.update(user);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!lotteryArea.contains(user) &amp;&amp; !candidateArea.contains(user))&#123;</span><br><span class="line">                            candidateArea.add(user);</span><br><span class="line">                        &#125;</span><br><span class="line">                        candidateArea.update(user);</span><br><span class="line">                        lotteryArea.update(user);</span><br><span class="line">                        <span class="keyword">if</span>(candidateArea.size() &gt; <span class="number">0</span> &amp;&amp; candidateArea.peek().cnt &gt; lotteryArea.peek().cnt)&#123;</span><br><span class="line">                            <span class="type">User</span> <span class="variable">candidate</span> <span class="operator">=</span> candidateArea.poll();</span><br><span class="line">                            <span class="type">User</span> <span class="variable">lottery</span> <span class="operator">=</span> lotteryArea.poll();</span><br><span class="line">                            candidate.time = lottery.time = i;</span><br><span class="line">                            candidateArea.add(lottery);</span><br><span class="line">                            lotteryArea.add(candidate);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Integer&gt; ansItem = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(lotteryArea.size());</span><br><span class="line">            <span class="keyword">for</span> (User lotteryUser : lotteryArea.getAll()) &#123;</span><br><span class="line">                ansItem.add(lotteryUser.id);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.add(ansItem);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        <span class="type">int</span> id, cnt,time;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> t)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.id=id;</span><br><span class="line">            time=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyHeap</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ArrayList&lt;T&gt; arrayList;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> HashMap&lt;T,Integer&gt; indexMap;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Comparator&lt;T&gt; comparator;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyHeap</span><span class="params">(Comparator&lt;T&gt; comparator)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">            arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            indexMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T data)</span>&#123;</span><br><span class="line">            indexMap.put(data,size);</span><br><span class="line">            arrayList.add(data);</span><br><span class="line">            heapInsert(size++);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(T data)</span>&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">index</span> <span class="operator">=</span> indexMap.get(data);</span><br><span class="line">            <span class="keyword">if</span>(index!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(index == size-<span class="number">1</span>)&#123;</span><br><span class="line">                    arrayList.remove(--size);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    swap(arrayList.get(index),arrayList.get(--size));</span><br><span class="line">                    resign(index);</span><br><span class="line">                    arrayList.remove(size);</span><br><span class="line">                &#125;</span><br><span class="line">                indexMap.remove(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">poll</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">data</span> <span class="operator">=</span> arrayList.get(<span class="number">0</span>);</span><br><span class="line">            --size;</span><br><span class="line">            <span class="keyword">if</span>(size==<span class="number">0</span>)&#123;</span><br><span class="line">                arrayList.remove(<span class="number">0</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                swap(arrayList.get(<span class="number">0</span>),arrayList.get(size));</span><br><span class="line">                resign(<span class="number">0</span>);</span><br><span class="line">                arrayList.remove(size);</span><br><span class="line">            &#125;</span><br><span class="line">            indexMap.remove(data);</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> arrayList.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(T data)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> indexMap.containsKey(data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(T data)</span>&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">index</span> <span class="operator">=</span> indexMap.get(data);</span><br><span class="line">            <span class="keyword">if</span>(index!=<span class="literal">null</span>)resign(index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ArrayList&lt;T&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> arrayList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resign</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">            heapInsert(index);</span><br><span class="line">            heapify(index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapInsert</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">            <span class="type">int</span> parent;</span><br><span class="line">            <span class="keyword">while</span>(comparator.compare(arrayList.get(index),arrayList.get(parent = (index-<span class="number">1</span>)/<span class="number">2</span>)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                swap(arrayList.get(index),arrayList.get(parent));</span><br><span class="line">                index = parent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">            <span class="type">int</span> child, bnd = size&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(index&lt;bnd)&#123;</span><br><span class="line">                child = (index&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(child+<span class="number">1</span>&lt;size &amp;&amp; comparator.compare(arrayList.get(child),arrayList.get(child+<span class="number">1</span>)) &lt; <span class="number">0</span>)++child;</span><br><span class="line">                <span class="keyword">if</span>(comparator.compare(arrayList.get(index),arrayList.get(child)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    swap(arrayList.get(index),arrayList.get(child));</span><br><span class="line">                    index = child;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(T t1, T t2)</span>&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">index1</span> <span class="operator">=</span> indexMap.get(t1),</span><br><span class="line">                    index2 = indexMap.get(t2);</span><br><span class="line">            arrayList.set(index1,t2);</span><br><span class="line">            arrayList.set(index2,t1);</span><br><span class="line">            indexMap.put(t1,index2);</span><br><span class="line">            indexMap.put(t2,index1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ids = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                ops=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1</span></span><br><span class="line"><span class="comment">        1,2</span></span><br><span class="line"><span class="comment">        1,2</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        2,3</span></span><br><span class="line"><span class="comment">        3,4</span></span><br><span class="line"><span class="comment">        3,4</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lotteryUidList = getLotteryUidList(ids, ops, k);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; integers : lotteryUidList) &#123;</span><br><span class="line">            System.out.println(integers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂的$O(N\log_2N)$</p><h1 id="4-测试程序"><a href="#4-测试程序" class="headerlink" title="4. 测试程序"></a>4. 测试程序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LotteryGameMethodTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">100_0000</span>,maxArrayLen = <span class="number">100</span>;</span><br><span class="line">        <span class="type">LotteryGameMethod1</span> <span class="variable">lotteryGameMethod1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LotteryGameMethod1</span>();</span><br><span class="line">        <span class="type">LotteryGameMethod2</span> <span class="variable">lotteryGameMethod2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LotteryGameMethod2</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;times;++i)&#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> random.nextInt(maxArrayLen)+<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span>[] ids = <span class="keyword">new</span> <span class="title class_">int</span>[len], ops = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span>;j&lt;len;++j)&#123;</span><br><span class="line">                ids[j] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">                ops[j] = random.nextInt(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> random.nextInt(<span class="number">20</span>)+<span class="number">1</span>;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; lotteryUidList1 = LotteryGameMethod1.getLotteryUidList(ids, ops, k);</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; lotteryUidList2 = LotteryGameMethod2.getLotteryUidList(ids, ops, k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;len;++j)&#123;</span><br><span class="line">                List&lt;Integer&gt; integers1 = lotteryUidList1.get(j);</span><br><span class="line">                List&lt;Integer&gt; integers2 = lotteryUidList2.get(j);</span><br><span class="line">                <span class="keyword">if</span>(integers1.size()!=integers2.size())&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Oops&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                integers1.sort(Integer::compare);</span><br><span class="line">                integers2.sort(Integer::compare);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> m=<span class="number">0</span>;m&lt;integers1.size();++m)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!integers1.get(m).equals(integers2.get(m)))&#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Oops&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test done&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
          <category> 堆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆</title>
      <link href="/2022/10/10/enhanced-heap/"/>
      <url>/2022/10/10/enhanced-heap/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-数据结构介绍"><a href="#1-数据结构介绍" class="headerlink" title="1. 数据结构介绍"></a>1. 数据结构介绍</h1><p>要求实现一种堆数据结构，具有如下操作：</p><ol><li>可以动态添加元素</li><li>可以修改给定元素</li><li>可以动态删除元素，可以删除指定位置的元素，以及删除给定的元素</li><li>获取堆顶元素</li><li>弹出堆顶</li><li>获取堆中的元素个数</li><li>用户可以指定比较策略</li></ol><h1 id="2-算法"><a href="#2-算法" class="headerlink" title="2. 算法"></a>2. 算法</h1><ul><li>对于可以动态增删元素，可以使用动态数组ArrayList来实现；</li><li>如果需要对给定的元素进行操作，我们需要知道这个元素在堆数组中的下标，因此需要一个查找表记录每一个元素及其在堆数组中的下标；</li><li>对于修改元素，我们只需要将修改后的元素同时做一次heapInsert和heapify即可，因为修改后，元素的排序指标可能变大也可能变小，或者不变，因此heapInsert和heapify最多只会发生一个；这个叫做元素的resign（重新分配）</li><li>对于删除元素，我们只需要把最后一个元素last和被删除的元素交换，堆的大小减少1，然后resign这个last元素，如果被删除的刚好是最后一个，直接删除即可。</li><li>可以使用比较器让比较策略灵活指定。</li></ul><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnhancedHeap</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;T&gt; arrayList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;T,Integer&gt; indexMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Comparator&lt;T&gt; comparator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EnhancedHeap</span><span class="params">(Comparator&lt;T&gt; comparator)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">        arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        indexMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        arrayList.add(data);</span><br><span class="line">        indexMap.put(data,size);</span><br><span class="line">        heapInsert(size++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">index</span> <span class="operator">=</span> indexMap.get(data);</span><br><span class="line">        <span class="keyword">if</span>(index != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index == size -<span class="number">1</span>)&#123;</span><br><span class="line">                arrayList.remove(--size);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                swap(arrayList.get(index),arrayList.get(--size));</span><br><span class="line">                arrayList.remove(size);</span><br><span class="line">                resign(index);</span><br><span class="line">            &#125;</span><br><span class="line">            indexMap.remove(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">index</span> <span class="operator">=</span> indexMap.get(data);</span><br><span class="line">        <span class="keyword">if</span> (index != <span class="literal">null</span>)resign(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">poll</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="type">T</span> <span class="variable">ret</span>  <span class="operator">=</span> arrayList.get(<span class="number">0</span>);</span><br><span class="line">         swap(ret,arrayList.get(size - <span class="number">1</span>));</span><br><span class="line">         arrayList.remove(--size);</span><br><span class="line">         heapify(<span class="number">0</span>);</span><br><span class="line">         indexMap.remove(ret);</span><br><span class="line">         <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arrayList.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resign</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        heapInsert(index);</span><br><span class="line">        heapify(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapInsert</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="type">int</span> parent;</span><br><span class="line">        <span class="keyword">while</span>(comparator.compare(arrayList.get(index),arrayList.get(parent = (index-<span class="number">1</span>) / <span class="number">2</span> )) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            swap(arrayList.get(index), arrayList.get(parent));</span><br><span class="line">            index = parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="type">int</span> child, bound = size &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; bound)&#123;</span><br><span class="line">            child = (index &lt;&lt; <span class="number">1</span>) | <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(child + <span class="number">1</span> &lt; size &amp;&amp; comparator.compare(arrayList.get(child),arrayList.get(child+<span class="number">1</span>)) &lt; <span class="number">0</span>) ++child;</span><br><span class="line">            <span class="keyword">if</span>(comparator.compare(arrayList.get(index),arrayList.get(child)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                swap(arrayList.get(index),arrayList.get(child));</span><br><span class="line">                index = child;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(T t1, T t2)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">index1</span> <span class="operator">=</span> indexMap.get(t1), index2 = indexMap.get(t2);</span><br><span class="line">        arrayList.set(index1,t2);</span><br><span class="line">        arrayList.set(index2,t1);</span><br><span class="line">        indexMap.put(t1,index2);</span><br><span class="line">        indexMap.put(t2,index1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 测试程序</span></span><br><span class="line">        EnhancedHeap&lt;Info&gt; enhancedHeap = <span class="keyword">new</span> <span class="title class_">EnhancedHeap</span>&lt;&gt;((a,b)-&gt; a.value - b.value);</span><br><span class="line">        <span class="type">Info</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Info</span>(<span class="number">1</span>), b = <span class="keyword">new</span> <span class="title class_">Info</span>(<span class="number">2</span>), c = <span class="keyword">new</span> <span class="title class_">Info</span>(<span class="number">3</span>);</span><br><span class="line">        enhancedHeap.add(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;size: &quot;</span>+enhancedHeap.size+<span class="string">&quot;  top: &quot;</span>+enhancedHeap.peek());</span><br><span class="line">        enhancedHeap.add(b);</span><br><span class="line">        System.out.println(<span class="string">&quot;size: &quot;</span>+enhancedHeap.size+<span class="string">&quot;  top: &quot;</span>+enhancedHeap.peek());</span><br><span class="line">        enhancedHeap.add(c);</span><br><span class="line">        System.out.println(<span class="string">&quot;size: &quot;</span>+enhancedHeap.size+<span class="string">&quot;  top: &quot;</span>+enhancedHeap.peek());</span><br><span class="line">        c.value = <span class="number">7</span>;</span><br><span class="line">        enhancedHeap.update(c);</span><br><span class="line">        System.out.println(<span class="string">&quot;size: &quot;</span>+enhancedHeap.size+<span class="string">&quot;  top: &quot;</span>+enhancedHeap.peek());</span><br><span class="line">        enhancedHeap.remove(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;size: &quot;</span>+enhancedHeap.size+<span class="string">&quot;  top: &quot;</span>+enhancedHeap.peek());</span><br><span class="line">        System.out.println(<span class="string">&quot;top: &quot;</span>+enhancedHeap.poll());</span><br><span class="line">        System.out.println(<span class="string">&quot;size: &quot;</span>+enhancedHeap.size+<span class="string">&quot;  top: &quot;</span>+enhancedHeap.peek());</span><br><span class="line">        enhancedHeap.add(<span class="keyword">new</span> <span class="title class_">Info</span>(<span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;size: &quot;</span>+enhancedHeap.size+<span class="string">&quot;  top: &quot;</span>+enhancedHeap.peek());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Info</span><span class="params">(<span class="type">int</span> v)</span>&#123;</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value+<span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
          <category> 堆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/2022/10/03/heapSort/"/>
      <url>/2022/10/03/heapSort/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-整体思路"><a href="#1-整体思路" class="headerlink" title="1. 整体思路"></a>1. 整体思路</h1><p>和选择排序是一样的，首先在所有元素中选出最大的元素放在最后的位置，然后在剩下的元素中选出最大的放在倒数第二的位置，……，以此类推，直到剩下一个与元素为止。</p><h1 id="2-算法过程"><a href="#2-算法过程" class="headerlink" title="2. 算法过程"></a>2. 算法过程</h1><ol><li><p>首先把待排序的数组原地调整成一个堆结构，什么？不知道堆数据结构，可以看<a href="https://blog.csdn.net/qq_37684467/article/details/117229493">这篇文章</a>；</p></li><li><p>假设数组需要从小到大排序，我们使用大顶堆来完成。数组调整成堆可以使用heapify，线性时间复杂度。</p></li><li><p>只要堆中的元素个数（size）大于1，执行下面的逻辑</p><p>3.1. 把堆顶元素和数组中下标为size-1的元素做交换；</p><p>3.2. size–；</p><p>3.3. 对堆顶元素做heapify操作，调整堆。</p></li></ol><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h1><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">100_0000</span>, maxArraySize = <span class="number">1000</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">while</span>(times-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> r.nextInt(maxArraySize);</span><br><span class="line">            <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[len], arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) arr1[i] = arr2[i] = r.nextInt(<span class="number">21</span>) - <span class="number">10</span>;</span><br><span class="line">            Arrays.sort(arr1);</span><br><span class="line">            heapSort(arr2);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr1[i] != arr2[i]) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; ++i) System.out.print(arr1[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    System.out.println();</span><br><span class="line">                    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; ++i) System.out.print(arr2[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    System.out.println();</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i,len = arr.length;</span><br><span class="line">        <span class="keyword">for</span>(i = (len &gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt; -<span class="number">1</span>; --i) heapIfy(arr,len,i); <span class="comment">// 创建大顶堆</span></span><br><span class="line">        <span class="keyword">for</span>(i = len; i &gt; <span class="number">1</span>;) &#123;<span class="comment">// i就是堆的size</span></span><br><span class="line">            swap(arr,<span class="number">0</span>,--i);</span><br><span class="line">            heapIfy(arr,i,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapIfy</span><span class="params">(<span class="type">int</span>[] heap, <span class="type">int</span> size, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">// 堆的元素个数是size，对下标为index的元素做heapify操作</span></span><br><span class="line">        <span class="type">int</span> child, bound = size &gt;&gt; <span class="number">1</span>, v = heap[index];</span><br><span class="line">        <span class="keyword">while</span>(index &lt; bound) &#123;</span><br><span class="line">            child = (index &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(child + <span class="number">1</span> &lt; size &amp;&amp; heap[child + <span class="number">1</span>] &gt; heap[child]) ++child;</span><br><span class="line">            <span class="keyword">if</span>(v &gt;= heap[child]) <span class="keyword">break</span>;</span><br><span class="line">            heap[index] = heap[child];</span><br><span class="line">            index = child;</span><br><span class="line">        &#125;</span><br><span class="line">        heap[index] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ls</title>
      <link href="/2022/09/20/ls/"/>
      <url>/2022/09/20/ls/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-命令作用"><a href="#1-命令作用" class="headerlink" title="1. 命令作用"></a>1. 命令作用</h1><p>显示目录中的文件信息。</p><h1 id="2-命令格式"><a href="#2-命令格式" class="headerlink" title="2. 命令格式"></a>2. 命令格式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> [options]... [file]...</span><br></pre></td></tr></table></figure><h1 id="3-命令解释"><a href="#3-命令解释" class="headerlink" title="3. 命令解释"></a>3. 命令解释</h1><ol><li>ls程序可以显示目录中的任何文件信息（包括目录的信息），选项和参数和随意混合使用，后来的选项可以覆盖前面与之不兼容的选项；</li><li>ls命令不带任何选项和参数的情况下，相当于ls . ，显示当前目录的文件信息。对于非选项的命令行参数，例如ls xxx，如果xxx是一个目录的话，那么ls程序就会显示这个目录内的文件信息（非递归，且忽略以.（点号）开头的文件），如果xxx是一个文件的话，那么只是显示它的名称。</li></ol><h1 id="4-选项"><a href="#4-选项" class="headerlink" title="4. 选项"></a>4. 选项</h1><h2 id="4-1-a-–all"><a href="#4-1-a-–all" class="headerlink" title="4.1. -a,–all"></a>4.1. -a,–all</h2><p>不忽略名称以.（点）开头的文件</p><h2 id="4-2-A-–almost-all"><a href="#4-2-A-–almost-all" class="headerlink" title="4.2. -A, –almost-all"></a>4.2. -A, –almost-all</h2><p>不忽略名称以.（点）开头的文件，除了.（当前目录）和..（上一级目录），-a,–all可以覆盖此选项。</p><h2 id="4-3-B"><a href="#4-3-B" class="headerlink" title="4.3. -B"></a>4.3. -B</h2><p>忽略名称以’~‘结尾的，这些文件一般是文本编辑器的备份文件。–ignore&#x3D;’*<del>‘ –ignore&#x3D;’.*</del>‘具有相同的效果。</p><h2 id="4-4-d-–directory"><a href="#4-4-d-–directory" class="headerlink" title="4.4. -d,–directory"></a>4.4. -d,–directory</h2><p>当ls file的时候，如果file是一个目录，那么会显示它立里面的内容，如果想显示目录本身的内容的话，需要使用</p><p>-d选项。</p><h2 id="4-5-–group-directories-first"><a href="#4-5-–group-directories-first" class="headerlink" title="4.5. –group-directories-first"></a>4.5. –group-directories-first</h2><p>会把目录全部显示在文件的前面，文件和目录单独排序。</p><h2 id="4-6-–hide-x3D-PATTERN"><a href="#4-6-–hide-x3D-PATTERN" class="headerlink" title="4.6. –hide&#x3D;PATTERN"></a>4.6. –hide&#x3D;PATTERN</h2><p>隐藏文件名称匹配pattern的文件，如该–all,-a 或者 –almost-all,-A 这些选项在的时候，–hide&#x3D;PATTERN就不起作用了。–ignore&#x3D;PATTERN可以起到相同的作用，但是–all,-a 或者 –almost-all,-A 这些选项对–ignore&#x3D;PATTERN不起作用。</p><p>例如当前目录中有一个文件README<del>，使用ls –hide&#x3D;’*</del>‘ -A，不能隐藏掉README<del>，但是ls –ignore&#x3D;’*</del>‘ -A 就可以。</p><h2 id="4-7-I-pattern-–ignore-x3D-pattern"><a href="#4-7-I-pattern-–ignore-x3D-pattern" class="headerlink" title="4.7. -I pattern, –ignore&#x3D;pattern"></a>4.7. -I pattern, –ignore&#x3D;pattern</h2><p>忽略文件名称和shell 模式匹配的文件。这里的pattern不是正则，是shell的glob表达式。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> --ignore=<span class="string">&#x27;.??*&#x27;</span> --ignore=<span class="string">&#x27;.[^.]&#x27;</span> --ignore=<span class="string">&#x27;#*&#x27;</span></span><br></pre></td></tr></table></figure><p>第一个选项表示忽略文件名称以.开头的，且文件名称长度至少是三个字符的文件；</p><p>第二个选项表示忽略文件名称以.开头的，且名称不是..的文件；</p><p>第三个选项表示忽略文件名称是以’#’开头的文件；</p><h2 id="4-8-R-–recursive"><a href="#4-8-R-–recursive" class="headerlink" title="4.8. -R, –recursive"></a>4.8. -R, –recursive</h2><p>递归显示目录的内容。</p><h2 id="4-9-i-–inode"><a href="#4-9-i-–inode" class="headerlink" title="4.9 -i, –inode"></a>4.9 -i, –inode</h2><p>在文件名称的左边显示inode信息，inode在一个文件系统中是唯一的。</p><h2 id="4-10-h-–human-readable"><a href="#4-10-h-–human-readable" class="headerlink" title="4.10  -h, –human-readable"></a>4.10  -h, –human-readable</h2><p>以人类可读的方式显示文件的size，文件大小是以字节数显示的，这个选项可以在适当的时候，显示KB，MB等，这里的M默认是2的10次方（1048576）。这个选项与--block-size&#x3D;human-reabable是等价的。</p><p>如果需要让单位以10为基数，即M是10的三次方，可以使用 --si选项。</p><h2 id="4-11-l-–format-x3D-long-–format-x3D-verbose"><a href="#4-11-l-–format-x3D-long-–format-x3D-verbose" class="headerlink" title="4.11. -l, –format&#x3D;long, –format&#x3D;verbose"></a>4.11. -l, –format&#x3D;long, –format&#x3D;verbose</h2><p>长格式显示。除了每一个文件的文件名称，还会显示文件的类型，文件模式位，硬链接的数目，属主，属组，文件size，时间戳（修改时间）。</p><p>在显示每一个目录信息的开头，显示total blocks信息，代表文件系统为这个目录下的所有文件分配的磁盘块的个数<a href="%E5%85%B6%E5%AE%9E%E5%AE%83%E7%BB%9F%E8%AE%A1%E7%9A%84%E6%98%AF%E6%AF%8F%E4%B8%80%E4%B8%AA%E7%A1%AC%E9%93%BE%E6%8E%A5%E7%9A%84%E7%A3%81%E7%9B%98%E5%9D%97%E6%80%BB%E6%95%B0%EF%BC%8C%E5%8D%B3%E5%A6%82%E6%9E%9C%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%8D%A0%E7%94%A84%E4%B8%AA%E7%A3%81%E7%9B%98%E5%9D%97%EF%BC%8C%E4%B8%94%E5%AE%83%E6%9C%89%E4%B8%A4%E4%B8%AA%E7%A1%AC%E9%93%BE%E6%8E%A5%EF%BC%8C%E9%82%A3%E4%B9%88%E5%AE%83%E7%9A%84%E7%A3%81%E7%9B%98%E5%9D%97%E4%BC%9A%E8%AE%A1%E7%AE%97%E4%B8%A4%E6%AC%A1%EF%BC%8C%E8%BF%99%E6%9C%89%E5%8F%AF%E8%83%BD%E6%98%AF%E4%B8%AAbug">^1</a>。磁盘块默认1024字节。</p><p>文件类型都有：</p><table><thead><tr><th>文件类型代号</th><th>文件类型</th></tr></thead><tbody><tr><td>-</td><td>普通文件</td></tr><tr><td>b</td><td>块设备文件，例如硬盘</td></tr><tr><td>c</td><td>字符设备文件，例如键盘</td></tr><tr><td>C</td><td>high performance (“contiguous data”) file</td></tr><tr><td>d</td><td>目录</td></tr><tr><td>D</td><td>door (Solaris)</td></tr><tr><td>l</td><td>符号链接，软链接</td></tr><tr><td>M</td><td>off-line (“migrated”) file (Cray DMF)</td></tr><tr><td>n</td><td>network special file (HP-UX)</td></tr><tr><td>p</td><td>FIFO，命名管道</td></tr><tr><td>P</td><td>port (Solaris)</td></tr><tr><td>s</td><td>套接字文件</td></tr><tr><td>?</td><td>其他文件类型</td></tr><tr><td>D</td><td>door (Solaris)</td></tr><tr><td>l</td><td>符号链接，软链接</td></tr><tr><td>M</td><td>off-line (“migrated”) file (Cray DMF)</td></tr><tr><td>n</td><td>network special file (HP-UX)</td></tr></tbody></table><h2 id="4-12-n-–numeric-uid-gid"><a href="#4-12-n-–numeric-uid-gid" class="headerlink" title="4.12. -n, –numeric-uid-gid"></a>4.12. -n, –numeric-uid-gid</h2><p>以长格式显示文件信息，但文件的所有者和所在组使用右对齐的数字ID显示，而不是使用左对齐的名称显示。</p><h2 id="4-13-–author"><a href="#4-13-–author" class="headerlink" title="4.13. –author"></a>4.13. –author</h2><p>用于长格式显示的情况下，需要与-l配合使用。显示文件的作者。在GNU&#x2F;Hurd系统中，文件的作者和拥有者可以是不一样的，对其他系统来说，他们俩是一个意思。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Linux </category>
          
          <category> shell </category>
          
          <category> 常用命令 </category>
          
          <category> 目录操作 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pwd</title>
      <link href="/2022/09/19/pwd/"/>
      <url>/2022/09/19/pwd/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-命令作用"><a href="#1-命令作用" class="headerlink" title="1. 命令作用"></a>1. 命令作用</h1><p>显示shell的当前工作目录中的绝对路径。</p><h1 id="2-选项"><a href="#2-选项" class="headerlink" title="2. 选项"></a>2. 选项</h1><h2 id="2-1-L"><a href="#2-1-L" class="headerlink" title="2.1. -L"></a>2.1. -L</h2><p>默认选项，打印出的路径包含符号链接。</p><h2 id="2-2-P"><a href="#2-2-P" class="headerlink" title="2.2. -P"></a>2.2. -P</h2><p>打印出的路径不包含符号链接。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Linux </category>
          
          <category> shell </category>
          
          <category> 常用命令 </category>
          
          <category> shell内建命令 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cd</title>
      <link href="/2022/09/19/ShellExecEnv-cd/"/>
      <url>/2022/09/19/ShellExecEnv-cd/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-命令作用"><a href="#1-命令作用" class="headerlink" title="1. 命令作用"></a>1. 命令作用</h1><p>切换当前shell的工作目录。</p><h1 id="2-命令格式"><a href="#2-命令格式" class="headerlink" title="2. 命令格式"></a>2. 命令格式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> [-L] [-P [-e]] [<span class="built_in">dir</span>]</span><br></pre></td></tr></table></figure><h1 id="3-命令解释"><a href="#3-命令解释" class="headerlink" title="3. 命令解释"></a>3. 命令解释</h1><h2 id="3-1-特殊参数"><a href="#3-1-特殊参数" class="headerlink" title="3.1. 特殊参数"></a>3.1. 特殊参数</h2><p>cd命令后面一般跟一个目录的路径，可以使用绝对路径或者相对路径。如果不提供目录参数，那么默认$HOME，会被使用，即切换到用户的家目录。如果目录参参数是-，那么-会被替换为$OLDPWD，表示切换到上一次shell的工作目录。</p><p>如果你在dir后面提供了多余的参数，那么会被忽略，比如你执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root foo bar</span><br></pre></td></tr></table></figure><p>foo bar会被忽略。（经过测试，某些版本的shell会打印出错误消息，例如：“bash: cd: too many arguments”）</p><p> 如果一个文件夹的名称叫做“-”，那么使用cd -是不能切换进去的，可以使用cd .&#x2F;- 实现。</p><h2 id="3-2-CDPATH"><a href="#3-2-CDPATH" class="headerlink" title="3.2. CDPATH"></a>3.2. CDPATH</h2><p>如果环境变量CDPATH不为空，当我们直接输入cd dir的时候，如果dir在CDPATH中的某个目录中的时候，cd命令就会直接切换到这个目录。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">zk@zk:~$ <span class="built_in">pwd</span></span><br><span class="line">/home/zk</span><br><span class="line">zk@zk:~$ <span class="built_in">ls</span></span><br><span class="line">Desktop    Downloads  Pictures  Public     Tools        Videos</span><br><span class="line">Documents  Music      Projects  Templates  usrlocalbin</span><br><span class="line">zk@zk:~$ CDPATH=/home/zk</span><br><span class="line">zk@zk:~$ <span class="built_in">cd</span> /</span><br><span class="line">zk@zk:/$ <span class="built_in">cd</span> Tools/</span><br><span class="line">/home/zk/Tools</span><br><span class="line">zk@zk:~/Tools$ </span><br></pre></td></tr></table></figure><p>&#x2F;home&#x2F;zk目录下有Tools，Projects等目录，当把CDPATH设置成&#x2F;home&#x2F;zk的时候，此时直接输入cd Tools的时候，cd发现Tools在&#x2F;home&#x2F;zk中，那么就会之际切换到&#x2F;home&#x2F;zk&#x2F;Tools中。</p><p>CDPATH中可以设置不止一个路径，多个路径使用：（冒号）分隔。</p><p>如该cd dir中dir是一个绝对路径，那么CDPATH将被禁用。如该CDPATH中的目录或者-参数指定的目录被成功切换，那么这个目录的绝对路径会被打印到标准输出。</p><h2 id="3-3-的使用"><a href="#3-3-的使用" class="headerlink" title="3.3 $_的使用"></a>3.3 $_的使用</h2><p>$_指的是上一个命令的最后一个参数，利用这个我们可以使用一条命令，新建一个目录的同时，并cd进入这个目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> aa &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> aa ; <span class="built_in">cd</span> <span class="variable">$_</span></span><br></pre></td></tr></table></figure><h1 id="4-选项"><a href="#4-选项" class="headerlink" title="4. 选项"></a>4. 选项</h1><h2 id="4-1-L选项"><a href="#4-1-L选项" class="headerlink" title="4.1. -L选项"></a>4.1. -L选项</h2><p>这是个默认的选项，使用这个选项的时候，当cd dir的时候，如果dir是符号链接的话，cd会切换到符号链接，而不是符号链接指向的目录。例如，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">zk@zk:~$ <span class="built_in">ls</span> -lh</span><br><span class="line">total 40K</span><br><span class="line">drwxr-xr-x 2 zk zk 4.0K Sep 17 15:02 Desktop</span><br><span class="line">drwxr-xr-x 3 zk zk 4.0K Sep 16 13:29 Documents</span><br><span class="line">drwxr-xr-x 4 zk zk 4.0K Sep 18 22:26 Downloads</span><br><span class="line">drwxr-xr-x 2 zk zk 4.0K Sep 14 16:45 Music</span><br><span class="line">drwxr-xr-x 2 zk zk 4.0K Sep 15 12:37 Pictures</span><br><span class="line">drwxrwxr-x 6 zk zk 4.0K Sep 18 22:27 Projects</span><br><span class="line">drwxr-xr-x 2 zk zk 4.0K Sep 14 16:45 Public</span><br><span class="line">drwxr-xr-x 2 zk zk 4.0K Sep 14 16:45 Templates</span><br><span class="line">drwxrwxr-x 3 zk zk 4.0K Sep 19 15:44 Tools</span><br><span class="line">lrwxrwxrwx 1 zk zk   15 Sep 19 00:26 usrlocalbin -&gt; /usr/local/bin/</span><br><span class="line">drwxr-xr-x 2 zk zk 4.0K Sep 14 16:45 Videos</span><br><span class="line">zk@zk:~$ <span class="built_in">cd</span> usrlocalbin</span><br><span class="line">/home/zk/usrlocalbin</span><br><span class="line">zk@zk:~/usrlocalbin$ <span class="built_in">pwd</span></span><br><span class="line">/home/zk/usrlocalbin</span><br><span class="line">zk@zk:~/usrlocalbin$ </span><br></pre></td></tr></table></figure><p>在&#x2F;home&#x2F;zk目录下，有一个usrlocalbin目录，它是一个指向&#x2F;usr&#x2F;local&#x2F;bin的符号链接，cd到这个目录以后，发现当前工作目录在&#x2F;home&#x2F;zk&#x2F;usrlocalbin，而不是在&#x2F;usr&#x2F;local&#x2F;bin。</p><p>如果cd dir中的dir包含..（父目录）和符号链接，那么-L选项会使得先处理..，再处理符号链接。例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/zk/usrlocalbin/../Tools</span><br></pre></td></tr></table></figure><p>这个命令会使得切换到&#x2F;home&#x2F;zk&#x2F;Tools，可见在符号链接usrlocalbin展开之前，已经处理了..</p><h2 id="4-2-P选项"><a href="#4-2-P选项" class="headerlink" title="4.2. -P选项"></a>4.2. -P选项</h2><p>这个选项和-L选项刚好相反，他会在切换到符号链接的时候，真正进入符号链接所指向的目录，并且如果..和符号链接同时出现在目录路径中的时候，会先展开符号链接，再处理..,例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">zk@zk:~$ <span class="built_in">pwd</span> ; <span class="built_in">ls</span> -lh</span><br><span class="line">/home/zk</span><br><span class="line">total 40K</span><br><span class="line">drwxr-xr-x 2 zk zk 4.0K Sep 17 15:02 Desktop</span><br><span class="line">drwxr-xr-x 3 zk zk 4.0K Sep 16 13:29 Documents</span><br><span class="line">drwxr-xr-x 4 zk zk 4.0K Sep 18 22:26 Downloads</span><br><span class="line">drwxr-xr-x 2 zk zk 4.0K Sep 14 16:45 Music</span><br><span class="line">drwxr-xr-x 2 zk zk 4.0K Sep 15 12:37 Pictures</span><br><span class="line">drwxrwxr-x 6 zk zk 4.0K Sep 18 22:27 Projects</span><br><span class="line">drwxr-xr-x 2 zk zk 4.0K Sep 14 16:45 Public</span><br><span class="line">drwxr-xr-x 2 zk zk 4.0K Sep 14 16:45 Templates</span><br><span class="line">drwxrwxr-x 3 zk zk 4.0K Sep 19 15:44 Tools</span><br><span class="line">lrwxrwxrwx 1 zk zk   15 Sep 19 00:26 usrlocalbin -&gt; /usr/local/bin/</span><br><span class="line">drwxr-xr-x 2 zk zk 4.0K Sep 14 16:45 Videos</span><br><span class="line">zk@zk:~$ <span class="built_in">cd</span> -P usrlocalbin</span><br><span class="line">zk@zk:/usr/local/bin$ <span class="built_in">cd</span> </span><br><span class="line">zk@zk:~$ <span class="built_in">cd</span> /home/zk/usrlocalbin/../T</span><br><span class="line">Templates/ Tools/     </span><br><span class="line">zk@zk:~$ <span class="built_in">cd</span> -P /home/zk/usrlocalbin/../Tools/</span><br><span class="line">bash: <span class="built_in">cd</span>: /home/zk/usrlocalbin/../Tools/: No such file or directory</span><br><span class="line">zk@zk:~$ </span><br></pre></td></tr></table></figure><p>可见cd到usrlocalbin的时候，shell的工作目录进入了usrlocalbin指向真实目录&#x2F;usr&#x2F;local&#x2F;bin，当我们使用cd -P &#x2F;home&#x2F;zk&#x2F;usrlocalbin&#x2F;..&#x2F;Tools&#x2F;的时候，由于使用了-P选项，usrlocalbin会在解析..之前被展开，由于&#x2F;usr&#x2F;local&#x2F;bin目录的上一级目录中没有Tools目录，因此就会报错。</p><h1 id="4-3-e选项"><a href="#4-3-e选项" class="headerlink" title="4.3. -e选项"></a>4.3. -e选项</h1><p>这个选项和-P选项一起使用，暂时不清楚作用是啥。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Linux </category>
          
          <category> shell </category>
          
          <category> 常用命令 </category>
          
          <category> shell内建命令 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>od</title>
      <link href="/2022/09/07/LinuxTextShowCommand-od/"/>
      <url>/2022/09/07/LinuxTextShowCommand-od/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-命令作用"><a href="#1-命令作用" class="headerlink" title="1. 命令作用"></a>1. 命令作用</h1><p>od命令可以把文件的内容以字节块的形式展示，可以让我们看到文件的二进制数据。</p><h1 id="2-展示格式"><a href="#2-展示格式" class="headerlink" title="2. 展示格式"></a>2. 展示格式</h1><p>od命令是一行一行展示文件内容的，每一行的展示格式如下：</p><p>偏移量  字节块1 字节块2 字节块3……</p><p>偏移量是使用8进制表示的整数，代表当前展示的是文件中第几个字节开始的，默认偏移量是从0开始</p><p>每一个字节块的长度默认是C语言short int类型的字节长度，一般是两个字节，用8进制数表示，默认一行展示16个字节。</p><h1 id="3-选项"><a href="#3-选项" class="headerlink" title="3. 选项"></a>3. 选项</h1><h2 id="3-1-w-n-或-width-n"><a href="#3-1-w-n-或-width-n" class="headerlink" title="3.1. -w[n] 或 --width[-n]"></a>3.1. -w[n] 或 --width[-n]</h2><p>设置od命令一行展示的字节个数，默认是16，如果指定了选项，但是没有给出n，那么是32字节</p><h2 id="3-2-endian-x3D-order"><a href="#3-2-endian-x3D-order" class="headerlink" title="3.2. --endian&#x3D;order"></a>3.2. --endian&#x3D;order</h2><p>当od命令一个字节块包含多个字节的时候，字节展示的顺序，order有大端方式（big）和小断方式（little）。</p><h2 id="3-3-A-radix-或-address-radix-x3D-radix"><a href="#3-3-A-radix-或-address-radix-x3D-radix" class="headerlink" title="3.3. -A radix 或 --address-radix&#x3D;radix"></a>3.3. -A radix 或 --address-radix&#x3D;radix</h2><p>设置偏移量的显示格式，radix有如下选择：</p><ul><li>d：十进制</li><li>o：8进制（默认）</li><li>x：十六进制</li><li>n：不显示偏移量</li></ul><h2 id="3-4-t-type-或-format-x3D-type"><a href="#3-4-t-type-或-format-x3D-type" class="headerlink" title="3.4. -t type 或 --format&#x3D;type"></a>3.4. -t type 或 --format&#x3D;type</h2><p>指定字节块的展示样式，od是按照字节块展示数据的，那么一个字节块是展示成字符，十进制数字，还是浮点数呢？需要我们指定。</p><p>type的取值：</p><ul><li>a：以字符形式展示数据，一个字节一组，且只看低7位组成的ASCII的值，如果是可打印的字符，那么对应的字符，有些字符会换成字符的名称展示，例如如果是空格，打印sp，如果是换行打印nl，是0字节则打印nul；</li><li>c：一个字节一组，如果是可打印的字符，那么打印其ASCII的值，否则如果可以表示成使用反斜杠转义的C语言风格的字符，则转义后打印（例如换行就打印为\n），否则使用3位8进制数字表示这个字节。</li><li>d：有符号十进制整数，4个字节一组。</li><li>u：无符号十进制整数，4字节一组。</li><li>f：浮点数，8个字节一组</li><li>o：8进制整数，4字节一组</li><li>x：十六进制，4个字节一组。</li></ul><p>除了a和c以外，剩下的type取值的中字节块包含的字节数可以使用一个是进制数来指定，例如我想让文件内容显示为十进制，但是想一个字节一组，即一个字节显示为一个十进制整数，可以使用-t d1，其中1个字节，刚好数C语言中的char类型的字节长度，也可以写成-t dc</p><p>其他情况类似，字节个数和对应的替换字符如下：</p><ul><li>c：char 1字节</li><li>s：short 2字节</li><li>I： int 4字节</li><li>L： long  8&#x2F;4字节</li><li>F：float 4字节</li><li>D： double 8字节</li><li>L：long double 10&#x2F;12字节</li></ul><p>还有一些快捷选项：</p><ul><li>-a，等于 -t a</li><li>-b，等于 -t o1</li><li>-c，等于 -t c</li><li>-d，等于 -t u2</li><li>-f，等于 -t fF</li><li>-i，等于 -t dI</li><li>-l，等于 -t dL</li><li>-o，等于-t o2</li><li>-s，等于 -t d2</li><li>-x，等于 -t x2</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Linux </category>
          
          <category> shell </category>
          
          <category> 常用命令 </category>
          
          <category> 文件展示命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nl</title>
      <link href="/2022/09/05/LinuxTextShowCommand-nl/"/>
      <url>/2022/09/05/LinuxTextShowCommand-nl/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-命令作用"><a href="#1-命令作用" class="headerlink" title="1. 命令作用"></a>1. 命令作用</h1><p>nl命令允许可以把文本内容打印出来，同时可以给内容加上行号，相比cat命令，你可以控制行号的很多细节（比如对齐方式，显示字符宽度等），同时nl命令可以让你通过几个标号定义逻辑页，可以作为文本的格式化输出工具。</p><h1 id="2-命令格式"><a href="#2-命令格式" class="headerlink" title="2. 命令格式"></a>2. 命令格式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> [options]... [file]...</span><br></pre></td></tr></table></figure><p>当没有给出文件名称，或者使用-作为文件名称的时候，则nl显示标准输入的内容。</p><h1 id="3-原理解释"><a href="#3-原理解释" class="headerlink" title="3. 原理解释"></a>3. 原理解释</h1><p>nl命令把所有的文件内容看作一整个文档显示，根据分隔标记，把整个文档标记成页的不同部分，即header，body，footer。</p><p>header的分隔符是“:::”，body分割符“::”，footer的分割符是“:”，如果组成footer分割符的两个字符分别是ab的话，那么header的分割符就是ababab，body的就是abab。</p><p>分割符独占一行，即紧跟着每一种分割符的内容被认为是对应的页的部分，直到遇到其他分割符。例如一个文本的内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aaa</span><br><span class="line">\:\:\:</span><br><span class="line">bbb</span><br><span class="line">\:\:</span><br><span class="line">ccc</span><br><span class="line">123</span><br><span class="line">\:</span><br><span class="line">ddd</span><br></pre></td></tr></table></figure><ul><li>bbb属于header</li><li>ccc 123属于body</li><li>ddd属于footer</li></ul><p>第一个分隔符之前的内容也属于body，即aaa是body部分。当然header，body，footer可以在不同文件中。nl在显示文本的时候，会把分隔符替换为空行，默认只会对body添加行号。</p><h1 id="4-选项"><a href="#4-选项" class="headerlink" title="4. 选项"></a>4. 选项</h1><h2 id="4-1-b或-body-numbering-style"><a href="#4-1-b或-body-numbering-style" class="headerlink" title="4.1. -b或 --body-numbering-style"></a>4.1. -b或 --body-numbering-style</h2><p>指定body部分的行号添加策略，style有如下几个选择：</p><ul><li>a：为所有行添加行号</li><li>b：只为非空行添加行号，body默认是这个</li><li>n：不添加行号</li></ul><p>类似的，也可以指定header和footer的行号策略，选项分别如下：</p><ul><li>-f style 或 --footer-numbering&#x3D;style 指定footer的行号策略；</li><li>-h style 或 --header-numbering&#x3D;style 指定header的行号策略</li></ul><h2 id="4-2-d-cd或-section-delimiter-x3D-cd"><a href="#4-2-d-cd或-section-delimiter-x3D-cd" class="headerlink" title="4.2. -d cd或 --section-delimiter&#x3D;cd"></a>4.2. -d cd或 --section-delimiter&#x3D;cd</h2><p>这个选项指定分隔符，注意cd是两个字符，这样的话，cdcdcd后面的部分是header，cdcd后面的部分是body，cd后面的部分是footer了。默认情况下c&#x3D;‘\’，d&#x3D;‘:’，一般来说分隔符只能指定两个字符，当使用GNU扩展的时候，可以指定多个字符，也可以指定为空字符串（此时将禁用页分区的功能了）。</p><h2 id="4-3-i-number或-line-increment-x3D-number"><a href="#4-3-i-number或-line-increment-x3D-number" class="headerlink" title="4.3. -i number或--line-increment&#x3D;number"></a>4.3. -i number或--line-increment&#x3D;number</h2><p>这个选项指定行号的增量，例如初始行号是1，那么下一行是2，此时增量为1（默认是1），也可以指定负数。</p><h2 id="4-4-l-number或-join-blank-lines-x3D-number"><a href="#4-4-l-number或-join-blank-lines-x3D-number" class="headerlink" title="4.4. -l number或--join-blank-lines&#x3D;number"></a>4.4. -l number或--join-blank-lines&#x3D;number</h2><p>当有至少number个连续的空行的时候，只为最后一个空行设置行号，当连续空行个数小于number的时候，不为这些空行设置行号。空行指的是这一行，除了换行符以外，没有其他字符。</p><h2 id="4-5-n-format-或-number-format-x3D-format"><a href="#4-5-n-format-或-number-format-x3D-format" class="headerlink" title="4.5. -n format 或 --number-format&#x3D;format"></a>4.5. -n format 或 --number-format&#x3D;format</h2><p>指定行编号的样式，format有如下几个可选的值：</p><ul><li>ln：左对齐，没有前导0</li><li>rn：右对齐，没有前导0（默认）</li><li>rz：右对齐，右前导0</li></ul><p>nl输出的每一行的格式可以描述为这样：</p><p>行号区域 行号和内容的分隔区域 内容其区域</p><p>其中行号区域默认是6字符宽度，当我们的行号从一个比较小的数开始的时候，比如1，那么这个1是如何放置？</p><p>其中左对齐即（x表示空出来的字符）：</p><p>1xxxxx 行号和内容的分隔区域 内容其区域</p><p>右对齐是：</p><p>xxxxx1 行号和内容的分隔区域 内容其区域,</p><p>右对齐，有前导0，即：</p><p>000001 行号和内容的分隔区域 内容其区域,</p><h2 id="4-6-p-或-no-renumber"><a href="#4-6-p-或-no-renumber" class="headerlink" title="4.6. -p 或 --no-renumber"></a>4.6. -p 或 --no-renumber</h2><p>这个选项指定了当一个新的页开始的时候，行号不要从新开始。一般来说，我们可以定义多个header，body和footer，当上一个footer结束，下一个header开始的时候，即为新的一页，新的页开始的时候，行号从新开始的。</p><h2 id="4-7-s-string-或-number-separator-x3D-string"><a href="#4-7-s-string-或-number-separator-x3D-string" class="headerlink" title="4.7. -s string 或 --number-separator&#x3D;string"></a>4.7. -s string 或 --number-separator&#x3D;string</h2><p>上面说了，nl输出的每一行的行号和内容之间有分隔区域，这个选项设置行号和行内容之间的分隔区域，默认是TAB，可以指定任何字符串。</p><h2 id="4-8-v-number-或-starting-line-number-x3D-number"><a href="#4-8-v-number-或-starting-line-number-x3D-number" class="headerlink" title="4.8. -v number 或 --starting-line-number&#x3D;number"></a>4.8. -v number 或 --starting-line-number&#x3D;number</h2><p>设置行号的初始值，默认是1</p><h2 id="4-9-w-number-或-number-width-x3D-number"><a href="#4-9-w-number-或-number-width-x3D-number" class="headerlink" title="4.9. -w number 或 --number-width&#x3D;number"></a>4.9. -w number 或 --number-width&#x3D;number</h2><p>上面说了，nl输出的每一行的行号区域默认是6字符宽度，这个选项用来设置行号区域的字符宽度。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Linux </category>
          
          <category> shell </category>
          
          <category> 常用命令 </category>
          
          <category> 文件展示命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tac</title>
      <link href="/2022/09/03/LinuxTextShowCommand-tac/"/>
      <url>/2022/09/03/LinuxTextShowCommand-tac/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-命令作用"><a href="#1-命令作用" class="headerlink" title="1. 命令作用"></a>1. 命令作用</h1><p>tac命令和cat命令功能差不多，都是读取文件或者标准输入的文本，然后显示在标准输出，只不过tac是按行反序输出的，即先打印最后一行，然后倒数第二行，。。</p><p>例如有一个文件，它的内容如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">123</span><br><span class="line">456</span><br><span class="line">789</span><br></pre></td></tr></table></figure><p>那么使用tac输出的结果就是</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">789</span><br><span class="line">456</span><br><span class="line">123</span><br></pre></td></tr></table></figure><h1 id="2-命令格式"><a href="#2-命令格式" class="headerlink" title="2. 命令格式"></a>2. 命令格式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tac</span> [options]... [file]...</span><br></pre></td></tr></table></figure><p>如果没有文件名称，或者文件名称是-，那么代表标准输入。</p><h1 id="3-命令原理"><a href="#3-命令原理" class="headerlink" title="3. 命令原理"></a>3. 命令原理</h1><p>tac命令的工作原理是根据一个字符串把整个文本切分成分组，然后先打印最后一个分组，再倒数第二个，。。。，最后打印第一个分组，用来拆分的分割字符串默认被附加在每一个分组末尾，tac默认使用换行符作为分割字符串。</p><p>这可能不太好理解，下面我们结合-b选项，讲解一下tac的工作原理。</p><h1 id="4-选项"><a href="#4-选项" class="headerlink" title="4. 选项"></a>4. 选项</h1><h2 id="4-1-b，-before"><a href="#4-1-b，-before" class="headerlink" title="4.1. -b，--before"></a>4.1. -b，--before</h2><p>这个选项可以把分割字符串附加在每一个分组的前面，假设上面的文件每一行都有一个换行符，换行符使用$表示，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">123$</span><br><span class="line">456$</span><br><span class="line">789$</span><br></pre></td></tr></table></figure><p>因此整个文本被换行符分割成“123” “456” “789”，由于使用-b选项，因此换行符会被附加在每一个分组前面，因此每一个完整的分组如下：</p><p>“123” “$456”  “$789”，“$”，反着打印结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">789</span><br><span class="line">456123</span><br></pre></td></tr></table></figure><p>即：</p><ol><li>先打印换行符</li><li>打印$789（此时789前面有个换行）</li><li>打印$456</li><li>最后在456后面打印123，456和123之间没有换行</li></ol><h2 id="4-2-s，-separator-x3D-str"><a href="#4-2-s，-separator-x3D-str" class="headerlink" title="4.2. -s，--separator&#x3D;str"></a>4.2. -s，--separator&#x3D;str</h2><p>这个选项可以修改分割字符串，例如我们使用-s “ww”，那么我们使用这个选项打印如下文本 “aaawwbwswwdd$”（$代表换行），即</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;aaawwbwswwdd&quot;</span> &gt; test.txt</span><br><span class="line"><span class="built_in">tac</span> -s <span class="string">&quot;ww&quot;</span> test.txt</span><br></pre></td></tr></table></figure><p>熟悉根据分割字符串“ww”，原始文本被分割成“aaaww”，“bwsww”，“dd$”，那么打印出来的结果就是</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dd</span><br><span class="line">bwswwaaaww</span><br></pre></td></tr></table></figure><p>如果此时加上-b选项，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tac</span> -b -s <span class="string">&quot;ww&quot;</span> test.txt</span><br></pre></td></tr></table></figure><p>熟悉根据分割字符串“ww”，原始文本被分割成“aaa”，“wwbws”，“wwdd$”，那么打印出来的结果就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wwdd</span><br><span class="line">wwbwsaaa</span><br></pre></td></tr></table></figure><h2 id="4-3-r，-regex"><a href="#4-3-r，-regex" class="headerlink" title="4.3. -r，--regex"></a>4.3. -r，--regex</h2><p>把分割字符串当成正则表达式来解析</p><h2 id="4-4-help和-version"><a href="#4-4-help和-version" class="headerlink" title="4.4. --help和--version"></a>4.4. --help和--version</h2><p>这两个选项会被大部分GNU coreutils 工具包中的程序支持，分别是打印帮助信息和打印当前工具命令的版本号。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Linux </category>
          
          <category> shell </category>
          
          <category> 常用命令 </category>
          
          <category> 文件展示命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cat</title>
      <link href="/2022/09/02/LinuxTextShowCommand-cat/"/>
      <url>/2022/09/02/LinuxTextShowCommand-cat/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h1 id="1-命令作用"><a href="#1-命令作用" class="headerlink" title="1. 命令作用"></a>1. 命令作用</h1><p>这个命令主要的作用是把文件（或者标准输入）的内容显示在标准输出。</p><h1 id="2-命令格式"><a href="#2-命令格式" class="headerlink" title="2. 命令格式"></a>2. 命令格式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> [options] [file]...</span><br></pre></td></tr></table></figure><p>当没有给出文件名称，或者使用-作为文件名称的时候，则cat显示标准输入的内容。</p><h1 id="3-选项"><a href="#3-选项" class="headerlink" title="3. 选项"></a>3. 选项</h1><table><thead><tr><th>短选项</th><th>长选项</th><th>含义</th></tr></thead><tbody><tr><td></td><td>--help</td><td>打印帮助信息</td></tr><tr><td></td><td>--version</td><td>打印版本号</td></tr><tr><td>-n</td><td>--number</td><td>给输出的行编号，从1开始</td></tr><tr><td>-b</td><td>--number-nonblank</td><td>给输出的行编号，从1开始，跳过所有的空行，如果这个选项生效，那么-n被忽略</td></tr><tr><td>-s</td><td>--squeeze-blank</td><td>合并相邻的多个空行为一个空行</td></tr><tr><td>-v</td><td>--show-nonprinting</td><td>展示除了LFD（换行）和TAB（水平制表符）以外的所有控制字符，展示方式是使用^标记，例如ASCII码中的NUL字符可以使用CTRL+@表示，那么NUL字符就展示为^@。<br/>-v选项使得cat命令一个字节一个字节的展示文件的数据，cat会默认把一个字节的低7位当作ASCII码来展示，如果是可打印字符就展示对应的字符，如果不是可打印的，就使用^+xxx来展示，例如当这个字节是0的时候，就是展示成^@，如果这个字节的最高位是1，那么就在展示的字符前面加上前导的M-，例如-128，就展示为M-^@</td></tr><tr><td>-E</td><td>--show-ends</td><td>把换行符LFD（Line Feed）展示为$，如果在换行符前面有回车符，即\r\n，则一起展示为^M$</td></tr><tr><td>-T</td><td>--show-tabs</td><td>把TAB符展示为^I（爱）</td></tr><tr><td>-e</td><td></td><td>等于-vE</td></tr><tr><td>-t</td><td></td><td>等于-vT</td></tr><tr><td>-A</td><td></td><td>等于-vET</td></tr></tbody></table><h1 id="4-其他使用介绍"><a href="#4-其他使用介绍" class="headerlink" title="4. 其他使用介绍"></a>4. 其他使用介绍</h1><p>借助重定向的操作，可以创建新文件并写入初始化的内容，即：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; NewFile.txt</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> - &gt; NewFile.txt</span><br></pre></td></tr></table></figure><p>此时cat会从标准输入读取字符，直到输入结束（CTRL+D）。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Linux </category>
          
          <category> shell </category>
          
          <category> 常用命令 </category>
          
          <category> 文件展示命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>文章分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>friends</title>
      <link href="/friends/index.html"/>
      <url>/friends/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
